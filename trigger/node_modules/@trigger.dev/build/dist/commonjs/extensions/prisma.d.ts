import { BuildManifest, BuildTarget } from "@trigger.dev/core/v3";
import { BuildContext, BuildExtension } from "@trigger.dev/core/v3/build";
export type PrismaExtensionOptions = {
    schema: string;
    migrate?: boolean;
    version?: string;
    /**
     * Adds the `--sql` flag to the `prisma generate` command. This will generate the SQL files for the Prisma schema. Requires the `typedSql preview feature and prisma 5.19.0 or later.
     */
    typedSql?: boolean;
    /**
     * The client generator to use. Set this param to prevent all generators in the prisma schema from being generated.
     *
     * @example
     *
     * ### Prisma schema
     *
     * ```prisma
     * generator client {
     *  provider = "prisma-client-js"
     * }
     *
     * generator typegraphql {
     *  provider = "typegraphql-prisma"
     *  output = "./generated/type-graphql"
     * }
     * ```
     *
     * ### PrismaExtension
     *
     * ```ts
     * prismaExtension({
     *  schema: "./prisma/schema.prisma",
     *  clientGenerator: "client"
     * });
     * ```
     */
    clientGenerator?: string;
    directUrlEnvVarName?: string;
};
export declare function prismaExtension(options: PrismaExtensionOptions): PrismaExtension;
export declare class PrismaExtension implements BuildExtension {
    private options;
    moduleExternals: string[];
    readonly name = "PrismaExtension";
    private _resolvedSchemaPath?;
    constructor(options: PrismaExtensionOptions);
    externalsForTarget(target: BuildTarget): string[];
    onBuildStart(context: BuildContext): Promise<void>;
    onBuildComplete(context: BuildContext, manifest: BuildManifest): Promise<void>;
}
