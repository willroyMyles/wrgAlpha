"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterDynamicSchedulePayloadSchema = exports.ScheduleMetadataSchema = exports.IntervalMetadataSchema = exports.CronMetadataSchema = exports.CronOptionsSchema = exports.IntervalOptionsSchema = exports.ScheduledPayloadSchema = exports.SCHEDULED_EVENT = void 0;
const zod_1 = require("zod");
exports.SCHEDULED_EVENT = "dev.trigger.scheduled";
exports.ScheduledPayloadSchema = zod_1.z.object({
    ts: zod_1.z.coerce.date(),
    lastTimestamp: zod_1.z.coerce.date().optional(),
});
exports.IntervalOptionsSchema = zod_1.z.object({
    /** The number of seconds for the interval. Min = 20, Max = 2_592_000 (30 days) */
    seconds: zod_1.z.number().int().positive().min(20).max(2_592_000),
});
exports.CronOptionsSchema = zod_1.z.object({
    /** A CRON expression that defines the schedule. A useful tool when writing CRON
      expressions is [crontab guru](https://crontab.guru). Note that the timezone
      used is UTC. */
    cron: zod_1.z.string(),
});
exports.CronMetadataSchema = zod_1.z.object({
    type: zod_1.z.literal("cron"),
    options: exports.CronOptionsSchema,
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: zod_1.z.string().optional(),
    metadata: zod_1.z.any(),
});
exports.IntervalMetadataSchema = zod_1.z.object({
    /** An interval reoccurs at the specified number of seconds  */
    type: zod_1.z.literal("interval"),
    /** An object containing options about the interval. */
    options: exports.IntervalOptionsSchema,
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: zod_1.z.string().optional(),
    /** Any additional metadata about the schedule. */
    metadata: zod_1.z.any(),
});
exports.ScheduleMetadataSchema = zod_1.z.discriminatedUnion("type", [
    exports.IntervalMetadataSchema,
    exports.CronMetadataSchema,
]);
exports.RegisterDynamicSchedulePayloadSchema = zod_1.z.object({
    id: zod_1.z.string(),
    jobs: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.string(),
        version: zod_1.z.string(),
    })),
});
//# sourceMappingURL=schedules.js.map