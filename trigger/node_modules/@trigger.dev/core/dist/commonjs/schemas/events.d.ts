import { z } from "zod";
export declare const GetEventSchema: z.ZodObject<{
    /** The event id */
    id: z.ZodString;
    /** The event name */
    name: z.ZodString;
    /** When the event was created */
    createdAt: z.ZodDate;
    /** When the event was last updated */
    updatedAt: z.ZodDate;
    /** The runs that were triggered by the event */
    runs: z.ZodArray<z.ZodObject<{
        /** The Run id */
        id: z.ZodString;
        /** The Run status */
        status: z.ZodUnion<[z.ZodLiteral<"PENDING">, z.ZodLiteral<"QUEUED">, z.ZodLiteral<"WAITING_ON_CONNECTIONS">, z.ZodLiteral<"PREPROCESSING">, z.ZodLiteral<"STARTED">, z.ZodLiteral<"SUCCESS">, z.ZodLiteral<"FAILURE">, z.ZodLiteral<"TIMED_OUT">, z.ZodLiteral<"ABORTED">, z.ZodLiteral<"CANCELED">, z.ZodLiteral<"UNRESOLVED_AUTH">, z.ZodLiteral<"INVALID_PAYLOAD">, z.ZodLiteral<"EXECUTING">, z.ZodLiteral<"WAITING_TO_CONTINUE">, z.ZodLiteral<"WAITING_TO_EXECUTE">]>;
        /** When the run started */
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        /** When the run completed */
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
    }, {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    updatedAt: Date;
    runs: {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
    }[];
    createdAt: Date;
}, {
    name: string;
    id: string;
    updatedAt: Date;
    runs: {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
    }[];
    createdAt: Date;
}>;
export type GetEvent = z.infer<typeof GetEventSchema>;
export declare const CancelRunsForEventSchema: z.ZodObject<{
    cancelledRunIds: z.ZodArray<z.ZodString, "many">;
    failedToCancelRunIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    cancelledRunIds: string[];
    failedToCancelRunIds: string[];
}, {
    cancelledRunIds: string[];
    failedToCancelRunIds: string[];
}>;
export type CancelRunsForEvent = z.infer<typeof CancelRunsForEventSchema>;
