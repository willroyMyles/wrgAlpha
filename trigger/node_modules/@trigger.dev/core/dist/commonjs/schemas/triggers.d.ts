import { z } from "zod";
export declare const EventExampleSchema: z.ZodObject<{
    id: z.ZodString;
    icon: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    payload: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    icon?: string | undefined;
    payload?: any;
}, {
    name: string;
    id: string;
    icon?: string | undefined;
    payload?: any;
}>;
export type EventExample = z.infer<typeof EventExampleSchema>;
export declare const EventSpecificationSchema: z.ZodObject<{
    name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    title: z.ZodString;
    source: z.ZodString;
    icon: z.ZodString;
    filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    schema: z.ZodOptional<z.ZodAny>;
    examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        icon: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        payload: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        icon?: string | undefined;
        payload?: any;
    }, {
        name: string;
        id: string;
        icon?: string | undefined;
        payload?: any;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    source: string;
    name: (string | string[]) & (string | string[] | undefined);
    icon: string;
    title: string;
    filter?: import("./eventFilter.js").EventFilter | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    schema?: any;
    examples?: {
        name: string;
        id: string;
        icon?: string | undefined;
        payload?: any;
    }[] | undefined;
}, {
    source: string;
    name: (string | string[]) & (string | string[] | undefined);
    icon: string;
    title: string;
    filter?: import("./eventFilter.js").EventFilter | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    schema?: any;
    examples?: {
        name: string;
        id: string;
        icon?: string | undefined;
        payload?: any;
    }[] | undefined;
}>;
export declare const DynamicTriggerMetadataSchema: z.ZodObject<{
    type: z.ZodLiteral<"dynamic">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "dynamic";
    id: string;
}, {
    type: "dynamic";
    id: string;
}>;
export declare const TriggerHelpSchema: z.ZodObject<{
    noRuns: z.ZodOptional<z.ZodObject<{
        text: z.ZodString;
        link: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        text: string;
        link?: string | undefined;
    }, {
        text: string;
        link?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    noRuns?: {
        text: string;
        link?: string | undefined;
    } | undefined;
}, {
    noRuns?: {
        text: string;
        link?: string | undefined;
    } | undefined;
}>;
export declare const StaticTriggerMetadataSchema: z.ZodObject<{
    type: z.ZodLiteral<"static">;
    title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    rule: z.ZodObject<{
        event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        source: z.ZodString;
        payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    }, "strip", z.ZodTypeAny, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }>;
    link: z.ZodOptional<z.ZodString>;
    help: z.ZodOptional<z.ZodObject<{
        noRuns: z.ZodOptional<z.ZodObject<{
            text: z.ZodString;
            link: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            link?: string | undefined;
        }, {
            text: string;
            link?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    }, {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "static";
    title: (string | string[]) & (string | string[] | undefined);
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    link?: string | undefined;
    help?: {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    type: "static";
    title: (string | string[]) & (string | string[] | undefined);
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    link?: string | undefined;
    help?: {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    } | undefined;
}>;
export declare const InvokeTriggerMetadataSchema: z.ZodObject<{
    type: z.ZodLiteral<"invoke">;
}, "strip", z.ZodTypeAny, {
    type: "invoke";
}, {
    type: "invoke";
}>;
export declare const ScheduledTriggerMetadataSchema: z.ZodObject<{
    type: z.ZodLiteral<"scheduled">;
    schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"interval">;
        options: z.ZodObject<{
            seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            seconds: number;
        }, {
            seconds: number;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"cron">;
        options: z.ZodObject<{
            cron: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            cron: string;
        }, {
            cron: string;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "scheduled";
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
}, {
    type: "scheduled";
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
}>;
export declare const TriggerMetadataSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"dynamic">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "dynamic";
    id: string;
}, {
    type: "dynamic";
    id: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"static">;
    title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    rule: z.ZodObject<{
        event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        source: z.ZodString;
        payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    }, "strip", z.ZodTypeAny, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }>;
    link: z.ZodOptional<z.ZodString>;
    help: z.ZodOptional<z.ZodObject<{
        noRuns: z.ZodOptional<z.ZodObject<{
            text: z.ZodString;
            link: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            text: string;
            link?: string | undefined;
        }, {
            text: string;
            link?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    }, {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "static";
    title: (string | string[]) & (string | string[] | undefined);
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    link?: string | undefined;
    help?: {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    type: "static";
    title: (string | string[]) & (string | string[] | undefined);
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    link?: string | undefined;
    help?: {
        noRuns?: {
            text: string;
            link?: string | undefined;
        } | undefined;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"scheduled">;
    schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"interval">;
        options: z.ZodObject<{
            seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            seconds: number;
        }, {
            seconds: number;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"cron">;
        options: z.ZodObject<{
            cron: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            cron: string;
        }, {
            cron: string;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "scheduled";
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
}, {
    type: "scheduled";
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"invoke">;
}, "strip", z.ZodTypeAny, {
    type: "invoke";
}, {
    type: "invoke";
}>]>;
export type TriggerMetadata = z.infer<typeof TriggerMetadataSchema>;
