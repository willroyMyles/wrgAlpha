import { z } from "zod";
import { Prettify } from "../types.js";
declare const StringMatchSchema: z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
    $endsWith: z.ZodString;
}, "strip", z.ZodTypeAny, {
    $endsWith: string;
}, {
    $endsWith: string;
}>, z.ZodObject<{
    $startsWith: z.ZodString;
}, "strip", z.ZodTypeAny, {
    $startsWith: string;
}, {
    $startsWith: string;
}>, z.ZodObject<{
    $ignoreCaseEquals: z.ZodString;
}, "strip", z.ZodTypeAny, {
    $ignoreCaseEquals: string;
}, {
    $ignoreCaseEquals: string;
}>]>, "many">]>;
export type StringMatch = z.infer<typeof StringMatchSchema>;
export declare const HTTPMethodUnionSchema: z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"PATCH">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"HEAD">, z.ZodLiteral<"OPTIONS">]>;
export type HttpMethod = z.infer<typeof HTTPMethodUnionSchema>;
/** Only Requests that match this filter will cause the `handler` function to run.
 * For example, you can use this to only respond to `GET` Requests. */
export declare const RequestFilterSchema: z.ZodObject<{
    /** An array of HTTP methods to match.
     * For example, `["GET", "POST"]` will match both `GET` and `POST` Requests. */
    method: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"PATCH">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"HEAD">, z.ZodLiteral<"OPTIONS">]>, "many">>;
    /** An object of header key/values to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
      @example
    ```ts
    filter: {
      header: {
        "content-type": ["application/json"],
      },
    },
    ``` */
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
        $endsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $endsWith: string;
    }, {
        $endsWith: string;
    }>, z.ZodObject<{
        $startsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $startsWith: string;
    }, {
        $startsWith: string;
    }>, z.ZodObject<{
        $ignoreCaseEquals: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $ignoreCaseEquals: string;
    }, {
        $ignoreCaseEquals: string;
    }>]>, "many">]>>>;
    /** An object of query parameters to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
    @example
    ```ts
    filter: {
      query: {
        "hub.mode": [{ $startsWith: "sub" }],
      },
    },
    ``` */
    query: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
        $endsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $endsWith: string;
    }, {
        $endsWith: string;
    }>, z.ZodObject<{
        $startsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $startsWith: string;
    }, {
        $startsWith: string;
    }>, z.ZodObject<{
        $ignoreCaseEquals: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $ignoreCaseEquals: string;
    }, {
        $ignoreCaseEquals: string;
    }>]>, "many">]>>>;
    /** An object of key/values to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
     */
    body: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
}, "strip", z.ZodTypeAny, {
    method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
    headers?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    query?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    body?: import("./eventFilter.js").EventFilter | undefined;
}, {
    method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
    headers?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    query?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    body?: import("./eventFilter.js").EventFilter | undefined;
}>;
export type RequestFilter = z.infer<typeof RequestFilterSchema>;
/** Only Requests that match this filter will cause the `handler` function to run.
 * For example, you can use this to only respond to `GET` Requests. */
export declare const ResponseFilterSchema: z.ZodObject<{
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
        $endsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $endsWith: string;
    }, {
        $endsWith: string;
    }>, z.ZodObject<{
        $startsWith: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $startsWith: string;
    }, {
        $startsWith: string;
    }>, z.ZodObject<{
        $ignoreCaseEquals: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        $ignoreCaseEquals: string;
    }, {
        $ignoreCaseEquals: string;
    }>]>, "many">]>>>;
    body: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    status: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    headers?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    body?: import("./eventFilter.js").EventFilter | undefined;
    status?: number[] | undefined;
}, {
    headers?: Record<string, string[] | ({
        $endsWith: string;
    } | {
        $startsWith: string;
    } | {
        $ignoreCaseEquals: string;
    })[]> | undefined;
    body?: import("./eventFilter.js").EventFilter | undefined;
    status?: number[] | undefined;
}>;
export type ResponseFilter = Prettify<z.infer<typeof ResponseFilterSchema>>;
export {};
