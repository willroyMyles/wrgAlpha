import { z } from "zod";
import { Prettify } from "../types.js";
import { CachedTaskSchema, TaskSchema } from "./tasks.js";
export declare const UpdateTriggerSourceBodyV1Schema: z.ZodObject<{
    registeredEvents: z.ZodArray<z.ZodString, "many">;
    secret: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>;
}, "strip", z.ZodTypeAny, {
    registeredEvents: string[];
    secret?: string | undefined;
    data?: import("./json.js").SerializableJson;
}, {
    registeredEvents: string[];
    secret?: string | undefined;
    data?: import("./json.js").SerializableJson;
}>;
export type UpdateTriggerSourceBodyV1 = z.infer<typeof UpdateTriggerSourceBodyV1Schema>;
export declare const UpdateTriggerSourceBodyV2Schema: z.ZodObject<{
    secret: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>;
    options: z.ZodIntersection<z.ZodObject<{
        event: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        event: string[];
    }, {
        event: string[];
    }>, z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>>;
}, "strip", z.ZodTypeAny, {
    options: {
        event: string[];
    } & Record<string, string[]>;
    secret?: string | undefined;
    data?: import("./json.js").SerializableJson;
}, {
    options: {
        event: string[];
    } & Record<string, string[]>;
    secret?: string | undefined;
    data?: import("./json.js").SerializableJson;
}>;
export type UpdateTriggerSourceBodyV2 = z.infer<typeof UpdateTriggerSourceBodyV2Schema>;
export declare const UpdateWebhookBodySchema: z.ZodDiscriminatedUnion<"active", [z.ZodObject<{
    active: z.ZodLiteral<false>;
}, "strip", z.ZodTypeAny, {
    active: false;
}, {
    active: false;
}>, z.ZodObject<{
    active: z.ZodLiteral<true>;
    config: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    active: true;
    config: Record<string, string[]>;
}, {
    active: true;
    config: Record<string, string[]>;
}>]>;
export type UpdateWebhookBody = z.infer<typeof UpdateWebhookBodySchema>;
export declare const RegisterHTTPTriggerSourceBodySchema: z.ZodObject<{
    type: z.ZodLiteral<"HTTP">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "HTTP";
    url: string;
}, {
    type: "HTTP";
    url: string;
}>;
export declare const RegisterSMTPTriggerSourceBodySchema: z.ZodObject<{
    type: z.ZodLiteral<"SMTP">;
}, "strip", z.ZodTypeAny, {
    type: "SMTP";
}, {
    type: "SMTP";
}>;
export declare const RegisterSQSTriggerSourceBodySchema: z.ZodObject<{
    type: z.ZodLiteral<"SQS">;
}, "strip", z.ZodTypeAny, {
    type: "SQS";
}, {
    type: "SQS";
}>;
export declare const RegisterSourceChannelBodySchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"HTTP">;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "HTTP";
    url: string;
}, {
    type: "HTTP";
    url: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"SMTP">;
}, "strip", z.ZodTypeAny, {
    type: "SMTP";
}, {
    type: "SMTP";
}>, z.ZodObject<{
    type: z.ZodLiteral<"SQS">;
}, "strip", z.ZodTypeAny, {
    type: "SQS";
}, {
    type: "SQS";
}>]>;
export declare const REGISTER_WEBHOOK = "dev.trigger.webhook.register";
export declare const DELIVER_WEBHOOK_REQUEST = "dev.trigger.webhook.deliver";
export declare const RegisterWebhookSourceSchema: z.ZodObject<{
    key: z.ZodString;
    params: z.ZodAny;
    config: z.ZodAny;
    active: z.ZodBoolean;
    secret: z.ZodString;
    url: z.ZodString;
    data: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
    clientId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url: string;
    key: string;
    secret: string;
    active: boolean;
    params?: any;
    config?: any;
    data?: import("./json.js").DeserializedJson | undefined;
    clientId?: string | undefined;
}, {
    url: string;
    key: string;
    secret: string;
    active: boolean;
    params?: any;
    config?: any;
    data?: import("./json.js").DeserializedJson | undefined;
    clientId?: string | undefined;
}>;
export type RegisterWebhookSource = z.infer<typeof RegisterWebhookSourceSchema>;
export declare const RegisterWebhookPayloadSchema: z.ZodObject<{
    active: z.ZodBoolean;
    params: z.ZodOptional<z.ZodAny>;
    config: z.ZodObject<{
        current: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
        desired: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        current: Record<string, string[]>;
        desired: Record<string, string[]>;
    }, {
        current: Record<string, string[]>;
        desired: Record<string, string[]>;
    }>;
    url: z.ZodString;
    secret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    secret: string;
    active: boolean;
    config: {
        current: Record<string, string[]>;
        desired: Record<string, string[]>;
    };
    params?: any;
}, {
    url: string;
    secret: string;
    active: boolean;
    config: {
        current: Record<string, string[]>;
        desired: Record<string, string[]>;
    };
    params?: any;
}>;
export type RegisterWebhookPayload = z.infer<typeof RegisterWebhookPayloadSchema>;
export declare const REGISTER_SOURCE_EVENT_V1 = "dev.trigger.source.register";
export declare const REGISTER_SOURCE_EVENT_V2 = "dev.trigger.source.register.v2";
export declare const RegisterTriggerSourceSchema: z.ZodObject<{
    key: z.ZodString;
    params: z.ZodAny;
    active: z.ZodBoolean;
    secret: z.ZodString;
    data: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
    channel: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"HTTP">;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "HTTP";
        url: string;
    }, {
        type: "HTTP";
        url: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"SMTP">;
    }, "strip", z.ZodTypeAny, {
        type: "SMTP";
    }, {
        type: "SMTP";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"SQS">;
    }, "strip", z.ZodTypeAny, {
        type: "SQS";
    }, {
        type: "SQS";
    }>]>;
    clientId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    key: string;
    secret: string;
    active: boolean;
    channel: {
        type: "HTTP";
        url: string;
    } | {
        type: "SMTP";
    } | {
        type: "SQS";
    };
    params?: any;
    data?: import("./json.js").DeserializedJson | undefined;
    clientId?: string | undefined;
}, {
    key: string;
    secret: string;
    active: boolean;
    channel: {
        type: "HTTP";
        url: string;
    } | {
        type: "SMTP";
    } | {
        type: "SQS";
    };
    params?: any;
    data?: import("./json.js").DeserializedJson | undefined;
    clientId?: string | undefined;
}>;
export type RegisterTriggerSource = z.infer<typeof RegisterTriggerSourceSchema>;
declare const SourceEventOptionSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
export type SourceEventOption = z.infer<typeof SourceEventOptionSchema>;
export declare const RegisterSourceEventSchemaV1: z.ZodObject<{
    /** The id of the source */
    id: z.ZodString;
    source: z.ZodObject<{
        key: z.ZodString;
        params: z.ZodAny;
        active: z.ZodBoolean;
        secret: z.ZodString;
        data: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
        channel: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"HTTP">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "HTTP";
            url: string;
        }, {
            type: "HTTP";
            url: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SMTP">;
        }, "strip", z.ZodTypeAny, {
            type: "SMTP";
        }, {
            type: "SMTP";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SQS">;
        }, "strip", z.ZodTypeAny, {
            type: "SQS";
        }, {
            type: "SQS";
        }>]>;
        clientId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    }, {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    }>;
    events: z.ZodArray<z.ZodString, "many">;
    missingEvents: z.ZodArray<z.ZodString, "many">;
    orphanedEvents: z.ZodArray<z.ZodString, "many">;
    dynamicTriggerId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    source: {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    };
    id: string;
    events: string[];
    missingEvents: string[];
    orphanedEvents: string[];
    dynamicTriggerId?: string | undefined;
}, {
    source: {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    };
    id: string;
    events: string[];
    missingEvents: string[];
    orphanedEvents: string[];
    dynamicTriggerId?: string | undefined;
}>;
export type RegisterSourceEventV1 = z.infer<typeof RegisterSourceEventSchemaV1>;
declare const RegisteredOptionsDiffSchema: z.ZodObject<{
    desired: z.ZodArray<z.ZodString, "many">;
    missing: z.ZodArray<z.ZodString, "many">;
    orphaned: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    desired: string[];
    missing: string[];
    orphaned: string[];
}, {
    desired: string[];
    missing: string[];
    orphaned: string[];
}>;
export type RegisteredOptionsDiff = Prettify<z.infer<typeof RegisteredOptionsDiffSchema>>;
declare const RegisterSourceEventOptionsSchema: z.ZodIntersection<z.ZodObject<{
    event: z.ZodObject<{
        desired: z.ZodArray<z.ZodString, "many">;
        missing: z.ZodArray<z.ZodString, "many">;
        orphaned: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }>;
}, "strip", z.ZodTypeAny, {
    event: {
        desired: string[];
        missing: string[];
        orphaned: string[];
    };
}, {
    event: {
        desired: string[];
        missing: string[];
        orphaned: string[];
    };
}>, z.ZodRecord<z.ZodString, z.ZodObject<{
    desired: z.ZodArray<z.ZodString, "many">;
    missing: z.ZodArray<z.ZodString, "many">;
    orphaned: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    desired: string[];
    missing: string[];
    orphaned: string[];
}, {
    desired: string[];
    missing: string[];
    orphaned: string[];
}>>>;
export type RegisterSourceEventOptions = z.infer<typeof RegisterSourceEventOptionsSchema>;
export declare const RegisterSourceEventSchemaV2: z.ZodObject<{
    /** The id of the source */
    id: z.ZodString;
    source: z.ZodObject<{
        key: z.ZodString;
        params: z.ZodAny;
        active: z.ZodBoolean;
        secret: z.ZodString;
        data: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
        channel: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"HTTP">;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "HTTP";
            url: string;
        }, {
            type: "HTTP";
            url: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SMTP">;
        }, "strip", z.ZodTypeAny, {
            type: "SMTP";
        }, {
            type: "SMTP";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SQS">;
        }, "strip", z.ZodTypeAny, {
            type: "SQS";
        }, {
            type: "SQS";
        }>]>;
        clientId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    }, {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    }>;
    options: z.ZodIntersection<z.ZodObject<{
        event: z.ZodObject<{
            desired: z.ZodArray<z.ZodString, "many">;
            missing: z.ZodArray<z.ZodString, "many">;
            orphaned: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            desired: string[];
            missing: string[];
            orphaned: string[];
        }, {
            desired: string[];
            missing: string[];
            orphaned: string[];
        }>;
    }, "strip", z.ZodTypeAny, {
        event: {
            desired: string[];
            missing: string[];
            orphaned: string[];
        };
    }, {
        event: {
            desired: string[];
            missing: string[];
            orphaned: string[];
        };
    }>, z.ZodRecord<z.ZodString, z.ZodObject<{
        desired: z.ZodArray<z.ZodString, "many">;
        missing: z.ZodArray<z.ZodString, "many">;
        orphaned: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }>>>;
    dynamicTriggerId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    options: {
        event: {
            desired: string[];
            missing: string[];
            orphaned: string[];
        };
    } & Record<string, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }>;
    source: {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    };
    id: string;
    dynamicTriggerId?: string | undefined;
}, {
    options: {
        event: {
            desired: string[];
            missing: string[];
            orphaned: string[];
        };
    } & Record<string, {
        desired: string[];
        missing: string[];
        orphaned: string[];
    }>;
    source: {
        key: string;
        secret: string;
        active: boolean;
        channel: {
            type: "HTTP";
            url: string;
        } | {
            type: "SMTP";
        } | {
            type: "SQS";
        };
        params?: any;
        data?: import("./json.js").DeserializedJson | undefined;
        clientId?: string | undefined;
    };
    id: string;
    dynamicTriggerId?: string | undefined;
}>;
export type RegisterSourceEventV2 = z.infer<typeof RegisterSourceEventSchemaV2>;
export declare const TriggerSourceSchema: z.ZodObject<{
    id: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    key: string;
}, {
    id: string;
    key: string;
}>;
declare const HttpSourceResponseMetadataSchema: z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>;
export type HttpSourceResponseMetadata = z.infer<typeof HttpSourceResponseMetadataSchema>;
export declare const HandleTriggerSourceSchema: z.ZodObject<{
    key: z.ZodString;
    secret: z.ZodString;
    data: z.ZodAny;
    params: z.ZodAny;
    auth: z.ZodOptional<z.ZodObject<{
        type: z.ZodEnum<["oauth2", "apiKey"]>;
        accessToken: z.ZodString;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        additionalFields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }>>;
    metadata: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
}, "strip", z.ZodTypeAny, {
    key: string;
    secret: string;
    data?: any;
    params?: any;
    auth?: {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    } | undefined;
    metadata?: import("./json.js").DeserializedJson | undefined;
}, {
    key: string;
    secret: string;
    data?: any;
    params?: any;
    auth?: {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    } | undefined;
    metadata?: import("./json.js").DeserializedJson | undefined;
}>;
export type HandleTriggerSource = z.infer<typeof HandleTriggerSourceSchema>;
export type TriggerSource = z.infer<typeof TriggerSourceSchema>;
export declare const HttpSourceRequestHeadersSchema: z.ZodObject<{
    "x-ts-key": z.ZodString;
    "x-ts-dynamic-id": z.ZodOptional<z.ZodString>;
    "x-ts-secret": z.ZodString;
    "x-ts-data": z.ZodEffects<z.ZodString, any, string>;
    "x-ts-params": z.ZodEffects<z.ZodString, any, string>;
    "x-ts-http-url": z.ZodString;
    "x-ts-http-method": z.ZodString;
    "x-ts-http-headers": z.ZodEffects<z.ZodString, Record<string, string>, string>;
    "x-ts-auth": z.ZodEffects<z.ZodOptional<z.ZodString>, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    } | undefined, string | undefined>;
    "x-ts-metadata": z.ZodEffects<z.ZodOptional<z.ZodString>, string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | null | undefined, string | undefined>;
}, "strip", z.ZodTypeAny, {
    "x-ts-key": string;
    "x-ts-secret": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": Record<string, string>;
    "x-ts-dynamic-id"?: string | undefined;
    "x-ts-data"?: any;
    "x-ts-params"?: any;
    "x-ts-auth"?: {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    } | undefined;
    "x-ts-metadata"?: string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | null | undefined;
}, {
    "x-ts-key": string;
    "x-ts-secret": string;
    "x-ts-data": string;
    "x-ts-params": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": string;
    "x-ts-dynamic-id"?: string | undefined;
    "x-ts-auth"?: string | undefined;
    "x-ts-metadata"?: string | undefined;
}>;
export type HttpSourceRequestHeaders = z.output<typeof HttpSourceRequestHeadersSchema>;
export declare const HttpEndpointRequestHeadersSchema: z.ZodObject<{
    "x-ts-key": z.ZodString;
    "x-ts-http-url": z.ZodString;
    "x-ts-http-method": z.ZodString;
    "x-ts-http-headers": z.ZodEffects<z.ZodString, Record<string, string>, string>;
}, "strip", z.ZodTypeAny, {
    "x-ts-key": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": Record<string, string>;
}, {
    "x-ts-key": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": string;
}>;
export declare const WebhookSourceRequestHeadersSchema: z.ZodObject<{
    "x-ts-key": z.ZodString;
    "x-ts-dynamic-id": z.ZodOptional<z.ZodString>;
    "x-ts-secret": z.ZodString;
    "x-ts-params": z.ZodEffects<z.ZodString, any, string>;
    "x-ts-http-url": z.ZodString;
    "x-ts-http-method": z.ZodString;
    "x-ts-http-headers": z.ZodEffects<z.ZodString, Record<string, string>, string>;
}, "strip", z.ZodTypeAny, {
    "x-ts-key": string;
    "x-ts-secret": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": Record<string, string>;
    "x-ts-dynamic-id"?: string | undefined;
    "x-ts-params"?: any;
}, {
    "x-ts-key": string;
    "x-ts-secret": string;
    "x-ts-params": string;
    "x-ts-http-url": string;
    "x-ts-http-method": string;
    "x-ts-http-headers": string;
    "x-ts-dynamic-id"?: string | undefined;
}>;
export type WebhookSourceRequestHeaders = z.output<typeof WebhookSourceRequestHeadersSchema>;
export declare const PongSuccessResponseSchema: z.ZodObject<{
    ok: z.ZodLiteral<true>;
    triggerVersion: z.ZodOptional<z.ZodString>;
    triggerSdkVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}, {
    ok: true;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}>;
export declare const PongErrorResponseSchema: z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
    triggerSdkVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}>;
export declare const PongResponseSchema: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    triggerVersion: z.ZodOptional<z.ZodString>;
    triggerSdkVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}, {
    ok: true;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
    triggerSdkVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
    triggerSdkVersion?: string | undefined;
}>]>;
export type PongResponse = z.infer<typeof PongResponseSchema>;
export declare const ValidateSuccessResponseSchema: z.ZodObject<{
    ok: z.ZodLiteral<true>;
    endpointId: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    endpointId: string;
    triggerVersion?: string | undefined;
}, {
    ok: true;
    endpointId: string;
    triggerVersion?: string | undefined;
}>;
export declare const ValidateErrorResponseSchema: z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
}, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
}>;
export declare const ValidateResponseSchema: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    endpointId: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    endpointId: string;
    triggerVersion?: string | undefined;
}, {
    ok: true;
    endpointId: string;
    triggerVersion?: string | undefined;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
    triggerVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
}, {
    error: string;
    ok: false;
    triggerVersion?: string | undefined;
}>]>;
export type ValidateResponse = z.infer<typeof ValidateResponseSchema>;
export declare const QueueOptionsSchema: z.ZodObject<{
    name: z.ZodString;
    maxConcurrent: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    name: string;
    maxConcurrent?: number | undefined;
}, {
    name: string;
    maxConcurrent?: number | undefined;
}>;
export type QueueOptions = z.infer<typeof QueueOptionsSchema>;
export declare const ConcurrencyLimitOptionsSchema: z.ZodObject<{
    id: z.ZodString;
    limit: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    limit: number;
}, {
    id: string;
    limit: number;
}>;
export declare const JobMetadataSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    version: z.ZodString;
    event: z.ZodObject<{
        name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        title: z.ZodString;
        source: z.ZodString;
        icon: z.ZodString;
        filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        schema: z.ZodOptional<z.ZodAny>;
        examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            icon: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            payload: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }, {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    }, {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    }>;
    trigger: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"dynamic">;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "dynamic";
        id: string;
    }, {
        type: "dynamic";
        id: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"static">;
        title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        rule: z.ZodObject<{
            event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            source: z.ZodString;
            payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        }, "strip", z.ZodTypeAny, {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        }, {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        }>;
        link: z.ZodOptional<z.ZodString>;
        help: z.ZodOptional<z.ZodObject<{
            noRuns: z.ZodOptional<z.ZodObject<{
                text: z.ZodString;
                link: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                text: string;
                link?: string | undefined;
            }, {
                text: string;
                link?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        }, {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "static";
        title: (string | string[]) & (string | string[] | undefined);
        rule: {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        };
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        link?: string | undefined;
        help?: {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        } | undefined;
    }, {
        type: "static";
        title: (string | string[]) & (string | string[] | undefined);
        rule: {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        };
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        link?: string | undefined;
        help?: {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        } | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"scheduled">;
        schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"interval">;
            options: z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>;
            accountId: z.ZodOptional<z.ZodString>;
            metadata: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        }, {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"cron">;
            options: z.ZodObject<{
                cron: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                cron: string;
            }, {
                cron: string;
            }>;
            accountId: z.ZodOptional<z.ZodString>;
            metadata: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        }, {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "scheduled";
        schedule: {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        } | {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        };
    }, {
        type: "scheduled";
        schedule: {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        } | {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        };
    }>, z.ZodObject<{
        type: z.ZodLiteral<"invoke">;
    }, "strip", z.ZodTypeAny, {
        type: "invoke";
    }, {
        type: "invoke";
    }>]>;
    integrations: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            instructions: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }>;
        authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>>;
    internal: z.ZodDefault<z.ZodBoolean>;
    enabled: z.ZodBoolean;
    startPosition: z.ZodEnum<["initial", "latest"]>;
    preprocessRuns: z.ZodBoolean;
    concurrencyLimit: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        id: z.ZodString;
        limit: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        limit: number;
    }, {
        id: string;
        limit: number;
    }>, z.ZodNumber]>>;
}, "strip", z.ZodTypeAny, {
    event: {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    };
    version: string;
    name: string;
    id: string;
    trigger: {
        type: "dynamic";
        id: string;
    } | {
        type: "static";
        title: (string | string[]) & (string | string[] | undefined);
        rule: {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        };
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        link?: string | undefined;
        help?: {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        } | undefined;
    } | {
        type: "invoke";
    } | {
        type: "scheduled";
        schedule: {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        } | {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        };
    };
    integrations: Record<string, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>;
    internal: boolean;
    enabled: boolean;
    startPosition: "initial" | "latest";
    preprocessRuns: boolean;
    concurrencyLimit?: number | {
        id: string;
        limit: number;
    } | undefined;
}, {
    event: {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    };
    version: string;
    name: string;
    id: string;
    trigger: {
        type: "dynamic";
        id: string;
    } | {
        type: "static";
        title: (string | string[]) & (string | string[] | undefined);
        rule: {
            event: (string | string[]) & (string | string[] | undefined);
            source: string;
            payload?: import("./eventFilter.js").EventFilter | undefined;
            context?: import("./eventFilter.js").EventFilter | undefined;
        };
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        link?: string | undefined;
        help?: {
            noRuns?: {
                text: string;
                link?: string | undefined;
            } | undefined;
        } | undefined;
    } | {
        type: "invoke";
    } | {
        type: "scheduled";
        schedule: {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        } | {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        };
    };
    integrations: Record<string, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>;
    enabled: boolean;
    startPosition: "initial" | "latest";
    preprocessRuns: boolean;
    internal?: boolean | undefined;
    concurrencyLimit?: number | {
        id: string;
        limit: number;
    } | undefined;
}>;
export type JobMetadata = z.infer<typeof JobMetadataSchema>;
declare const SourceMetadataV1Schema: z.ZodObject<{
    version: z.ZodLiteral<"1">;
    channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
    integration: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            instructions: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }>;
        authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>;
    key: z.ZodString;
    params: z.ZodAny;
    events: z.ZodArray<z.ZodString, "many">;
    registerSourceJob: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    version: "1";
    key: string;
    channel: "HTTP" | "SMTP" | "SQS";
    events: string[];
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    params?: any;
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}, {
    version: "1";
    key: string;
    channel: "HTTP" | "SMTP" | "SQS";
    events: string[];
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    params?: any;
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}>;
export type SourceMetadataV1 = z.infer<typeof SourceMetadataV1Schema>;
export declare const SourceMetadataV2Schema: z.ZodObject<{
    version: z.ZodLiteral<"2">;
    channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
    integration: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            instructions: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }>;
        authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>;
    key: z.ZodString;
    params: z.ZodAny;
    options: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    registerSourceJob: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    options: Record<string, string[]>;
    version: "2";
    key: string;
    channel: "HTTP" | "SMTP" | "SQS";
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    params?: any;
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}, {
    options: Record<string, string[]>;
    version: "2";
    key: string;
    channel: "HTTP" | "SMTP" | "SQS";
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    params?: any;
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}>;
export type SourceMetadataV2 = z.infer<typeof SourceMetadataV2Schema>;
export declare const WebhookMetadataSchema: z.ZodObject<{
    key: z.ZodString;
    params: z.ZodAny;
    config: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    integration: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            instructions: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }, {
            name: string;
            id: string;
            instructions?: string | undefined;
        }>;
        authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }, {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    }>;
    httpEndpoint: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    key: string;
    config: Record<string, string[]>;
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    httpEndpoint: {
        id: string;
    };
    params?: any;
}, {
    key: string;
    config: Record<string, string[]>;
    integration: {
        id: string;
        metadata: {
            name: string;
            id: string;
            instructions?: string | undefined;
        };
        authSource: "HOSTED" | "LOCAL" | "RESOLVER";
    };
    httpEndpoint: {
        id: string;
    };
    params?: any;
}>;
export type WebhookMetadata = z.infer<typeof WebhookMetadataSchema>;
export declare const WebhookContextMetadataSchema: z.ZodObject<{
    params: z.ZodAny;
    config: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
    secret: z.ZodString;
}, "strip", z.ZodTypeAny, {
    secret: string;
    config: Record<string, string[]>;
    params?: any;
}, {
    secret: string;
    config: Record<string, string[]>;
    params?: any;
}>;
export type WebhookContextMetadata = z.infer<typeof WebhookContextMetadataSchema>;
export declare const DynamicTriggerEndpointMetadataSchema: z.ZodObject<{
    id: z.ZodString;
    jobs: z.ZodArray<z.ZodObject<Pick<{
        id: z.ZodString;
        name: z.ZodString;
        version: z.ZodString;
        event: z.ZodObject<{
            name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            title: z.ZodString;
            source: z.ZodString;
            icon: z.ZodString;
            filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>;
            schema: z.ZodOptional<z.ZodAny>;
            examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                icon: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                payload: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }>;
        trigger: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"dynamic">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "dynamic";
            id: string;
        }, {
            type: "dynamic";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"static">;
            title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>;
            rule: z.ZodObject<{
                event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                source: z.ZodString;
                payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
                context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            }, "strip", z.ZodTypeAny, {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            }, {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            }>;
            link: z.ZodOptional<z.ZodString>;
            help: z.ZodOptional<z.ZodObject<{
                noRuns: z.ZodOptional<z.ZodObject<{
                    text: z.ZodString;
                    link: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    link?: string | undefined;
                }, {
                    text: string;
                    link?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            }, {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        }, {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"scheduled">;
            schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"interval">;
                options: z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>;
                accountId: z.ZodOptional<z.ZodString>;
                metadata: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            }, {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"cron">;
                options: z.ZodObject<{
                    cron: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                }, {
                    cron: string;
                }>;
                accountId: z.ZodOptional<z.ZodString>;
                metadata: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            }, {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        }, {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"invoke">;
        }, "strip", z.ZodTypeAny, {
            type: "invoke";
        }, {
            type: "invoke";
        }>]>;
        integrations: z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>>;
        internal: z.ZodDefault<z.ZodBoolean>;
        enabled: z.ZodBoolean;
        startPosition: z.ZodEnum<["initial", "latest"]>;
        preprocessRuns: z.ZodBoolean;
        concurrencyLimit: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodString;
            limit: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            limit: number;
        }, {
            id: string;
            limit: number;
        }>, z.ZodNumber]>>;
    }, "version" | "id">, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>, "many">;
    registerSourceJob: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    jobs: {
        version: string;
        id: string;
    }[];
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}, {
    id: string;
    jobs: {
        version: string;
        id: string;
    }[];
    registerSourceJob?: {
        version: string;
        id: string;
    } | undefined;
}>;
export type DynamicTriggerEndpointMetadata = z.infer<typeof DynamicTriggerEndpointMetadataSchema>;
declare const HttpEndpointMetadataSchema: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
    enabled: z.ZodBoolean;
    title: z.ZodOptional<z.ZodString>;
    icon: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    event: z.ZodObject<{
        name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        title: z.ZodString;
        source: z.ZodString;
        icon: z.ZodString;
        filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        schema: z.ZodOptional<z.ZodAny>;
        examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            icon: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            payload: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }, {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    }, {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    }>;
    immediateResponseFilter: z.ZodOptional<z.ZodObject<{
        method: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"PATCH">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"HEAD">, z.ZodLiteral<"OPTIONS">]>, "many">>;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
            $endsWith: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $endsWith: string;
        }, {
            $endsWith: string;
        }>, z.ZodObject<{
            $startsWith: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $startsWith: string;
        }, {
            $startsWith: string;
        }>, z.ZodObject<{
            $ignoreCaseEquals: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $ignoreCaseEquals: string;
        }, {
            $ignoreCaseEquals: string;
        }>]>, "many">]>>>;
        query: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
            $endsWith: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $endsWith: string;
        }, {
            $endsWith: string;
        }>, z.ZodObject<{
            $startsWith: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $startsWith: string;
        }, {
            $startsWith: string;
        }>, z.ZodObject<{
            $ignoreCaseEquals: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            $ignoreCaseEquals: string;
        }, {
            $ignoreCaseEquals: string;
        }>]>, "many">]>>>;
        body: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    }, "strip", z.ZodTypeAny, {
        method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
        headers?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        query?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        body?: import("./eventFilter.js").EventFilter | undefined;
    }, {
        method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
        headers?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        query?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        body?: import("./eventFilter.js").EventFilter | undefined;
    }>>;
    skipTriggeringRuns: z.ZodOptional<z.ZodBoolean>;
    source: z.ZodString;
}, "strip", z.ZodTypeAny, {
    event: {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    };
    source: string;
    version: string;
    id: string;
    enabled: boolean;
    title?: string | undefined;
    icon?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    immediateResponseFilter?: {
        method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
        headers?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        query?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        body?: import("./eventFilter.js").EventFilter | undefined;
    } | undefined;
    skipTriggeringRuns?: boolean | undefined;
}, {
    event: {
        source: string;
        name: (string | string[]) & (string | string[] | undefined);
        icon: string;
        title: string;
        filter?: import("./eventFilter.js").EventFilter | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        schema?: any;
        examples?: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[] | undefined;
    };
    source: string;
    version: string;
    id: string;
    enabled: boolean;
    title?: string | undefined;
    icon?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    immediateResponseFilter?: {
        method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
        headers?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        query?: Record<string, string[] | ({
            $endsWith: string;
        } | {
            $startsWith: string;
        } | {
            $ignoreCaseEquals: string;
        })[]> | undefined;
        body?: import("./eventFilter.js").EventFilter | undefined;
    } | undefined;
    skipTriggeringRuns?: boolean | undefined;
}>;
export type HttpEndpointMetadata = z.infer<typeof HttpEndpointMetadataSchema>;
export declare const IndexEndpointResponseSchema: z.ZodObject<{
    jobs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        version: z.ZodString;
        event: z.ZodObject<{
            name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            title: z.ZodString;
            source: z.ZodString;
            icon: z.ZodString;
            filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>;
            schema: z.ZodOptional<z.ZodAny>;
            examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                icon: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                payload: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }>;
        trigger: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"dynamic">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "dynamic";
            id: string;
        }, {
            type: "dynamic";
            id: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"static">;
            title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>;
            rule: z.ZodObject<{
                event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                source: z.ZodString;
                payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
                context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            }, "strip", z.ZodTypeAny, {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            }, {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            }>;
            link: z.ZodOptional<z.ZodString>;
            help: z.ZodOptional<z.ZodObject<{
                noRuns: z.ZodOptional<z.ZodObject<{
                    text: z.ZodString;
                    link: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    text: string;
                    link?: string | undefined;
                }, {
                    text: string;
                    link?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            }, {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        }, {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"scheduled">;
            schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"interval">;
                options: z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>;
                accountId: z.ZodOptional<z.ZodString>;
                metadata: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            }, {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"cron">;
                options: z.ZodObject<{
                    cron: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                }, {
                    cron: string;
                }>;
                accountId: z.ZodOptional<z.ZodString>;
                metadata: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            }, {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        }, {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"invoke">;
        }, "strip", z.ZodTypeAny, {
            type: "invoke";
        }, {
            type: "invoke";
        }>]>;
        integrations: z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>>;
        internal: z.ZodDefault<z.ZodBoolean>;
        enabled: z.ZodBoolean;
        startPosition: z.ZodEnum<["initial", "latest"]>;
        preprocessRuns: z.ZodBoolean;
        concurrencyLimit: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodString;
            limit: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            limit: number;
        }, {
            id: string;
            limit: number;
        }>, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        version: string;
        name: string;
        id: string;
        trigger: {
            type: "dynamic";
            id: string;
        } | {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "invoke";
        } | {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        };
        integrations: Record<string, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        internal: boolean;
        enabled: boolean;
        startPosition: "initial" | "latest";
        preprocessRuns: boolean;
        concurrencyLimit?: number | {
            id: string;
            limit: number;
        } | undefined;
    }, {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        version: string;
        name: string;
        id: string;
        trigger: {
            type: "dynamic";
            id: string;
        } | {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "invoke";
        } | {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        };
        integrations: Record<string, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        enabled: boolean;
        startPosition: "initial" | "latest";
        preprocessRuns: boolean;
        internal?: boolean | undefined;
        concurrencyLimit?: number | {
            id: string;
            limit: number;
        } | undefined;
    }>, "many">;
    sources: z.ZodArray<z.ZodEffects<z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
        version: z.ZodLiteral<"1">;
        channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
        integration: z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        key: z.ZodString;
        params: z.ZodAny;
        events: z.ZodArray<z.ZodString, "many">;
        registerSourceJob: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }>, z.ZodObject<{
        version: z.ZodLiteral<"2">;
        channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
        integration: z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        key: z.ZodString;
        params: z.ZodAny;
        options: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
        registerSourceJob: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }>]>, {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    } | {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, unknown>, "many">;
    webhooks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        params: z.ZodAny;
        config: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
        integration: z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        httpEndpoint: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        config: Record<string, string[]>;
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        httpEndpoint: {
            id: string;
        };
        params?: any;
    }, {
        key: string;
        config: Record<string, string[]>;
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        httpEndpoint: {
            id: string;
        };
        params?: any;
    }>, "many">>;
    dynamicTriggers: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        jobs: z.ZodArray<z.ZodObject<Pick<{
            id: z.ZodString;
            name: z.ZodString;
            version: z.ZodString;
            event: z.ZodObject<{
                name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                title: z.ZodString;
                source: z.ZodString;
                icon: z.ZodString;
                filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
                properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    text: z.ZodString;
                    url: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }>, "many">>;
                schema: z.ZodOptional<z.ZodAny>;
                examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    icon: z.ZodOptional<z.ZodString>;
                    name: z.ZodString;
                    payload: z.ZodAny;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    icon?: string | undefined;
                    payload?: any;
                }, {
                    name: string;
                    id: string;
                    icon?: string | undefined;
                    payload?: any;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                source: string;
                name: (string | string[]) & (string | string[] | undefined);
                icon: string;
                title: string;
                filter?: import("./eventFilter.js").EventFilter | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | undefined;
                schema?: any;
                examples?: {
                    name: string;
                    id: string;
                    icon?: string | undefined;
                    payload?: any;
                }[] | undefined;
            }, {
                source: string;
                name: (string | string[]) & (string | string[] | undefined);
                icon: string;
                title: string;
                filter?: import("./eventFilter.js").EventFilter | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | undefined;
                schema?: any;
                examples?: {
                    name: string;
                    id: string;
                    icon?: string | undefined;
                    payload?: any;
                }[] | undefined;
            }>;
            trigger: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"dynamic">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "dynamic";
                id: string;
            }, {
                type: "dynamic";
                id: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"static">;
                title: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    text: z.ZodString;
                    url: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }>, "many">>;
                rule: z.ZodObject<{
                    event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
                    source: z.ZodString;
                    payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
                    context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
                }, "strip", z.ZodTypeAny, {
                    event: (string | string[]) & (string | string[] | undefined);
                    source: string;
                    payload?: import("./eventFilter.js").EventFilter | undefined;
                    context?: import("./eventFilter.js").EventFilter | undefined;
                }, {
                    event: (string | string[]) & (string | string[] | undefined);
                    source: string;
                    payload?: import("./eventFilter.js").EventFilter | undefined;
                    context?: import("./eventFilter.js").EventFilter | undefined;
                }>;
                link: z.ZodOptional<z.ZodString>;
                help: z.ZodOptional<z.ZodObject<{
                    noRuns: z.ZodOptional<z.ZodObject<{
                        text: z.ZodString;
                        link: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        text: string;
                        link?: string | undefined;
                    }, {
                        text: string;
                        link?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    noRuns?: {
                        text: string;
                        link?: string | undefined;
                    } | undefined;
                }, {
                    noRuns?: {
                        text: string;
                        link?: string | undefined;
                    } | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                type: "static";
                title: (string | string[]) & (string | string[] | undefined);
                rule: {
                    event: (string | string[]) & (string | string[] | undefined);
                    source: string;
                    payload?: import("./eventFilter.js").EventFilter | undefined;
                    context?: import("./eventFilter.js").EventFilter | undefined;
                };
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | undefined;
                link?: string | undefined;
                help?: {
                    noRuns?: {
                        text: string;
                        link?: string | undefined;
                    } | undefined;
                } | undefined;
            }, {
                type: "static";
                title: (string | string[]) & (string | string[] | undefined);
                rule: {
                    event: (string | string[]) & (string | string[] | undefined);
                    source: string;
                    payload?: import("./eventFilter.js").EventFilter | undefined;
                    context?: import("./eventFilter.js").EventFilter | undefined;
                };
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | undefined;
                link?: string | undefined;
                help?: {
                    noRuns?: {
                        text: string;
                        link?: string | undefined;
                    } | undefined;
                } | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"scheduled">;
                schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"interval">;
                    options: z.ZodObject<{
                        seconds: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        seconds: number;
                    }, {
                        seconds: number;
                    }>;
                    accountId: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodAny;
                }, "strip", z.ZodTypeAny, {
                    options: {
                        seconds: number;
                    };
                    type: "interval";
                    accountId?: string | undefined;
                    metadata?: any;
                }, {
                    options: {
                        seconds: number;
                    };
                    type: "interval";
                    accountId?: string | undefined;
                    metadata?: any;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"cron">;
                    options: z.ZodObject<{
                        cron: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        cron: string;
                    }, {
                        cron: string;
                    }>;
                    accountId: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodAny;
                }, "strip", z.ZodTypeAny, {
                    options: {
                        cron: string;
                    };
                    type: "cron";
                    accountId?: string | undefined;
                    metadata?: any;
                }, {
                    options: {
                        cron: string;
                    };
                    type: "cron";
                    accountId?: string | undefined;
                    metadata?: any;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "scheduled";
                schedule: {
                    options: {
                        cron: string;
                    };
                    type: "cron";
                    accountId?: string | undefined;
                    metadata?: any;
                } | {
                    options: {
                        seconds: number;
                    };
                    type: "interval";
                    accountId?: string | undefined;
                    metadata?: any;
                };
            }, {
                type: "scheduled";
                schedule: {
                    options: {
                        cron: string;
                    };
                    type: "cron";
                    accountId?: string | undefined;
                    metadata?: any;
                } | {
                    options: {
                        seconds: number;
                    };
                    type: "interval";
                    accountId?: string | undefined;
                    metadata?: any;
                };
            }>, z.ZodObject<{
                type: z.ZodLiteral<"invoke">;
            }, "strip", z.ZodTypeAny, {
                type: "invoke";
            }, {
                type: "invoke";
            }>]>;
            integrations: z.ZodRecord<z.ZodString, z.ZodObject<{
                id: z.ZodString;
                metadata: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                    instructions: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    instructions?: string | undefined;
                }, {
                    name: string;
                    id: string;
                    instructions?: string | undefined;
                }>;
                authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                metadata: {
                    name: string;
                    id: string;
                    instructions?: string | undefined;
                };
                authSource: "HOSTED" | "LOCAL" | "RESOLVER";
            }, {
                id: string;
                metadata: {
                    name: string;
                    id: string;
                    instructions?: string | undefined;
                };
                authSource: "HOSTED" | "LOCAL" | "RESOLVER";
            }>>;
            internal: z.ZodDefault<z.ZodBoolean>;
            enabled: z.ZodBoolean;
            startPosition: z.ZodEnum<["initial", "latest"]>;
            preprocessRuns: z.ZodBoolean;
            concurrencyLimit: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
                id: z.ZodString;
                limit: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                id: string;
                limit: number;
            }, {
                id: string;
                limit: number;
            }>, z.ZodNumber]>>;
        }, "version" | "id">, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>, "many">;
        registerSourceJob: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }>, "many">;
    dynamicSchedules: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        jobs: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
    }, {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
    }>, "many">;
    httpEndpoints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
        enabled: z.ZodBoolean;
        title: z.ZodOptional<z.ZodString>;
        icon: z.ZodOptional<z.ZodString>;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        event: z.ZodObject<{
            name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
            title: z.ZodString;
            source: z.ZodString;
            icon: z.ZodString;
            filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
            properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>;
            schema: z.ZodOptional<z.ZodAny>;
            examples: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                icon: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                payload: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }, {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }, {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        }>;
        immediateResponseFilter: z.ZodOptional<z.ZodObject<{
            method: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"GET">, z.ZodLiteral<"POST">, z.ZodLiteral<"PUT">, z.ZodLiteral<"PATCH">, z.ZodLiteral<"DELETE">, z.ZodLiteral<"HEAD">, z.ZodLiteral<"OPTIONS">]>, "many">>;
            headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
                $endsWith: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $endsWith: string;
            }, {
                $endsWith: string;
            }>, z.ZodObject<{
                $startsWith: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $startsWith: string;
            }, {
                $startsWith: string;
            }>, z.ZodObject<{
                $ignoreCaseEquals: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $ignoreCaseEquals: string;
            }, {
                $ignoreCaseEquals: string;
            }>]>, "many">]>>>;
            query: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
                $endsWith: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $endsWith: string;
            }, {
                $endsWith: string;
            }>, z.ZodObject<{
                $startsWith: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $startsWith: string;
            }, {
                $startsWith: string;
            }>, z.ZodObject<{
                $ignoreCaseEquals: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                $ignoreCaseEquals: string;
            }, {
                $ignoreCaseEquals: string;
            }>]>, "many">]>>>;
            body: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        }, "strip", z.ZodTypeAny, {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        }, {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        }>>;
        skipTriggeringRuns: z.ZodOptional<z.ZodBoolean>;
        source: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        source: string;
        version: string;
        id: string;
        enabled: boolean;
        title?: string | undefined;
        icon?: string | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        immediateResponseFilter?: {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        } | undefined;
        skipTriggeringRuns?: boolean | undefined;
    }, {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        source: string;
        version: string;
        id: string;
        enabled: boolean;
        title?: string | undefined;
        icon?: string | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        immediateResponseFilter?: {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        } | undefined;
        skipTriggeringRuns?: boolean | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    jobs: {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        version: string;
        name: string;
        id: string;
        trigger: {
            type: "dynamic";
            id: string;
        } | {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "invoke";
        } | {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        };
        integrations: Record<string, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        internal: boolean;
        enabled: boolean;
        startPosition: "initial" | "latest";
        preprocessRuns: boolean;
        concurrencyLimit?: number | {
            id: string;
            limit: number;
        } | undefined;
    }[];
    sources: ({
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    } | {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    })[];
    dynamicTriggers: {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }[];
    dynamicSchedules: {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
    }[];
    webhooks?: {
        key: string;
        config: Record<string, string[]>;
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        httpEndpoint: {
            id: string;
        };
        params?: any;
    }[] | undefined;
    httpEndpoints?: {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        source: string;
        version: string;
        id: string;
        enabled: boolean;
        title?: string | undefined;
        icon?: string | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        immediateResponseFilter?: {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        } | undefined;
        skipTriggeringRuns?: boolean | undefined;
    }[] | undefined;
}, {
    jobs: {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        version: string;
        name: string;
        id: string;
        trigger: {
            type: "dynamic";
            id: string;
        } | {
            type: "static";
            title: (string | string[]) & (string | string[] | undefined);
            rule: {
                event: (string | string[]) & (string | string[] | undefined);
                source: string;
                payload?: import("./eventFilter.js").EventFilter | undefined;
                context?: import("./eventFilter.js").EventFilter | undefined;
            };
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            link?: string | undefined;
            help?: {
                noRuns?: {
                    text: string;
                    link?: string | undefined;
                } | undefined;
            } | undefined;
        } | {
            type: "invoke";
        } | {
            type: "scheduled";
            schedule: {
                options: {
                    cron: string;
                };
                type: "cron";
                accountId?: string | undefined;
                metadata?: any;
            } | {
                options: {
                    seconds: number;
                };
                type: "interval";
                accountId?: string | undefined;
                metadata?: any;
            };
        };
        integrations: Record<string, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        enabled: boolean;
        startPosition: "initial" | "latest";
        preprocessRuns: boolean;
        internal?: boolean | undefined;
        concurrencyLimit?: number | {
            id: string;
            limit: number;
        } | undefined;
    }[];
    sources: unknown[];
    dynamicTriggers: {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }[];
    dynamicSchedules: {
        id: string;
        jobs: {
            version: string;
            id: string;
        }[];
    }[];
    webhooks?: {
        key: string;
        config: Record<string, string[]>;
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        httpEndpoint: {
            id: string;
        };
        params?: any;
    }[] | undefined;
    httpEndpoints?: {
        event: {
            source: string;
            name: (string | string[]) & (string | string[] | undefined);
            icon: string;
            title: string;
            filter?: import("./eventFilter.js").EventFilter | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | undefined;
            schema?: any;
            examples?: {
                name: string;
                id: string;
                icon?: string | undefined;
                payload?: any;
            }[] | undefined;
        };
        source: string;
        version: string;
        id: string;
        enabled: boolean;
        title?: string | undefined;
        icon?: string | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        immediateResponseFilter?: {
            method?: ("GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS")[] | undefined;
            headers?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            query?: Record<string, string[] | ({
                $endsWith: string;
            } | {
                $startsWith: string;
            } | {
                $ignoreCaseEquals: string;
            })[]> | undefined;
            body?: import("./eventFilter.js").EventFilter | undefined;
        } | undefined;
        skipTriggeringRuns?: boolean | undefined;
    }[] | undefined;
}>;
export type IndexEndpointResponse = z.infer<typeof IndexEndpointResponseSchema>;
export declare const EndpointIndexErrorSchema: z.ZodObject<{
    message: z.ZodString;
    raw: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    message: string;
    raw?: any;
}, {
    message: string;
    raw?: any;
}>;
export type EndpointIndexError = z.infer<typeof EndpointIndexErrorSchema>;
declare const IndexEndpointStatsSchema: z.ZodObject<{
    jobs: z.ZodNumber;
    sources: z.ZodNumber;
    webhooks: z.ZodOptional<z.ZodNumber>;
    dynamicTriggers: z.ZodNumber;
    dynamicSchedules: z.ZodNumber;
    disabledJobs: z.ZodDefault<z.ZodNumber>;
    httpEndpoints: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    jobs: number;
    sources: number;
    dynamicTriggers: number;
    dynamicSchedules: number;
    httpEndpoints: number;
    disabledJobs: number;
    webhooks?: number | undefined;
}, {
    jobs: number;
    sources: number;
    dynamicTriggers: number;
    dynamicSchedules: number;
    webhooks?: number | undefined;
    disabledJobs?: number | undefined;
    httpEndpoints?: number | undefined;
}>;
export type IndexEndpointStats = z.infer<typeof IndexEndpointStatsSchema>;
export declare function parseEndpointIndexStats(stats: unknown): IndexEndpointStats | undefined;
export declare const GetEndpointIndexResponseSchema: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    status: z.ZodLiteral<"PENDING">;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "PENDING";
    updatedAt: Date;
}, {
    status: "PENDING";
    updatedAt: Date;
}>, z.ZodObject<{
    status: z.ZodLiteral<"STARTED">;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "STARTED";
    updatedAt: Date;
}, {
    status: "STARTED";
    updatedAt: Date;
}>, z.ZodObject<{
    status: z.ZodLiteral<"SUCCESS">;
    stats: z.ZodObject<{
        jobs: z.ZodNumber;
        sources: z.ZodNumber;
        webhooks: z.ZodOptional<z.ZodNumber>;
        dynamicTriggers: z.ZodNumber;
        dynamicSchedules: z.ZodNumber;
        disabledJobs: z.ZodDefault<z.ZodNumber>;
        httpEndpoints: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        jobs: number;
        sources: number;
        dynamicTriggers: number;
        dynamicSchedules: number;
        httpEndpoints: number;
        disabledJobs: number;
        webhooks?: number | undefined;
    }, {
        jobs: number;
        sources: number;
        dynamicTriggers: number;
        dynamicSchedules: number;
        webhooks?: number | undefined;
        disabledJobs?: number | undefined;
        httpEndpoints?: number | undefined;
    }>;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "SUCCESS";
    updatedAt: Date;
    stats: {
        jobs: number;
        sources: number;
        dynamicTriggers: number;
        dynamicSchedules: number;
        httpEndpoints: number;
        disabledJobs: number;
        webhooks?: number | undefined;
    };
}, {
    status: "SUCCESS";
    updatedAt: Date;
    stats: {
        jobs: number;
        sources: number;
        dynamicTriggers: number;
        dynamicSchedules: number;
        webhooks?: number | undefined;
        disabledJobs?: number | undefined;
        httpEndpoints?: number | undefined;
    };
}>, z.ZodObject<{
    status: z.ZodLiteral<"FAILURE">;
    error: z.ZodObject<{
        message: z.ZodString;
        raw: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        raw?: any;
    }, {
        message: string;
        raw?: any;
    }>;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "FAILURE";
    error: {
        message: string;
        raw?: any;
    };
    updatedAt: Date;
}, {
    status: "FAILURE";
    error: {
        message: string;
        raw?: any;
    };
    updatedAt: Date;
}>]>;
export type GetEndpointIndexResponse = z.infer<typeof GetEndpointIndexResponseSchema>;
export declare const EndpointHeadersSchema: z.ZodObject<{
    "trigger-version": z.ZodOptional<z.ZodString>;
    "trigger-sdk-version": z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    "trigger-version"?: string | undefined;
    "trigger-sdk-version"?: string | undefined;
}, {
    "trigger-version"?: string | undefined;
    "trigger-sdk-version"?: string | undefined;
}>;
export declare const ExecuteJobRunMetadataSchema: z.ZodObject<{
    successSubscription: z.ZodOptional<z.ZodBoolean>;
    failedSubscription: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    successSubscription?: boolean | undefined;
    failedSubscription?: boolean | undefined;
}, {
    successSubscription?: boolean | undefined;
    failedSubscription?: boolean | undefined;
}>;
export declare const ExecuteJobHeadersSchema: z.ZodObject<{
    "trigger-version": z.ZodOptional<z.ZodString>;
    "trigger-sdk-version": z.ZodOptional<z.ZodString>;
    "x-trigger-run-metadata": z.ZodOptional<z.ZodEffects<z.ZodObject<{
        successSubscription: z.ZodOptional<z.ZodBoolean>;
        failedSubscription: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        successSubscription?: boolean | undefined;
        failedSubscription?: boolean | undefined;
    }, {
        successSubscription?: boolean | undefined;
        failedSubscription?: boolean | undefined;
    }>, {
        successSubscription?: boolean | undefined;
        failedSubscription?: boolean | undefined;
    }, unknown>>;
}, "strip", z.ZodTypeAny, {
    "trigger-version"?: string | undefined;
    "trigger-sdk-version"?: string | undefined;
    "x-trigger-run-metadata"?: {
        successSubscription?: boolean | undefined;
        failedSubscription?: boolean | undefined;
    } | undefined;
}, {
    "trigger-version"?: string | undefined;
    "trigger-sdk-version"?: string | undefined;
    "x-trigger-run-metadata"?: unknown;
}>;
export declare const RawEventSchema: z.ZodObject<{
    /** The `name` property must exactly match any subscriptions you want to
        trigger. */
    name: z.ZodString;
    /** The `payload` property will be sent to any matching Jobs and will appear
        as the `payload` param of the `run()` function. You can leave this
        parameter out if you just want to trigger a Job without any input data. */
    payload: z.ZodAny;
    /** The optional `context` property will be sent to any matching Jobs and will
        be passed through as the `context.event.context` param of the `run()`
        function. This is optional but can be useful if you want to pass through
        some additional context to the Job. */
    context: z.ZodOptional<z.ZodAny>;
    /** The `id` property uniquely identify this particular event. If unset it
        will be set automatically using `ulid`. */
    id: z.ZodDefault<z.ZodString>;
    /** This is optional, it defaults to the current timestamp. Usually you would
        only set this if you have a timestamp that you wish to pass through, e.g.
        you receive a timestamp from a service and you want the same timestamp to
        be used in your Job. */
    timestamp: z.ZodOptional<z.ZodDate>;
    /** This is optional, it defaults to "trigger.dev". It can be useful to set
        this as you can filter events using this in the `eventTrigger()`. */
    source: z.ZodOptional<z.ZodString>;
    /** This is optional, it defaults to "JSON". If your event is actually a request,
        with a url, headers, method and rawBody you can use "REQUEST" */
    payloadType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"JSON">, z.ZodLiteral<"REQUEST">]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    payload?: any;
    context?: any;
    timestamp?: Date | undefined;
    source?: string | undefined;
    payloadType?: "JSON" | "REQUEST" | undefined;
}, {
    name: string;
    payload?: any;
    context?: any;
    id?: string | undefined;
    timestamp?: Date | undefined;
    source?: string | undefined;
    payloadType?: "JSON" | "REQUEST" | undefined;
}>;
export type RawEvent = z.infer<typeof RawEventSchema>;
/** The event you wish to send to Trigger a Job */
export type SendEvent = z.input<typeof RawEventSchema>;
/** The event that was sent */
export declare const ApiEventLogSchema: z.ZodObject<{
    /** The `id` of the event that was sent.
     */
    id: z.ZodString;
    /** The `name` of the event that was sent. */
    name: z.ZodString;
    /** The `payload` of the event that was sent */
    payload: z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>;
    /** The `context` of the event that was sent. Is `undefined` if no context was
        set when sending the event. */
    context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
    /** The `timestamp` of the event that was sent */
    timestamp: z.ZodDate;
    /** The timestamp when the event will be delivered to any matching Jobs. Is
        `undefined` if `deliverAt` or `deliverAfter` wasn't set when sending the
        event. */
    deliverAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    /** The timestamp when the event was delivered. Is `undefined` if `deliverAt`
        or `deliverAfter` were set when sending the event. */
    deliveredAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    /** The timestamp when the event was cancelled. Is `undefined` if the event
     * wasn't cancelled. */
    cancelledAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
}, "strip", z.ZodTypeAny, {
    payload: ((string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | undefined)) | null;
    name: string;
    id: string;
    timestamp: Date;
    context?: import("./json.js").DeserializedJson | undefined;
    deliverAt?: Date | null | undefined;
    deliveredAt?: Date | null | undefined;
    cancelledAt?: Date | null | undefined;
}, {
    payload: ((string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | undefined)) | null;
    name: string;
    id: string;
    timestamp: Date;
    context?: import("./json.js").DeserializedJson | undefined;
    deliverAt?: Date | null | undefined;
    deliveredAt?: Date | null | undefined;
    cancelledAt?: Date | null | undefined;
}>;
export type ApiEventLog = z.infer<typeof ApiEventLogSchema>;
/** Options to control the delivery of the event */
export declare const SendEventOptionsSchema: z.ZodObject<{
    /** An optional Date when you want the event to trigger Jobs. The event will
        be sent to the platform immediately but won't be acted upon until the
        specified time. */
    deliverAt: z.ZodOptional<z.ZodDate>;
    /** An optional number of seconds you want to wait for the event to trigger
        any relevant Jobs. The event will be sent to the platform immediately but
        won't be delivered until after the elapsed number of seconds. */
    deliverAfter: z.ZodOptional<z.ZodNumber>;
    /** This optional param will be used by Trigger.dev Connect, which
        is coming soon. */
    accountId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    deliverAt?: Date | undefined;
    deliverAfter?: number | undefined;
    accountId?: string | undefined;
}, {
    deliverAt?: Date | undefined;
    deliverAfter?: number | undefined;
    accountId?: string | undefined;
}>;
export declare const SendEventBodySchema: z.ZodObject<{
    event: z.ZodObject<{
        /** The `name` property must exactly match any subscriptions you want to
            trigger. */
        name: z.ZodString;
        /** The `payload` property will be sent to any matching Jobs and will appear
            as the `payload` param of the `run()` function. You can leave this
            parameter out if you just want to trigger a Job without any input data. */
        payload: z.ZodAny;
        /** The optional `context` property will be sent to any matching Jobs and will
            be passed through as the `context.event.context` param of the `run()`
            function. This is optional but can be useful if you want to pass through
            some additional context to the Job. */
        context: z.ZodOptional<z.ZodAny>;
        /** The `id` property uniquely identify this particular event. If unset it
            will be set automatically using `ulid`. */
        id: z.ZodDefault<z.ZodString>;
        /** This is optional, it defaults to the current timestamp. Usually you would
            only set this if you have a timestamp that you wish to pass through, e.g.
            you receive a timestamp from a service and you want the same timestamp to
            be used in your Job. */
        timestamp: z.ZodOptional<z.ZodDate>;
        /** This is optional, it defaults to "trigger.dev". It can be useful to set
            this as you can filter events using this in the `eventTrigger()`. */
        source: z.ZodOptional<z.ZodString>;
        /** This is optional, it defaults to "JSON". If your event is actually a request,
            with a url, headers, method and rawBody you can use "REQUEST" */
        payloadType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"JSON">, z.ZodLiteral<"REQUEST">]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }, {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }>;
    options: z.ZodOptional<z.ZodObject<{
        /** An optional Date when you want the event to trigger Jobs. The event will
            be sent to the platform immediately but won't be acted upon until the
            specified time. */
        deliverAt: z.ZodOptional<z.ZodDate>;
        /** An optional number of seconds you want to wait for the event to trigger
            any relevant Jobs. The event will be sent to the platform immediately but
            won't be delivered until after the elapsed number of seconds. */
        deliverAfter: z.ZodOptional<z.ZodNumber>;
        /** This optional param will be used by Trigger.dev Connect, which
            is coming soon. */
        accountId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    }, {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    event: {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    };
    options?: {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    } | undefined;
}, {
    event: {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    };
    options?: {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    } | undefined;
}>;
export declare const SendBulkEventsBodySchema: z.ZodObject<{
    events: z.ZodArray<z.ZodObject<{
        /** The `name` property must exactly match any subscriptions you want to
            trigger. */
        name: z.ZodString;
        /** The `payload` property will be sent to any matching Jobs and will appear
            as the `payload` param of the `run()` function. You can leave this
            parameter out if you just want to trigger a Job without any input data. */
        payload: z.ZodAny;
        /** The optional `context` property will be sent to any matching Jobs and will
            be passed through as the `context.event.context` param of the `run()`
            function. This is optional but can be useful if you want to pass through
            some additional context to the Job. */
        context: z.ZodOptional<z.ZodAny>;
        /** The `id` property uniquely identify this particular event. If unset it
            will be set automatically using `ulid`. */
        id: z.ZodDefault<z.ZodString>;
        /** This is optional, it defaults to the current timestamp. Usually you would
            only set this if you have a timestamp that you wish to pass through, e.g.
            you receive a timestamp from a service and you want the same timestamp to
            be used in your Job. */
        timestamp: z.ZodOptional<z.ZodDate>;
        /** This is optional, it defaults to "trigger.dev". It can be useful to set
            this as you can filter events using this in the `eventTrigger()`. */
        source: z.ZodOptional<z.ZodString>;
        /** This is optional, it defaults to "JSON". If your event is actually a request,
            with a url, headers, method and rawBody you can use "REQUEST" */
        payloadType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"JSON">, z.ZodLiteral<"REQUEST">]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }, {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }>, "many">;
    options: z.ZodOptional<z.ZodObject<{
        /** An optional Date when you want the event to trigger Jobs. The event will
            be sent to the platform immediately but won't be acted upon until the
            specified time. */
        deliverAt: z.ZodOptional<z.ZodDate>;
        /** An optional number of seconds you want to wait for the event to trigger
            any relevant Jobs. The event will be sent to the platform immediately but
            won't be delivered until after the elapsed number of seconds. */
        deliverAfter: z.ZodOptional<z.ZodNumber>;
        /** This optional param will be used by Trigger.dev Connect, which
            is coming soon. */
        accountId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    }, {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    events: {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }[];
    options?: {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    } | undefined;
}, {
    events: {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }[];
    options?: {
        deliverAt?: Date | undefined;
        deliverAfter?: number | undefined;
        accountId?: string | undefined;
    } | undefined;
}>;
export type SendEventBody = z.infer<typeof SendEventBodySchema>;
export type SendEventOptions = z.infer<typeof SendEventOptionsSchema>;
export declare const DeliverEventResponseSchema: z.ZodObject<{
    deliveredAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    deliveredAt: string;
}, {
    deliveredAt: string;
}>;
export type DeliverEventResponse = z.infer<typeof DeliverEventResponseSchema>;
export declare const RuntimeEnvironmentTypeSchema: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
export type RuntimeEnvironmentType = z.infer<typeof RuntimeEnvironmentTypeSchema>;
export declare const RunSourceContextSchema: z.ZodObject<{
    id: z.ZodString;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    id: string;
    metadata?: any;
}, {
    id: string;
    metadata?: any;
}>;
export type RunSourceContext = z.infer<typeof RunSourceContextSchema>;
export declare const AutoYieldConfigSchema: z.ZodObject<{
    startTaskThreshold: z.ZodNumber;
    beforeExecuteTaskThreshold: z.ZodNumber;
    beforeCompleteTaskThreshold: z.ZodNumber;
    afterCompleteTaskThreshold: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    startTaskThreshold: number;
    beforeExecuteTaskThreshold: number;
    beforeCompleteTaskThreshold: number;
    afterCompleteTaskThreshold: number;
}, {
    startTaskThreshold: number;
    beforeExecuteTaskThreshold: number;
    beforeCompleteTaskThreshold: number;
    afterCompleteTaskThreshold: number;
}>;
export type AutoYieldConfig = z.infer<typeof AutoYieldConfigSchema>;
export declare const RunJobBodySchema: z.ZodObject<{
    event: z.ZodObject<{
        /** The `id` of the event that was sent.
         */
        id: z.ZodString;
        /** The `name` of the event that was sent. */
        name: z.ZodString;
        /** The `payload` of the event that was sent */
        payload: z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>;
        /** The `context` of the event that was sent. Is `undefined` if no context was
            set when sending the event. */
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        /** The `timestamp` of the event that was sent */
        timestamp: z.ZodDate;
        /** The timestamp when the event will be delivered to any matching Jobs. Is
            `undefined` if `deliverAt` or `deliverAfter` wasn't set when sending the
            event. */
        deliverAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        /** The timestamp when the event was delivered. Is `undefined` if `deliverAt`
            or `deliverAfter` were set when sending the event. */
        deliveredAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        /** The timestamp when the event was cancelled. Is `undefined` if the event
         * wasn't cancelled. */
        cancelledAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    }, "strip", z.ZodTypeAny, {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }, {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }>;
    job: z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        isTest: z.ZodBoolean;
        isRetry: z.ZodDefault<z.ZodBoolean>;
        startedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        startedAt: Date;
        isTest: boolean;
        isRetry: boolean;
    }, {
        id: string;
        startedAt: Date;
        isTest: boolean;
        isRetry?: boolean | undefined;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        title: string;
        slug: string;
    }, {
        id: string;
        title: string;
        slug: string;
    }>;
    project: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>>;
    account: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>>;
    source: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>>;
    tasks: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        idempotencyKey: z.ZodString;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        noop: z.ZodDefault<z.ZodBoolean>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        id: string;
        noop: boolean;
        idempotencyKey: string;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        id: string;
        idempotencyKey: string;
        noop?: boolean | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
    }>, "many">>;
    cachedTaskCursor: z.ZodOptional<z.ZodString>;
    noopTasksSet: z.ZodOptional<z.ZodString>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodEnum<["oauth2", "apiKey"]>;
        accessToken: z.ZodString;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        additionalFields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }>>>;
    yieldedExecutions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    runChunkExecutionLimit: z.ZodOptional<z.ZodNumber>;
    autoYieldConfig: z.ZodOptional<z.ZodObject<{
        startTaskThreshold: z.ZodNumber;
        beforeExecuteTaskThreshold: z.ZodNumber;
        beforeCompleteTaskThreshold: z.ZodNumber;
        afterCompleteTaskThreshold: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        startTaskThreshold: number;
        beforeExecuteTaskThreshold: number;
        beforeCompleteTaskThreshold: number;
        afterCompleteTaskThreshold: number;
    }, {
        startTaskThreshold: number;
        beforeExecuteTaskThreshold: number;
        beforeCompleteTaskThreshold: number;
        afterCompleteTaskThreshold: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    event: {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    };
    job: {
        version: string;
        id: string;
    };
    run: {
        id: string;
        startedAt: Date;
        isTest: boolean;
        isRetry: boolean;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        id: string;
        title: string;
        slug: string;
    };
    project?: {
        name: string;
        id: string;
        slug: string;
    } | undefined;
    account?: {
        id: string;
        metadata?: any;
    } | undefined;
    source?: {
        id: string;
        metadata?: any;
    } | undefined;
    tasks?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        id: string;
        noop: boolean;
        idempotencyKey: string;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
    }[] | undefined;
    cachedTaskCursor?: string | undefined;
    noopTasksSet?: string | undefined;
    connections?: Record<string, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }> | undefined;
    yieldedExecutions?: string[] | undefined;
    runChunkExecutionLimit?: number | undefined;
    autoYieldConfig?: {
        startTaskThreshold: number;
        beforeExecuteTaskThreshold: number;
        beforeCompleteTaskThreshold: number;
        afterCompleteTaskThreshold: number;
    } | undefined;
}, {
    event: {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    };
    job: {
        version: string;
        id: string;
    };
    run: {
        id: string;
        startedAt: Date;
        isTest: boolean;
        isRetry?: boolean | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        id: string;
        title: string;
        slug: string;
    };
    project?: {
        name: string;
        id: string;
        slug: string;
    } | undefined;
    account?: {
        id: string;
        metadata?: any;
    } | undefined;
    source?: {
        id: string;
        metadata?: any;
    } | undefined;
    tasks?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        id: string;
        idempotencyKey: string;
        noop?: boolean | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
    }[] | undefined;
    cachedTaskCursor?: string | undefined;
    noopTasksSet?: string | undefined;
    connections?: Record<string, {
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    }> | undefined;
    yieldedExecutions?: string[] | undefined;
    runChunkExecutionLimit?: number | undefined;
    autoYieldConfig?: {
        startTaskThreshold: number;
        beforeExecuteTaskThreshold: number;
        beforeCompleteTaskThreshold: number;
        afterCompleteTaskThreshold: number;
    } | undefined;
}>;
export type RunJobBody = z.infer<typeof RunJobBodySchema>;
export declare const RunJobErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"ERROR">;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    task: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}>;
export type RunJobError = z.infer<typeof RunJobErrorSchema>;
export declare const RunJobYieldExecutionErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"YIELD_EXECUTION">;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "YIELD_EXECUTION";
    key: string;
}, {
    status: "YIELD_EXECUTION";
    key: string;
}>;
export type RunJobYieldExecutionError = z.infer<typeof RunJobYieldExecutionErrorSchema>;
export declare const AutoYieldMetadataSchema: z.ZodObject<{
    location: z.ZodString;
    timeRemaining: z.ZodNumber;
    timeElapsed: z.ZodNumber;
    limit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}, {
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}>;
export type AutoYieldMetadata = z.infer<typeof AutoYieldMetadataSchema>;
export declare const RunJobAutoYieldExecutionErrorSchema: z.ZodObject<{
    limit: z.ZodOptional<z.ZodNumber>;
    location: z.ZodString;
    timeRemaining: z.ZodNumber;
    timeElapsed: z.ZodNumber;
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION">;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}>;
export type RunJobAutoYieldExecutionError = Prettify<z.infer<typeof RunJobAutoYieldExecutionErrorSchema>>;
export declare const RunJobAutoYieldWithCompletedTaskExecutionErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK">;
    id: z.ZodString;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    output: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        location: z.ZodString;
        timeRemaining: z.ZodNumber;
        timeElapsed: z.ZodNumber;
        limit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}>;
export type RunJobAutoYieldWithCompletedTaskExecutionError = z.infer<typeof RunJobAutoYieldWithCompletedTaskExecutionErrorSchema>;
export declare const RunJobAutoYieldRateLimitErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_RATE_LIMIT">;
    reset: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}>;
export type RunJobAutoYieldRateLimitError = z.infer<typeof RunJobAutoYieldRateLimitErrorSchema>;
export declare const RunJobInvalidPayloadErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"INVALID_PAYLOAD">;
    errors: z.ZodArray<z.ZodObject<{
        path: z.ZodArray<z.ZodString, "many">;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        path: string[];
        message: string;
    }, {
        path: string[];
        message: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}>;
export type RunJobInvalidPayloadError = z.infer<typeof RunJobInvalidPayloadErrorSchema>;
export declare const RunJobUnresolvedAuthErrorSchema: z.ZodObject<{
    status: z.ZodLiteral<"UNRESOLVED_AUTH_ERROR">;
    issues: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        error: string;
        id: string;
    }, {
        error: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}>;
export type RunJobUnresolvedAuthError = z.infer<typeof RunJobUnresolvedAuthErrorSchema>;
export declare const RunJobResumeWithTaskSchema: z.ZodObject<{
    status: z.ZodLiteral<"RESUME_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>;
export type RunJobResumeWithTask = z.infer<typeof RunJobResumeWithTaskSchema>;
export declare const RunJobRetryWithTaskSchema: z.ZodObject<{
    status: z.ZodLiteral<"RETRY_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    retryAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}>;
export type RunJobRetryWithTask = z.infer<typeof RunJobRetryWithTaskSchema>;
export declare const RunJobCanceledWithTaskSchema: z.ZodObject<{
    status: z.ZodLiteral<"CANCELED">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>;
export type RunJobCanceledWithTask = z.infer<typeof RunJobCanceledWithTaskSchema>;
export declare const RunJobSuccessSchema: z.ZodObject<{
    status: z.ZodLiteral<"SUCCESS">;
    output: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
}, "strip", z.ZodTypeAny, {
    status: "SUCCESS";
    output?: import("./json.js").DeserializedJson | undefined;
}, {
    status: "SUCCESS";
    output?: import("./json.js").DeserializedJson | undefined;
}>;
export type RunJobSuccess = z.infer<typeof RunJobSuccessSchema>;
export declare const RunJobErrorResponseSchema: z.ZodUnion<[z.ZodObject<{
    limit: z.ZodOptional<z.ZodNumber>;
    location: z.ZodString;
    timeRemaining: z.ZodNumber;
    timeElapsed: z.ZodNumber;
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION">;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK">;
    id: z.ZodString;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    output: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        location: z.ZodString;
        timeRemaining: z.ZodNumber;
        timeElapsed: z.ZodNumber;
        limit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"YIELD_EXECUTION">;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "YIELD_EXECUTION";
    key: string;
}, {
    status: "YIELD_EXECUTION";
    key: string;
}>, z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_RATE_LIMIT">;
    reset: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}>, z.ZodObject<{
    status: z.ZodLiteral<"ERROR">;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    task: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"UNRESOLVED_AUTH_ERROR">;
    issues: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        error: string;
        id: string;
    }, {
        error: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}>, z.ZodObject<{
    status: z.ZodLiteral<"INVALID_PAYLOAD">;
    errors: z.ZodArray<z.ZodObject<{
        path: z.ZodArray<z.ZodString, "many">;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        path: string[];
        message: string;
    }, {
        path: string[];
        message: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}>, z.ZodObject<{
    status: z.ZodLiteral<"RESUME_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>, z.ZodObject<{
    status: z.ZodLiteral<"RETRY_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    retryAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}>, z.ZodObject<{
    status: z.ZodLiteral<"CANCELED">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>]>;
export type RunJobErrorResponse = z.infer<typeof RunJobErrorResponseSchema>;
export declare const RunJobResumeWithParallelTaskSchema: z.ZodObject<{
    status: z.ZodLiteral<"RESUME_WITH_PARALLEL_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
    childErrors: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        limit: z.ZodOptional<z.ZodNumber>;
        location: z.ZodString;
        timeRemaining: z.ZodNumber;
        timeElapsed: z.ZodNumber;
        status: z.ZodLiteral<"AUTO_YIELD_EXECUTION">;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }, {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK">;
        id: z.ZodString;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        output: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            location: z.ZodString;
            timeRemaining: z.ZodNumber;
            timeElapsed: z.ZodNumber;
            limit: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        }, {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    }, {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"YIELD_EXECUTION">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "YIELD_EXECUTION";
        key: string;
    }, {
        status: "YIELD_EXECUTION";
        key: string;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"AUTO_YIELD_RATE_LIMIT">;
        reset: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    }, {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"ERROR">;
        error: z.ZodObject<{
            message: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }>;
        task: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    }, {
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"UNRESOLVED_AUTH_ERROR">;
        issues: z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            error: string;
            id: string;
        }, {
            error: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    }, {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"INVALID_PAYLOAD">;
        errors: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodString, "many">;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            path: string[];
            message: string;
        }, {
            path: string[];
            message: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    }, {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    }>, z.ZodObject<{
        status: z.ZodLiteral<"RESUME_WITH_TASK">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }, {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }>, z.ZodObject<{
        status: z.ZodLiteral<"RETRY_WITH_TASK">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
        error: z.ZodObject<{
            message: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }>;
        retryAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    }, {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"CANCELED">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }, {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "RESUME_WITH_PARALLEL_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    childErrors: ({
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    } | {
        status: "YIELD_EXECUTION";
        key: string;
    } | {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    } | {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    } | {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    } | {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    } | {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    } | {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    } | {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    } | {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    })[];
}, {
    status: "RESUME_WITH_PARALLEL_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    childErrors: ({
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    } | {
        status: "YIELD_EXECUTION";
        key: string;
    } | {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    } | {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    } | {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    } | {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    } | {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    } | {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    } | {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    } | {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    })[];
}>;
export type RunJobResumeWithParallelTask = z.infer<typeof RunJobResumeWithParallelTaskSchema>;
export declare const RunJobResponseSchema: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    limit: z.ZodOptional<z.ZodNumber>;
    location: z.ZodString;
    timeRemaining: z.ZodNumber;
    timeElapsed: z.ZodNumber;
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION">;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION";
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    limit?: number | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK">;
    id: z.ZodString;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    output: z.ZodOptional<z.ZodString>;
    data: z.ZodObject<{
        location: z.ZodString;
        timeRemaining: z.ZodNumber;
        timeElapsed: z.ZodNumber;
        limit: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }, {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}, {
    status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    };
    id: string;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"YIELD_EXECUTION">;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    status: "YIELD_EXECUTION";
    key: string;
}, {
    status: "YIELD_EXECUTION";
    key: string;
}>, z.ZodObject<{
    status: z.ZodLiteral<"AUTO_YIELD_RATE_LIMIT">;
    reset: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}, {
    status: "AUTO_YIELD_RATE_LIMIT";
    reset: number;
}>, z.ZodObject<{
    status: z.ZodLiteral<"ERROR">;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    task: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}, {
    status: "ERROR";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task?: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    } | undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<"UNRESOLVED_AUTH_ERROR">;
    issues: z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        error: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        error: string;
        id: string;
    }, {
        error: string;
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}, {
    status: "UNRESOLVED_AUTH_ERROR";
    issues: Record<string, {
        error: string;
        id: string;
    }>;
}>, z.ZodObject<{
    status: z.ZodLiteral<"INVALID_PAYLOAD">;
    errors: z.ZodArray<z.ZodObject<{
        path: z.ZodArray<z.ZodString, "many">;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        path: string[];
        message: string;
    }, {
        path: string[];
        message: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}, {
    status: "INVALID_PAYLOAD";
    errors: {
        path: string[];
        message: string;
    }[];
}>, z.ZodObject<{
    status: z.ZodLiteral<"RESUME_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "RESUME_WITH_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>, z.ZodObject<{
    status: z.ZodLiteral<"RESUME_WITH_PARALLEL_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
    childErrors: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        limit: z.ZodOptional<z.ZodNumber>;
        location: z.ZodString;
        timeRemaining: z.ZodNumber;
        timeElapsed: z.ZodNumber;
        status: z.ZodLiteral<"AUTO_YIELD_EXECUTION">;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }, {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK">;
        id: z.ZodString;
        properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>;
        output: z.ZodOptional<z.ZodString>;
        data: z.ZodObject<{
            location: z.ZodString;
            timeRemaining: z.ZodNumber;
            timeElapsed: z.ZodNumber;
            limit: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        }, {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    }, {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"YIELD_EXECUTION">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        status: "YIELD_EXECUTION";
        key: string;
    }, {
        status: "YIELD_EXECUTION";
        key: string;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"AUTO_YIELD_RATE_LIMIT">;
        reset: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    }, {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"ERROR">;
        error: z.ZodObject<{
            message: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }>;
        task: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    }, {
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"UNRESOLVED_AUTH_ERROR">;
        issues: z.ZodRecord<z.ZodString, z.ZodObject<{
            id: z.ZodString;
            error: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            error: string;
            id: string;
        }, {
            error: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    }, {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"INVALID_PAYLOAD">;
        errors: z.ZodArray<z.ZodObject<{
            path: z.ZodArray<z.ZodString, "many">;
            message: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            path: string[];
            message: string;
        }, {
            path: string[];
            message: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    }, {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    }>, z.ZodObject<{
        status: z.ZodLiteral<"RESUME_WITH_TASK">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }, {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }>, z.ZodObject<{
        status: z.ZodLiteral<"RETRY_WITH_TASK">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
        error: z.ZodObject<{
            message: z.ZodString;
            name: z.ZodOptional<z.ZodString>;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }, {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        }>;
        retryAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    }, {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    }>, z.ZodObject<{
        status: z.ZodLiteral<"CANCELED">;
        task: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            noop: z.ZodBoolean;
            startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                label: z.ZodString;
                text: z.ZodString;
                url: z.ZodOptional<z.ZodString>;
                imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }, {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }>, "many">>>;
            params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                style: z.ZodEnum<["normal", "minimal"]>;
                variant: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }, {
                style: "normal" | "minimal";
                variant?: string | undefined;
            }>>>;
            operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }, {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "RESUME_WITH_PARALLEL_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    childErrors: ({
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    } | {
        status: "YIELD_EXECUTION";
        key: string;
    } | {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    } | {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    } | {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    } | {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    } | {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    } | {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    } | {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    } | {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    })[];
}, {
    status: "RESUME_WITH_PARALLEL_TASK";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    childErrors: ({
        status: "ERROR";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task?: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        } | undefined;
    } | {
        status: "YIELD_EXECUTION";
        key: string;
    } | {
        status: "AUTO_YIELD_EXECUTION";
        location: string;
        timeRemaining: number;
        timeElapsed: number;
        limit?: number | undefined;
    } | {
        status: "AUTO_YIELD_EXECUTION_WITH_COMPLETED_TASK";
        data: {
            location: string;
            timeRemaining: number;
            timeElapsed: number;
            limit?: number | undefined;
        };
        id: string;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | undefined;
        output?: string | undefined;
    } | {
        status: "AUTO_YIELD_RATE_LIMIT";
        reset: number;
    } | {
        status: "INVALID_PAYLOAD";
        errors: {
            path: string[];
            message: string;
        }[];
    } | {
        status: "UNRESOLVED_AUTH_ERROR";
        issues: Record<string, {
            error: string;
            id: string;
        }>;
    } | {
        status: "RESUME_WITH_TASK";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    } | {
        status: "RETRY_WITH_TASK";
        error: {
            message: string;
            name?: string | undefined;
            stack?: string | undefined;
        };
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
        retryAt: Date;
    } | {
        status: "CANCELED";
        task: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            name: string;
            id: string;
            noop: boolean;
            icon?: string | null | undefined;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
            delayUntil?: Date | null | undefined;
            description?: string | null | undefined;
            properties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            outputProperties?: {
                label: string;
                text: string;
                url?: string | undefined;
                imageUrl?: string[] | undefined;
            }[] | null | undefined;
            params?: import("./json.js").DeserializedJson | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            context?: import("./json.js").DeserializedJson | undefined;
            error?: string | null | undefined;
            parentId?: string | null | undefined;
            style?: {
                style: "normal" | "minimal";
                variant?: string | undefined;
            } | null | undefined;
            operation?: string | null | undefined;
            callbackUrl?: string | null | undefined;
            childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        };
    })[];
}>, z.ZodObject<{
    status: z.ZodLiteral<"RETRY_WITH_TASK">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
    retryAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}, {
    status: "RETRY_WITH_TASK";
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
    retryAt: Date;
}>, z.ZodObject<{
    status: z.ZodLiteral<"CANCELED">;
    task: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}, {
    status: "CANCELED";
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        params?: import("./json.js").DeserializedJson | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        parentId?: string | null | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
    };
}>, z.ZodObject<{
    status: z.ZodLiteral<"SUCCESS">;
    output: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
}, "strip", z.ZodTypeAny, {
    status: "SUCCESS";
    output?: import("./json.js").DeserializedJson | undefined;
}, {
    status: "SUCCESS";
    output?: import("./json.js").DeserializedJson | undefined;
}>]>;
export type RunJobResponse = z.infer<typeof RunJobResponseSchema>;
export declare const PreprocessRunBodySchema: z.ZodObject<{
    event: z.ZodObject<{
        /** The `id` of the event that was sent.
         */
        id: z.ZodString;
        /** The `name` of the event that was sent. */
        name: z.ZodString;
        /** The `payload` of the event that was sent */
        payload: z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>;
        /** The `context` of the event that was sent. Is `undefined` if no context was
            set when sending the event. */
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        /** The `timestamp` of the event that was sent */
        timestamp: z.ZodDate;
        /** The timestamp when the event will be delivered to any matching Jobs. Is
            `undefined` if `deliverAt` or `deliverAfter` wasn't set when sending the
            event. */
        deliverAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        /** The timestamp when the event was delivered. Is `undefined` if `deliverAt`
            or `deliverAfter` were set when sending the event. */
        deliveredAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        /** The timestamp when the event was cancelled. Is `undefined` if the event
         * wasn't cancelled. */
        cancelledAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
    }, "strip", z.ZodTypeAny, {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }, {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }>;
    job: z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        isTest: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isTest: boolean;
    }, {
        id: string;
        isTest: boolean;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        title: string;
        slug: string;
    }, {
        id: string;
        title: string;
        slug: string;
    }>;
    account: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>>;
}, "strip", z.ZodTypeAny, {
    event: {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    };
    job: {
        version: string;
        id: string;
    };
    run: {
        id: string;
        isTest: boolean;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        id: string;
        title: string;
        slug: string;
    };
    account?: {
        id: string;
        metadata?: any;
    } | undefined;
}, {
    event: {
        payload: ((string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("./json.js").DeserializedJson;
        } | import("./json.js").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("./json.js").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    };
    job: {
        version: string;
        id: string;
    };
    run: {
        id: string;
        isTest: boolean;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        id: string;
        title: string;
        slug: string;
    };
    account?: {
        id: string;
        metadata?: any;
    } | undefined;
}>;
export type PreprocessRunBody = z.infer<typeof PreprocessRunBodySchema>;
export declare const PreprocessRunResponseSchema: z.ZodObject<{
    abort: z.ZodBoolean;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    abort: boolean;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
}, {
    abort: boolean;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
}>;
export type PreprocessRunResponse = z.infer<typeof PreprocessRunResponseSchema>;
export declare const CreateRunResponseBodySchema: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    data: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        id: string;
    };
    ok: true;
}, {
    data: {
        id: string;
    };
    ok: true;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
}, {
    error: string;
    ok: false;
}>]>;
export type CreateRunResponseBody = z.infer<typeof CreateRunResponseBodySchema>;
export declare const RedactStringSchema: z.ZodObject<{
    __redactedString: z.ZodLiteral<true>;
    strings: z.ZodArray<z.ZodString, "many">;
    interpolations: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    __redactedString: true;
    strings: string[];
    interpolations: string[];
}, {
    __redactedString: true;
    strings: string[];
    interpolations: string[];
}>;
export type RedactString = z.infer<typeof RedactStringSchema>;
export declare const LogMessageSchema: z.ZodObject<{
    level: z.ZodEnum<["DEBUG", "INFO", "WARN", "ERROR"]>;
    message: z.ZodString;
    data: z.ZodOptional<z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    level: "ERROR" | "DEBUG" | "INFO" | "WARN";
    data?: import("./json.js").SerializableJson;
}, {
    message: string;
    level: "ERROR" | "DEBUG" | "INFO" | "WARN";
    data?: import("./json.js").SerializableJson;
}>;
export type LogMessage = z.infer<typeof LogMessageSchema>;
export type ClientTask = z.infer<typeof TaskSchema>;
export type CachedTask = z.infer<typeof CachedTaskSchema>;
export declare const RedactSchema: z.ZodObject<{
    paths: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    paths: string[];
}, {
    paths: string[];
}>;
export declare const RetryOptionsSchema: z.ZodObject<{
    /** The maximum number of times to retry the request. */
    limit: z.ZodOptional<z.ZodNumber>;
    /** The exponential factor to use when calculating the next retry time. */
    factor: z.ZodOptional<z.ZodNumber>;
    /** The minimum amount of time to wait before retrying the request. */
    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** The maximum amount of time to wait before retrying the request. */
    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** Whether to randomize the retry time. */
    randomize: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    limit?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
}, {
    limit?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
}>;
export type RetryOptions = z.infer<typeof RetryOptionsSchema>;
export declare const RunTaskOptionsSchema: z.ZodObject<{
    /** The name of the Task is required. This is displayed on the Task in the logs. */
    name: z.ZodOptional<z.ZodString>;
    /** The Task will wait and only start at the specified Date  */
    delayUntil: z.ZodOptional<z.ZodDate>;
    /** Retry options */
    retry: z.ZodOptional<z.ZodObject<{
        /** The maximum number of times to retry the request. */
        limit: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time. */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum amount of time to wait before retrying the request. */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum amount of time to wait before retrying the request. */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Whether to randomize the retry time. */
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    /** The icon for the Task, it will appear in the logs.
     *  You can use the name of a company in lowercase, e.g. "github".
     *  Or any icon name that [Tabler Icons](https://tabler-icons.io/) supports. */
    icon: z.ZodOptional<z.ZodString>;
    /** The key for the Task that you want to appear in the logs */
    displayKey: z.ZodOptional<z.ZodString>;
    /** A description of the Task */
    description: z.ZodOptional<z.ZodString>;
    /** Properties that are displayed in the logs */
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    /** The input params to the Task, will be displayed in the logs  */
    params: z.ZodAny;
    /** The style of the log entry. */
    style: z.ZodOptional<z.ZodObject<{
        style: z.ZodEnum<["normal", "minimal"]>;
        variant: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }>>;
    /** Allows you to expose a `task.callbackUrl` to use in your tasks. Enabling this feature will cause the task to return the data sent to the callbackUrl instead of the usual async callback result. */
    callback: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodBoolean>;
        timeoutInSeconds: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    }, {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    }>>;
    /** Allows you to link the Integration connection in the logs. This is handled automatically in integrations.  */
    connectionKey: z.ZodOptional<z.ZodString>;
    /** An operation you want to perform on the Trigger.dev platform, current only "fetch", "fetch-response", and "fetch-poll" is supported. If you wish to `fetch` use [`io.backgroundFetch()`](https://trigger.dev/docs/sdk/io/backgroundfetch) instead. */
    operation: z.ZodOptional<z.ZodEnum<["fetch", "fetch-response", "fetch-poll"]>>;
    /** A No Operation means that the code won't be executed. This is used internally to implement features like [io.wait()](https://trigger.dev/docs/sdk/io/wait).  */
    noop: z.ZodDefault<z.ZodBoolean>;
    redact: z.ZodOptional<z.ZodObject<{
        paths: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        paths: string[];
    }, {
        paths: string[];
    }>>;
    parallel: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    noop: boolean;
    name?: string | undefined;
    delayUntil?: Date | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    icon?: string | undefined;
    displayKey?: string | undefined;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    params?: any;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    callback?: {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
}, {
    name?: string | undefined;
    delayUntil?: Date | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    icon?: string | undefined;
    displayKey?: string | undefined;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    params?: any;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    callback?: {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    noop?: boolean | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
}>;
export type RunTaskOptions = z.input<typeof RunTaskOptionsSchema>;
export type OverridableRunTaskOptions = Pick<RunTaskOptions, "retry" | "delayUntil" | "description">;
export declare const RunTaskBodyInputSchema: z.ZodObject<{
    params: z.ZodAny;
    name: z.ZodOptional<z.ZodString>;
    style: z.ZodOptional<z.ZodObject<{
        style: z.ZodEnum<["normal", "minimal"]>;
        variant: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }>>;
    icon: z.ZodOptional<z.ZodString>;
    noop: z.ZodDefault<z.ZodBoolean>;
    delayUntil: z.ZodOptional<z.ZodDate>;
    description: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    operation: z.ZodOptional<z.ZodEnum<["fetch", "fetch-response", "fetch-poll"]>>;
    displayKey: z.ZodOptional<z.ZodString>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The maximum number of times to retry the request. */
        limit: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time. */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum amount of time to wait before retrying the request. */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum amount of time to wait before retrying the request. */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Whether to randomize the retry time. */
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    callback: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodOptional<z.ZodBoolean>;
        timeoutInSeconds: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    }, {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    }>>;
    connectionKey: z.ZodOptional<z.ZodString>;
    redact: z.ZodOptional<z.ZodObject<{
        paths: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        paths: string[];
    }, {
        paths: string[];
    }>>;
    parallel: z.ZodOptional<z.ZodBoolean>;
    idempotencyKey: z.ZodString;
    parentId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    noop: boolean;
    idempotencyKey: string;
    params?: any;
    name?: string | undefined;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    icon?: string | undefined;
    delayUntil?: Date | undefined;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    displayKey?: string | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    callback?: {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
    parentId?: string | undefined;
}, {
    idempotencyKey: string;
    params?: any;
    name?: string | undefined;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    icon?: string | undefined;
    noop?: boolean | undefined;
    delayUntil?: Date | undefined;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    displayKey?: string | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    callback?: {
        enabled?: boolean | undefined;
        timeoutInSeconds?: number | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
    parentId?: string | undefined;
}>;
export type RunTaskBodyInput = z.infer<typeof RunTaskBodyInputSchema>;
export declare const RunTaskBodyOutputSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    style: z.ZodOptional<z.ZodObject<{
        style: z.ZodEnum<["normal", "minimal"]>;
        variant: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }, {
        style: "normal" | "minimal";
        variant?: string | undefined;
    }>>;
    icon: z.ZodOptional<z.ZodString>;
    noop: z.ZodDefault<z.ZodBoolean>;
    delayUntil: z.ZodOptional<z.ZodDate>;
    description: z.ZodOptional<z.ZodString>;
    parentId: z.ZodOptional<z.ZodString>;
    operation: z.ZodOptional<z.ZodEnum<["fetch", "fetch-response", "fetch-poll"]>>;
    idempotencyKey: z.ZodString;
    displayKey: z.ZodOptional<z.ZodString>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The maximum number of times to retry the request. */
        limit: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time. */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum amount of time to wait before retrying the request. */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum amount of time to wait before retrying the request. */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Whether to randomize the retry time. */
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    connectionKey: z.ZodOptional<z.ZodString>;
    redact: z.ZodOptional<z.ZodObject<{
        paths: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        paths: string[];
    }, {
        paths: string[];
    }>>;
    parallel: z.ZodOptional<z.ZodBoolean>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodOptional<z.ZodString>;
        text: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        imageUrl: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        label?: string | undefined;
        text?: string | undefined;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label?: string | undefined;
        text?: string | undefined;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
    callback: z.ZodOptional<z.ZodObject<{
        enabled: z.ZodBoolean;
        timeoutInSeconds: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        enabled: boolean;
        timeoutInSeconds: number;
    }, {
        enabled: boolean;
        timeoutInSeconds?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    noop: boolean;
    idempotencyKey: string;
    name?: string | undefined;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    icon?: string | undefined;
    delayUntil?: Date | undefined;
    description?: string | undefined;
    parentId?: string | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    displayKey?: string | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
    properties?: {
        label?: string | undefined;
        text?: string | undefined;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    params?: import("./json.js").DeserializedJson | undefined;
    callback?: {
        enabled: boolean;
        timeoutInSeconds: number;
    } | undefined;
}, {
    idempotencyKey: string;
    name?: string | undefined;
    style?: {
        style: "normal" | "minimal";
        variant?: string | undefined;
    } | undefined;
    icon?: string | undefined;
    noop?: boolean | undefined;
    delayUntil?: Date | undefined;
    description?: string | undefined;
    parentId?: string | undefined;
    operation?: "fetch" | "fetch-response" | "fetch-poll" | undefined;
    displayKey?: string | undefined;
    retry?: {
        limit?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    connectionKey?: string | undefined;
    redact?: {
        paths: string[];
    } | undefined;
    parallel?: boolean | undefined;
    properties?: {
        label?: string | undefined;
        text?: string | undefined;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    params?: import("./json.js").DeserializedJson | undefined;
    callback?: {
        enabled: boolean;
        timeoutInSeconds?: number | undefined;
    } | undefined;
}>;
export type RunTaskBodyOutput = z.infer<typeof RunTaskBodyOutputSchema>;
export declare const RunTaskResponseWithCachedTasksBodySchema: z.ZodObject<{
    task: z.ZodObject<{
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        name: z.ZodString;
        id: z.ZodString;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        idempotencyKey: z.ZodString;
        attempts: z.ZodNumber;
        forceYield: z.ZodNullable<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }>;
    cachedTasks: z.ZodOptional<z.ZodObject<{
        tasks: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            idempotencyKey: z.ZodString;
            status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
            noop: z.ZodDefault<z.ZodBoolean>;
            output: z.ZodNullable<z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>>;
            parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            noop: boolean;
            idempotencyKey: string;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }, {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            idempotencyKey: string;
            noop?: boolean | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }>, "many">;
        cursor: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        tasks: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            noop: boolean;
            idempotencyKey: string;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }[];
        cursor?: string | undefined;
    }, {
        tasks: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            idempotencyKey: string;
            noop?: boolean | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }[];
        cursor?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    };
    cachedTasks?: {
        tasks: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            noop: boolean;
            idempotencyKey: string;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }[];
        cursor?: string | undefined;
    } | undefined;
}, {
    task: {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("./json.js").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("./json.js").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("./json.js").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    };
    cachedTasks?: {
        tasks: {
            status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
            id: string;
            idempotencyKey: string;
            noop?: boolean | undefined;
            output?: import("./json.js").DeserializedJson | undefined;
            parentId?: string | null | undefined;
        }[];
        cursor?: string | undefined;
    } | undefined;
}>;
export type RunTaskResponseWithCachedTasksBody = z.infer<typeof RunTaskResponseWithCachedTasksBodySchema>;
export declare const CompleteTaskBodyInputSchema: z.ZodObject<{
    params: z.ZodAny;
    description: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    output: z.ZodEffects<z.ZodOptional<z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>, string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | null, import("./json.js").SerializableJson>;
}, "strip", z.ZodTypeAny, {
    output: ((string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[]) & (string | number | boolean | {
        [key: string]: import("./json.js").DeserializedJson;
    } | import("./json.js").DeserializedJson[] | undefined)) | null;
    params?: any;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
}, {
    params?: any;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: import("./json.js").SerializableJson;
}>;
export type CompleteTaskBodyInput = Prettify<z.input<typeof CompleteTaskBodyInputSchema>>;
export type CompleteTaskBodyOutput = z.infer<typeof CompleteTaskBodyInputSchema>;
export declare const CompleteTaskBodyV2InputSchema: z.ZodObject<{
    params: z.ZodAny;
    description: z.ZodOptional<z.ZodString>;
    properties: z.ZodOptional<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        text: z.ZodString;
        url: z.ZodOptional<z.ZodString>;
        imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }, {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }>, "many">>;
    output: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    params?: any;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}, {
    params?: any;
    description?: string | undefined;
    properties?: {
        label: string;
        text: string;
        url?: string | undefined;
        imageUrl?: string[] | undefined;
    }[] | undefined;
    output?: string | undefined;
}>;
export type CompleteTaskBodyV2Input = Prettify<z.input<typeof CompleteTaskBodyV2InputSchema>>;
export declare const FailTaskBodyInputSchema: z.ZodObject<{
    error: z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
}, {
    error: {
        message: string;
        name?: string | undefined;
        stack?: string | undefined;
    };
}>;
export type FailTaskBodyInput = z.infer<typeof FailTaskBodyInputSchema>;
export declare const NormalizedRequestSchema: z.ZodObject<{
    headers: z.ZodRecord<z.ZodString, z.ZodString>;
    method: z.ZodString;
    query: z.ZodRecord<z.ZodString, z.ZodString>;
    url: z.ZodString;
    body: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    url: string;
    method: string;
    headers: Record<string, string>;
    query: Record<string, string>;
    body?: any;
}, {
    url: string;
    method: string;
    headers: Record<string, string>;
    query: Record<string, string>;
    body?: any;
}>;
export type NormalizedRequest = z.infer<typeof NormalizedRequestSchema>;
export declare const NormalizedResponseSchema: z.ZodObject<{
    status: z.ZodNumber;
    body: z.ZodAny;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status: number;
    body?: any;
    headers?: Record<string, string> | undefined;
}, {
    status: number;
    body?: any;
    headers?: Record<string, string> | undefined;
}>;
export type NormalizedResponse = z.infer<typeof NormalizedResponseSchema>;
export declare const HttpSourceResponseSchema: z.ZodObject<{
    response: z.ZodObject<{
        status: z.ZodNumber;
        body: z.ZodAny;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    }, {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    }>;
    events: z.ZodArray<z.ZodObject<{
        /** The `name` property must exactly match any subscriptions you want to
            trigger. */
        name: z.ZodString;
        /** The `payload` property will be sent to any matching Jobs and will appear
            as the `payload` param of the `run()` function. You can leave this
            parameter out if you just want to trigger a Job without any input data. */
        payload: z.ZodAny;
        /** The optional `context` property will be sent to any matching Jobs and will
            be passed through as the `context.event.context` param of the `run()`
            function. This is optional but can be useful if you want to pass through
            some additional context to the Job. */
        context: z.ZodOptional<z.ZodAny>;
        /** The `id` property uniquely identify this particular event. If unset it
            will be set automatically using `ulid`. */
        id: z.ZodDefault<z.ZodString>;
        /** This is optional, it defaults to the current timestamp. Usually you would
            only set this if you have a timestamp that you wish to pass through, e.g.
            you receive a timestamp from a service and you want the same timestamp to
            be used in your Job. */
        timestamp: z.ZodOptional<z.ZodDate>;
        /** This is optional, it defaults to "trigger.dev". It can be useful to set
            this as you can filter events using this in the `eventTrigger()`. */
        source: z.ZodOptional<z.ZodString>;
        /** This is optional, it defaults to "JSON". If your event is actually a request,
            with a url, headers, method and rawBody you can use "REQUEST" */
        payloadType: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"JSON">, z.ZodLiteral<"REQUEST">]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }, {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }>, "many">;
    metadata: z.ZodOptional<z.ZodType<import("./json.js").DeserializedJson, z.ZodTypeDef, import("./json.js").DeserializedJson>>;
}, "strip", z.ZodTypeAny, {
    events: {
        name: string;
        id: string;
        payload?: any;
        context?: any;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }[];
    response: {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    };
    metadata?: import("./json.js").DeserializedJson | undefined;
}, {
    events: {
        name: string;
        payload?: any;
        context?: any;
        id?: string | undefined;
        timestamp?: Date | undefined;
        source?: string | undefined;
        payloadType?: "JSON" | "REQUEST" | undefined;
    }[];
    response: {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    };
    metadata?: import("./json.js").DeserializedJson | undefined;
}>;
export declare const WebhookDeliveryResponseSchema: z.ZodObject<{
    response: z.ZodObject<{
        status: z.ZodNumber;
        body: z.ZodAny;
        headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    }, {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    }>;
    verified: z.ZodBoolean;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    response: {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    };
    verified: boolean;
    error?: string | undefined;
}, {
    response: {
        status: number;
        body?: any;
        headers?: Record<string, string> | undefined;
    };
    verified: boolean;
    error?: string | undefined;
}>;
export type WebhookDeliveryResponse = z.infer<typeof WebhookDeliveryResponseSchema>;
export declare const RegisterTriggerBodySchemaV1: z.ZodObject<{
    rule: z.ZodObject<{
        event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        source: z.ZodString;
        payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    }, "strip", z.ZodTypeAny, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }>;
    source: z.ZodObject<{
        version: z.ZodLiteral<"1">;
        channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
        integration: z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        key: z.ZodString;
        params: z.ZodAny;
        events: z.ZodArray<z.ZodString, "many">;
        registerSourceJob: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    source: {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    };
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
}, {
    source: {
        version: "1";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        events: string[];
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    };
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
}>;
export type RegisterTriggerBodyV1 = z.infer<typeof RegisterTriggerBodySchemaV1>;
export declare const RegisterTriggerBodySchemaV2: z.ZodObject<{
    rule: z.ZodObject<{
        event: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
        source: z.ZodString;
        payload: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
        context: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    }, "strip", z.ZodTypeAny, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }, {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    }>;
    source: z.ZodObject<{
        version: z.ZodLiteral<"2">;
        channel: z.ZodEnum<["HTTP", "SQS", "SMTP"]>;
        integration: z.ZodObject<{
            id: z.ZodString;
            metadata: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                instructions: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }, {
                name: string;
                id: string;
                instructions?: string | undefined;
            }>;
            authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }, {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        }>;
        key: z.ZodString;
        params: z.ZodAny;
        options: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
        registerSourceJob: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
        }, {
            version: string;
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }, {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    }>;
    accountId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    source: {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    };
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    accountId?: string | undefined;
}, {
    source: {
        options: Record<string, string[]>;
        version: "2";
        key: string;
        channel: "HTTP" | "SMTP" | "SQS";
        integration: {
            id: string;
            metadata: {
                name: string;
                id: string;
                instructions?: string | undefined;
            };
            authSource: "HOSTED" | "LOCAL" | "RESOLVER";
        };
        params?: any;
        registerSourceJob?: {
            version: string;
            id: string;
        } | undefined;
    };
    rule: {
        event: (string | string[]) & (string | string[] | undefined);
        source: string;
        payload?: import("./eventFilter.js").EventFilter | undefined;
        context?: import("./eventFilter.js").EventFilter | undefined;
    };
    accountId?: string | undefined;
}>;
export type RegisterTriggerBodyV2 = z.infer<typeof RegisterTriggerBodySchemaV2>;
export declare const InitializeTriggerBodySchema: z.ZodObject<{
    id: z.ZodString;
    params: z.ZodAny;
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    id: string;
    params?: any;
    accountId?: string | undefined;
    metadata?: any;
}, {
    id: string;
    params?: any;
    accountId?: string | undefined;
    metadata?: any;
}>;
export type InitializeTriggerBody = z.infer<typeof InitializeTriggerBodySchema>;
export declare const RegisterIntervalScheduleBodySchema: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodLiteral<"interval">;
    options: z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>;
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        seconds: number;
    };
    type: "interval";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        seconds: number;
    };
    type: "interval";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}>;
export type RegisterIntervalScheduleBody = z.infer<typeof RegisterIntervalScheduleBodySchema>;
export declare const InitializeCronScheduleBodySchema: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodLiteral<"cron">;
    options: z.ZodObject<{
        cron: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
    }, {
        cron: string;
    }>;
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        cron: string;
    };
    type: "cron";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        cron: string;
    };
    type: "cron";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}>;
export type RegisterCronScheduleBody = z.infer<typeof InitializeCronScheduleBodySchema>;
export declare const RegisterScheduleBodySchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    type: z.ZodLiteral<"interval">;
    options: z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>;
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        seconds: number;
    };
    type: "interval";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        seconds: number;
    };
    type: "interval";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}>, z.ZodObject<{
    id: z.ZodString;
    type: z.ZodLiteral<"cron">;
    options: z.ZodObject<{
        cron: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
    }, {
        cron: string;
    }>;
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        cron: string;
    };
    type: "cron";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        cron: string;
    };
    type: "cron";
    id: string;
    accountId?: string | undefined;
    metadata?: any;
}>]>;
export type RegisterScheduleBody = z.infer<typeof RegisterScheduleBodySchema>;
export declare const RegisterScheduleResponseBodySchema: z.ZodObject<{
    id: z.ZodString;
    schedule: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"interval">;
        options: z.ZodObject<{
            seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            seconds: number;
        }, {
            seconds: number;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"cron">;
        options: z.ZodObject<{
            cron: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            cron: string;
        }, {
            cron: string;
        }>;
        accountId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }, {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    }>]>;
    metadata: z.ZodAny;
    active: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    id: string;
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
    active: boolean;
    metadata?: any;
}, {
    id: string;
    schedule: {
        options: {
            cron: string;
        };
        type: "cron";
        accountId?: string | undefined;
        metadata?: any;
    } | {
        options: {
            seconds: number;
        };
        type: "interval";
        accountId?: string | undefined;
        metadata?: any;
    };
    active: boolean;
    metadata?: any;
}>;
export type RegisterScheduleResponseBody = z.infer<typeof RegisterScheduleResponseBodySchema>;
export declare const CreateExternalConnectionBodySchema: z.ZodObject<{
    accessToken: z.ZodString;
    type: z.ZodEnum<["oauth2"]>;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    type: "oauth2";
    accessToken: string;
    scopes?: string[] | undefined;
    metadata?: any;
}, {
    type: "oauth2";
    accessToken: string;
    scopes?: string[] | undefined;
    metadata?: any;
}>;
export type CreateExternalConnectionBody = z.infer<typeof CreateExternalConnectionBodySchema>;
export declare const GetRunStatusesSchema: z.ZodObject<{
    run: z.ZodObject<{
        id: z.ZodString;
        status: z.ZodUnion<[z.ZodLiteral<"PENDING">, z.ZodLiteral<"QUEUED">, z.ZodLiteral<"WAITING_ON_CONNECTIONS">, z.ZodLiteral<"PREPROCESSING">, z.ZodLiteral<"STARTED">, z.ZodLiteral<"SUCCESS">, z.ZodLiteral<"FAILURE">, z.ZodLiteral<"TIMED_OUT">, z.ZodLiteral<"ABORTED">, z.ZodLiteral<"CANCELED">, z.ZodLiteral<"UNRESOLVED_AUTH">, z.ZodLiteral<"INVALID_PAYLOAD">, z.ZodLiteral<"EXECUTING">, z.ZodLiteral<"WAITING_TO_CONTINUE">, z.ZodLiteral<"WAITING_TO_EXECUTE">]>;
        output: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        output?: any;
    }, {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        output?: any;
    }>;
    statuses: z.ZodArray<z.ZodObject<{
        data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
        label: z.ZodString;
        state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
        key: z.ZodString;
        history: z.ZodArray<z.ZodObject<{
            label: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
            data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
        }, "strip", z.ZodTypeAny, {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }, {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        label: string;
        key: string;
        history: {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }[];
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
        state?: "loading" | "success" | "failure" | undefined;
    }, {
        label: string;
        key: string;
        history: {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }[];
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
        state?: "loading" | "success" | "failure" | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    statuses: {
        label: string;
        key: string;
        history: {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }[];
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
        state?: "loading" | "success" | "failure" | undefined;
    }[];
    run: {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        output?: any;
    };
}, {
    statuses: {
        label: string;
        key: string;
        history: {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("./json.js").SerializableJson> | undefined;
        }[];
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
        state?: "loading" | "success" | "failure" | undefined;
    }[];
    run: {
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        output?: any;
    };
}>;
export type GetRunStatuses = z.infer<typeof GetRunStatusesSchema>;
export declare const InvokeJobResponseSchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export declare const InvokeJobRequestBodySchema: z.ZodObject<{
    payload: z.ZodAny;
    context: z.ZodOptional<z.ZodAny>;
    options: z.ZodOptional<z.ZodObject<{
        accountId: z.ZodOptional<z.ZodString>;
        callbackUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        accountId?: string | undefined;
        callbackUrl?: string | undefined;
    }, {
        accountId?: string | undefined;
        callbackUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    payload?: any;
    context?: any;
    options?: {
        accountId?: string | undefined;
        callbackUrl?: string | undefined;
    } | undefined;
}, {
    payload?: any;
    context?: any;
    options?: {
        accountId?: string | undefined;
        callbackUrl?: string | undefined;
    } | undefined;
}>;
export type InvokeJobRequestBody = z.infer<typeof InvokeJobRequestBodySchema>;
export declare const InvokeOptionsSchema: z.ZodObject<{
    accountId: z.ZodOptional<z.ZodString>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    context: z.ZodOptional<z.ZodAny>;
    callbackUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    accountId?: string | undefined;
    idempotencyKey?: string | undefined;
    context?: any;
    callbackUrl?: string | undefined;
}, {
    accountId?: string | undefined;
    idempotencyKey?: string | undefined;
    context?: any;
    callbackUrl?: string | undefined;
}>;
export type InvokeOptions = z.infer<typeof InvokeOptionsSchema>;
export declare const EphemeralEventDispatcherRequestBodySchema: z.ZodObject<{
    url: z.ZodString;
    name: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    source: z.ZodOptional<z.ZodString>;
    filter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    contextFilter: z.ZodOptional<z.ZodType<import("./eventFilter.js").EventFilter, z.ZodTypeDef, import("./eventFilter.js").EventFilter>>;
    accountId: z.ZodOptional<z.ZodString>;
    timeoutInSeconds: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    name: (string | string[]) & (string | string[] | undefined);
    url: string;
    timeoutInSeconds: number;
    source?: string | undefined;
    filter?: import("./eventFilter.js").EventFilter | undefined;
    contextFilter?: import("./eventFilter.js").EventFilter | undefined;
    accountId?: string | undefined;
}, {
    name: (string | string[]) & (string | string[] | undefined);
    url: string;
    source?: string | undefined;
    filter?: import("./eventFilter.js").EventFilter | undefined;
    contextFilter?: import("./eventFilter.js").EventFilter | undefined;
    accountId?: string | undefined;
    timeoutInSeconds?: number | undefined;
}>;
export type EphemeralEventDispatcherRequestBody = z.infer<typeof EphemeralEventDispatcherRequestBodySchema>;
export declare const EphemeralEventDispatcherResponseBodySchema: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type EphemeralEventDispatcherResponseBody = z.infer<typeof EphemeralEventDispatcherResponseBodySchema>;
export declare const KeyValueStoreResponseBodySchema: z.ZodDiscriminatedUnion<"action", [z.ZodObject<{
    action: z.ZodLiteral<"DELETE">;
    key: z.ZodString;
    deleted: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    key: string;
    action: "DELETE";
    deleted: boolean;
}, {
    key: string;
    action: "DELETE";
    deleted: boolean;
}>, z.ZodObject<{
    action: z.ZodLiteral<"GET">;
    key: z.ZodString;
    value: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    key: string;
    action: "GET";
    value?: string | undefined;
}, {
    key: string;
    action: "GET";
    value?: string | undefined;
}>, z.ZodObject<{
    action: z.ZodLiteral<"HAS">;
    key: z.ZodString;
    has: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    key: string;
    action: "HAS";
    has: boolean;
}, {
    key: string;
    action: "HAS";
    has: boolean;
}>, z.ZodObject<{
    action: z.ZodLiteral<"SET">;
    key: z.ZodString;
    value: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    key: string;
    action: "SET";
    value?: string | undefined;
}, {
    key: string;
    action: "SET";
    value?: string | undefined;
}>]>;
export type KeyValueStoreResponseBody = z.infer<typeof KeyValueStoreResponseBodySchema>;
export {};
