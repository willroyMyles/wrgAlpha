import { z } from "zod";
export declare const SCHEDULED_EVENT = "dev.trigger.scheduled";
export declare const ScheduledPayloadSchema: z.ZodObject<{
    ts: z.ZodDate;
    lastTimestamp: z.ZodOptional<z.ZodDate>;
}, "strip", z.ZodTypeAny, {
    ts: Date;
    lastTimestamp?: Date | undefined;
}, {
    ts: Date;
    lastTimestamp?: Date | undefined;
}>;
export type ScheduledPayload = z.infer<typeof ScheduledPayloadSchema>;
export declare const IntervalOptionsSchema: z.ZodObject<{
    /** The number of seconds for the interval. Min = 20, Max = 2_592_000 (30 days) */
    seconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    seconds: number;
}, {
    seconds: number;
}>;
/** Interval options */
export type IntervalOptions = z.infer<typeof IntervalOptionsSchema>;
export declare const CronOptionsSchema: z.ZodObject<{
    /** A CRON expression that defines the schedule. A useful tool when writing CRON
      expressions is [crontab guru](https://crontab.guru). Note that the timezone
      used is UTC. */
    cron: z.ZodString;
}, "strip", z.ZodTypeAny, {
    cron: string;
}, {
    cron: string;
}>;
/** The options for a `cronTrigger()` */
export type CronOptions = z.infer<typeof CronOptionsSchema>;
export declare const CronMetadataSchema: z.ZodObject<{
    type: z.ZodLiteral<"cron">;
    options: z.ZodObject<{
        /** A CRON expression that defines the schedule. A useful tool when writing CRON
          expressions is [crontab guru](https://crontab.guru). Note that the timezone
          used is UTC. */
        cron: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
    }, {
        cron: string;
    }>;
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        cron: string;
    };
    type: "cron";
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        cron: string;
    };
    type: "cron";
    accountId?: string | undefined;
    metadata?: any;
}>;
export type CronMetadata = z.infer<typeof CronMetadataSchema>;
export declare const IntervalMetadataSchema: z.ZodObject<{
    /** An interval reoccurs at the specified number of seconds  */
    type: z.ZodLiteral<"interval">;
    /** An object containing options about the interval. */
    options: z.ZodObject<{
        /** The number of seconds for the interval. Min = 20, Max = 2_592_000 (30 days) */
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>;
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: z.ZodOptional<z.ZodString>;
    /** Any additional metadata about the schedule. */
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        seconds: number;
    };
    type: "interval";
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        seconds: number;
    };
    type: "interval";
    accountId?: string | undefined;
    metadata?: any;
}>;
export type IntervalMetadata = z.infer<typeof IntervalMetadataSchema>;
export declare const ScheduleMetadataSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    /** An interval reoccurs at the specified number of seconds  */
    type: z.ZodLiteral<"interval">;
    /** An object containing options about the interval. */
    options: z.ZodObject<{
        /** The number of seconds for the interval. Min = 20, Max = 2_592_000 (30 days) */
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>;
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: z.ZodOptional<z.ZodString>;
    /** Any additional metadata about the schedule. */
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        seconds: number;
    };
    type: "interval";
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        seconds: number;
    };
    type: "interval";
    accountId?: string | undefined;
    metadata?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"cron">;
    options: z.ZodObject<{
        /** A CRON expression that defines the schedule. A useful tool when writing CRON
          expressions is [crontab guru](https://crontab.guru). Note that the timezone
          used is UTC. */
        cron: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
    }, {
        cron: string;
    }>;
    /** An optional Account ID to associate with runs triggered by this interval */
    accountId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    options: {
        cron: string;
    };
    type: "cron";
    accountId?: string | undefined;
    metadata?: any;
}, {
    options: {
        cron: string;
    };
    type: "cron";
    accountId?: string | undefined;
    metadata?: any;
}>]>;
export type ScheduleMetadata = z.infer<typeof ScheduleMetadataSchema>;
export declare const RegisterDynamicSchedulePayloadSchema: z.ZodObject<{
    id: z.ZodString;
    jobs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
    }, {
        version: string;
        id: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    jobs: {
        version: string;
        id: string;
    }[];
}, {
    id: string;
    jobs: {
        version: string;
        id: string;
    }[];
}>;
export type RegisterDynamicSchedulePayload = z.infer<typeof RegisterDynamicSchedulePayloadSchema>;
