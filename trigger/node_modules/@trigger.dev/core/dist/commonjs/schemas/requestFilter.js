"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseFilterSchema = exports.RequestFilterSchema = exports.HTTPMethodUnionSchema = void 0;
const zod_1 = require("zod");
const eventFilter_js_1 = require("./eventFilter.js");
const StringMatchSchema = zod_1.z.union([
    /** Match against a string */
    zod_1.z.array(zod_1.z.string()),
    zod_1.z.array(zod_1.z.union(eventFilter_js_1.stringPatternMatchers)),
]);
exports.HTTPMethodUnionSchema = zod_1.z.union([
    zod_1.z.literal("GET"),
    zod_1.z.literal("POST"),
    zod_1.z.literal("PUT"),
    zod_1.z.literal("PATCH"),
    zod_1.z.literal("DELETE"),
    zod_1.z.literal("HEAD"),
    zod_1.z.literal("OPTIONS"),
]);
/** Only Requests that match this filter will cause the `handler` function to run.
 * For example, you can use this to only respond to `GET` Requests. */
exports.RequestFilterSchema = zod_1.z.object({
    /** An array of HTTP methods to match.
     * For example, `["GET", "POST"]` will match both `GET` and `POST` Requests. */
    method: zod_1.z.array(exports.HTTPMethodUnionSchema).optional(),
    /** An object of header key/values to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
      @example
    ```ts
    filter: {
      header: {
        "content-type": ["application/json"],
      },
    },
    ``` */
    headers: zod_1.z.record(StringMatchSchema).optional(),
    /** An object of query parameters to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
  
    @example
    ```ts
    filter: {
      query: {
        "hub.mode": [{ $startsWith: "sub" }],
      },
    },
    ``` */
    query: zod_1.z.record(StringMatchSchema).optional(),
    /** An object of key/values to match.
     * This uses the [EventFilter matching syntax](https://trigger.dev/docs/documentation/guides/event-filter).
     */
    body: eventFilter_js_1.EventFilterSchema.optional(),
});
/** Only Requests that match this filter will cause the `handler` function to run.
 * For example, you can use this to only respond to `GET` Requests. */
exports.ResponseFilterSchema = exports.RequestFilterSchema.omit({ method: true, query: true }).extend({
    status: zod_1.z.array(zod_1.z.number()).optional(),
});
//# sourceMappingURL=requestFilter.js.map