"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetRunsSchema = exports.GetRunSchema = exports.RunTaskSchema = exports.RunStatusSchema = void 0;
const zod_1 = require("zod");
const statuses_js_1 = require("./statuses.js");
const tasks_js_1 = require("./tasks.js");
exports.RunStatusSchema = zod_1.z.union([
    zod_1.z.literal("PENDING"),
    zod_1.z.literal("QUEUED"),
    zod_1.z.literal("WAITING_ON_CONNECTIONS"),
    zod_1.z.literal("PREPROCESSING"),
    zod_1.z.literal("STARTED"),
    zod_1.z.literal("SUCCESS"),
    zod_1.z.literal("FAILURE"),
    zod_1.z.literal("TIMED_OUT"),
    zod_1.z.literal("ABORTED"),
    zod_1.z.literal("CANCELED"),
    zod_1.z.literal("UNRESOLVED_AUTH"),
    zod_1.z.literal("INVALID_PAYLOAD"),
    zod_1.z.literal("EXECUTING"),
    zod_1.z.literal("WAITING_TO_CONTINUE"),
    zod_1.z.literal("WAITING_TO_EXECUTE"),
]);
exports.RunTaskSchema = zod_1.z.object({
    /** The Task id */
    id: zod_1.z.string(),
    /** The key that you defined when creating the Task, the first param in any task. */
    displayKey: zod_1.z.string().nullable(),
    /** The Task status */
    status: tasks_js_1.TaskStatusSchema,
    /** The name of the Task */
    name: zod_1.z.string(),
    /** The icon of the Task, a string.
     * For integrations, this will be a lowercase name of the company.
     * Can be used with the [@trigger.dev/companyicons](https://www.npmjs.com/package/@trigger.dev/companyicons) package to display an svg. */
    icon: zod_1.z.string().nullable(),
    /** When the task started */
    startedAt: zod_1.z.coerce.date().nullable(),
    /** When the task completed */
    completedAt: zod_1.z.coerce.date().nullable(),
});
const RunTaskWithSubtasksSchema = exports.RunTaskSchema.extend({
    subtasks: zod_1.z.lazy(() => RunTaskWithSubtasksSchema.array()).optional(),
});
const GetRunOptionsSchema = zod_1.z.object({
    /** Return subtasks, which appear in a `subtasks` array on a task. @default false */
    subtasks: zod_1.z.boolean().optional(),
    /** You can use this to get more tasks, if there are more than are returned in a single batch @default undefined */
    cursor: zod_1.z.string().optional(),
    /** How many tasks you want to return in one go, max 50. @default 20 */
    take: zod_1.z.number().optional(),
});
const GetRunOptionsWithTaskDetailsSchema = GetRunOptionsSchema.extend({
    /** If `true`, it returns the `params` and `output` of all tasks. @default false */
    taskdetails: zod_1.z.boolean().optional(),
});
const RunSchema = zod_1.z.object({
    /** The Run id */
    id: zod_1.z.string(),
    /** The Run status */
    status: exports.RunStatusSchema,
    /** When the run started */
    startedAt: zod_1.z.coerce.date().nullable(),
    /** When the run was last updated */
    updatedAt: zod_1.z.coerce.date().nullable(),
    /** When the run was completed */
    completedAt: zod_1.z.coerce.date().nullable(),
});
exports.GetRunSchema = RunSchema.extend({
    /** The output of the run */
    output: zod_1.z.any().optional(),
    /** The tasks from the run */
    tasks: zod_1.z.array(RunTaskWithSubtasksSchema),
    /** Any status updates that were published from the run */
    statuses: zod_1.z.array(statuses_js_1.JobRunStatusRecordSchema).default([]),
    /** If there are more tasks, you can use this to get them */
    nextCursor: zod_1.z.string().optional(),
});
const GetRunsOptionsSchema = zod_1.z.object({
    /** You can use this to get more tasks, if there are more than are returned in a single batch @default undefined */
    cursor: zod_1.z.string().optional(),
    /** How many runs you want to return in one go, max 50. @default 20 */
    take: zod_1.z.number().optional(),
});
exports.GetRunsSchema = zod_1.z.object({
    /** The runs from the query */
    runs: RunSchema.array(),
    /** If there are more runs, you can use this to get them */
    nextCursor: zod_1.z.string().optional(),
});
//# sourceMappingURL=runs.js.map