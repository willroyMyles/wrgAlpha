import { z } from "zod";
/** A property that is displayed in the logs */
export declare const DisplayPropertySchema: z.ZodObject<{
    /** The label for the property */
    label: z.ZodString;
    /** The value of the property */
    text: z.ZodString;
    /** The URL to link to when the property is clicked */
    url: z.ZodOptional<z.ZodString>;
    /** The URL to a list of images to display next to the property */
    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    label: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string[] | undefined;
}, {
    label: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string[] | undefined;
}>;
export declare const DisplayPropertiesSchema: z.ZodArray<z.ZodObject<{
    /** The label for the property */
    label: z.ZodString;
    /** The value of the property */
    text: z.ZodString;
    /** The URL to link to when the property is clicked */
    url: z.ZodOptional<z.ZodString>;
    /** The URL to a list of images to display next to the property */
    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    label: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string[] | undefined;
}, {
    label: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string[] | undefined;
}>, "many">;
export type DisplayProperty = z.infer<typeof DisplayPropertySchema>;
export declare const StyleSchema: z.ZodObject<{
    /** The style, `normal` or `minimal` */
    style: z.ZodEnum<["normal", "minimal"]>;
    /** A variant of the style. */
    variant: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    style: "normal" | "minimal";
    variant?: string | undefined;
}, {
    style: "normal" | "minimal";
    variant?: string | undefined;
}>;
export type Style = z.infer<typeof StyleSchema>;
export type StyleName = Style["style"];
