"use strict";
// Create a logger class that uses the debug package internally
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
/**
 * Represents different log levels.
 * - `"log"`: Only essential messages.
 * - `"error"`: Errors and essential messages.
 * - `"warn"`: Warnings, Errors and essential messages.
 * - `"info"`: Info, Warnings, Errors and essential messages.
 * - `"debug"`: Everything.
 */
const node_process_1 = require("node:process");
const node_buffer_1 = require("node:buffer");
const api_1 = require("@opentelemetry/api");
const logLevels = ["log", "error", "warn", "info", "debug"];
class Logger {
    #name;
    #level;
    #filteredKeys = [];
    #jsonReplacer;
    #additionalFields;
    constructor(name, level = "info", filteredKeys = [], jsonReplacer, additionalFields) {
        this.#name = name;
        this.#level = logLevels.indexOf((node_process_1.env.TRIGGER_LOG_LEVEL ?? level));
        this.#filteredKeys = filteredKeys;
        this.#jsonReplacer = createReplacer(jsonReplacer);
        this.#additionalFields = additionalFields ?? (() => ({}));
    }
    child(fields) {
        return new Logger(this.#name, logLevels[this.#level], this.#filteredKeys, this.#jsonReplacer, () => ({ ...this.#additionalFields(), ...fields }));
    }
    // Return a new Logger instance with the same name and a new log level
    // but filter out the keys from the log messages (at any level)
    filter(...keys) {
        return new Logger(this.#name, logLevels[this.#level], keys, this.#jsonReplacer);
    }
    static satisfiesLogLevel(logLevel, setLevel) {
        return logLevels.indexOf(logLevel) <= logLevels.indexOf(setLevel);
    }
    log(message, ...args) {
        if (this.#level < 0)
            return;
        this.#structuredLog(console.log, message, "log", ...args);
    }
    error(message, ...args) {
        if (this.#level < 1)
            return;
        this.#structuredLog(console.error, message, "error", ...args);
    }
    warn(message, ...args) {
        if (this.#level < 2)
            return;
        this.#structuredLog(console.warn, message, "warn", ...args);
    }
    info(message, ...args) {
        if (this.#level < 3)
            return;
        this.#structuredLog(console.info, message, "info", ...args);
    }
    debug(message, ...args) {
        if (this.#level < 4)
            return;
        this.#structuredLog(console.debug, message, "debug", ...args);
    }
    #structuredLog(loggerFunction, message, level, ...args) {
        // Get the current context from trace if it exists
        const currentSpan = api_1.trace.getSpan(api_1.context.active());
        const structuredLog = {
            ...structureArgs(safeJsonClone(args), this.#filteredKeys),
            ...this.#additionalFields(),
            timestamp: new Date(),
            name: this.#name,
            message,
            level,
            traceId: currentSpan && currentSpan.isRecording() ? currentSpan?.spanContext().traceId : undefined,
            parentSpanId: currentSpan && currentSpan.isRecording() ? currentSpan?.spanContext().spanId : undefined,
        };
        loggerFunction(JSON.stringify(structuredLog, this.#jsonReplacer));
    }
}
exports.Logger = Logger;
function createReplacer(replacer) {
    return (key, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        if (replacer) {
            return replacer(key, value);
        }
        return value;
    };
}
// Replacer function for JSON.stringify that converts BigInts to strings
function bigIntReplacer(_key, value) {
    if (typeof value === "bigint") {
        return value.toString();
    }
    return value;
}
function safeJsonClone(obj) {
    try {
        return JSON.parse(JSON.stringify(obj, bigIntReplacer));
    }
    catch (e) {
        return;
    }
}
// If args is has a single item that is an object, return that object
function structureArgs(args, filteredKeys = []) {
    if (!args) {
        return;
    }
    if (args.length === 0) {
        return;
    }
    if (args.length === 1 && typeof args[0] === "object") {
        return filterKeys(JSON.parse(JSON.stringify(args[0], bigIntReplacer)), filteredKeys);
    }
    return args;
}
// Recursively filter out keys from an object, including nested objects, and arrays
function filterKeys(obj, keys) {
    if (typeof obj !== "object" || obj === null) {
        return obj;
    }
    if (Array.isArray(obj)) {
        return obj.map((item) => filterKeys(item, keys));
    }
    const filteredObj = {};
    for (const [key, value] of Object.entries(obj)) {
        if (keys.includes(key)) {
            if (value) {
                filteredObj[key] = `[filtered ${prettyPrintBytes(value)}]`;
            }
            else {
                filteredObj[key] = value;
            }
            continue;
        }
        filteredObj[key] = filterKeys(value, keys);
    }
    return filteredObj;
}
function prettyPrintBytes(value) {
    if (node_process_1.env.NODE_ENV === "production") {
        return "skipped size";
    }
    const sizeInBytes = getSizeInBytes(value);
    if (sizeInBytes < 1024) {
        return `${sizeInBytes} bytes`;
    }
    if (sizeInBytes < 1024 * 1024) {
        return `${(sizeInBytes / 1024).toFixed(2)} KB`;
    }
    if (sizeInBytes < 1024 * 1024 * 1024) {
        return `${(sizeInBytes / (1024 * 1024)).toFixed(2)} MB`;
    }
    return `${(sizeInBytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
}
function getSizeInBytes(value) {
    const jsonString = JSON.stringify(value);
    return node_buffer_1.Buffer.byteLength(jsonString, "utf8");
}
//# sourceMappingURL=logger.js.map