"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardTaskCatalog = void 0;
class StandardTaskCatalog {
    _taskMetadata = new Map();
    _taskFunctions = new Map();
    _taskFileMetadata = new Map();
    registerTaskMetadata(task) {
        const { fns, ...metadata } = task;
        if (!task.id) {
            return;
        }
        this._taskMetadata.set(task.id, metadata);
        this._taskFunctions.set(task.id, fns);
    }
    updateTaskMetadata(id, updates) {
        const existingMetadata = this._taskMetadata.get(id);
        if (existingMetadata) {
            this._taskMetadata.set(id, {
                ...existingMetadata,
                ...updates,
            });
        }
        if (updates.fns) {
            const existingFunctions = this._taskFunctions.get(id);
            if (existingFunctions) {
                this._taskFunctions.set(id, {
                    ...existingFunctions,
                    ...updates.fns,
                });
            }
        }
    }
    registerTaskFileMetadata(id, metadata) {
        this._taskFileMetadata.set(id, metadata);
    }
    // Return all the tasks, without the functions
    listTaskManifests() {
        const result = [];
        for (const [id, metadata] of this._taskMetadata) {
            const fileMetadata = this._taskFileMetadata.get(id);
            if (!fileMetadata) {
                continue;
            }
            result.push({
                ...metadata,
                ...fileMetadata,
            });
        }
        return result;
    }
    getTaskManifest(id) {
        const metadata = this._taskMetadata.get(id);
        const fileMetadata = this._taskFileMetadata.get(id);
        if (!metadata || !fileMetadata) {
            return undefined;
        }
        return {
            ...metadata,
            ...fileMetadata,
        };
    }
    getTask(id) {
        const metadata = this._taskMetadata.get(id);
        const fileMetadata = this._taskFileMetadata.get(id);
        const fns = this._taskFunctions.get(id);
        if (!metadata || !fns || !fileMetadata) {
            return undefined;
        }
        return {
            ...metadata,
            ...fileMetadata,
            fns,
        };
    }
    taskExists(id) {
        return this._taskMetadata.has(id);
    }
    disable() {
        // noop
    }
}
exports.StandardTaskCatalog = StandardTaskCatalog;
//# sourceMappingURL=standardTaskCatalog.js.map