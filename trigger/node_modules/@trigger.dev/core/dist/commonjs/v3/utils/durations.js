"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDuration = formatDuration;
exports.nanosecondsToMilliseconds = nanosecondsToMilliseconds;
exports.millisecondsToNanoseconds = millisecondsToNanoseconds;
exports.formatDurationNanoseconds = formatDurationNanoseconds;
exports.formatDurationMilliseconds = formatDurationMilliseconds;
exports.formatDurationInDays = formatDurationInDays;
const humanize_duration_1 = __importDefault(require("humanize-duration"));
function dateDifference(date1, date2) {
    return Math.abs(date1.getTime() - date2.getTime());
}
function formatDuration(start, end, options) {
    if (!start || !end) {
        return "â€“";
    }
    return formatDurationMilliseconds(dateDifference(start, end), options);
}
function nanosecondsToMilliseconds(nanoseconds) {
    return nanoseconds / 1_000_000;
}
function millisecondsToNanoseconds(milliseconds) {
    return milliseconds * 1_000_000;
}
function formatDurationNanoseconds(nanoseconds, options) {
    return formatDurationMilliseconds(nanosecondsToMilliseconds(nanoseconds), options);
}
const aboveOneSecondUnits = ["d", "h", "m", "s"];
const belowOneSecondUnits = ["ms"];
function formatDurationMilliseconds(milliseconds, options) {
    let duration = (0, humanize_duration_1.default)(milliseconds, {
        units: options?.units
            ? options.units
            : milliseconds < 1000
                ? belowOneSecondUnits
                : aboveOneSecondUnits,
        maxDecimalPoints: options?.maxDecimalPoints ?? 1,
        largest: 2,
    });
    if (!options) {
        return duration;
    }
    switch (options.style) {
        case "short":
            duration = duration.replace(" milliseconds", "ms");
            duration = duration.replace(" millisecond", "ms");
            duration = duration.replace(" seconds", "s");
            duration = duration.replace(" second", "s");
            duration = duration.replace(" minutes", "m");
            duration = duration.replace(" minute", "m");
            duration = duration.replace(" hours", "h");
            duration = duration.replace(" hour", "h");
            duration = duration.replace(" days", "d");
            duration = duration.replace(" day", "d");
            duration = duration.replace(" weeks", "w");
            duration = duration.replace(" week", "w");
            duration = duration.replace(" months", "mo");
            duration = duration.replace(" month", "mo");
            duration = duration.replace(" years", "y");
            duration = duration.replace(" year", "y");
    }
    return duration;
}
function formatDurationInDays(milliseconds) {
    let duration = (0, humanize_duration_1.default)(milliseconds, {
        maxDecimalPoints: 0,
        largest: 2,
        units: ["d"],
    });
    return duration;
}
//# sourceMappingURL=durations.js.map