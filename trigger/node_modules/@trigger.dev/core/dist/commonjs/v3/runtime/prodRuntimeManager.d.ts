import { BatchTaskRunExecutionResult, TaskRunContext, TaskRunExecutionResult } from "../schemas/index.js";
import { ExecutorToWorkerProcessConnection } from "../zodIpc.js";
import { RuntimeManager } from "./manager.js";
export type ProdRuntimeManagerOptions = {
    waitThresholdInMs?: number;
};
export declare class ProdRuntimeManager implements RuntimeManager {
    private ipc;
    private options;
    _taskWaits: Map<string, {
        resolve: (value: TaskRunExecutionResult) => void;
    }>;
    _batchWaits: Map<string, {
        resolve: (value: BatchTaskRunExecutionResult) => void;
        reject: (err?: any) => void;
    }>;
    _waitForDuration: {
        resolve: (value: void) => void;
        reject: (err?: any) => void;
    } | undefined;
    constructor(ipc: ExecutorToWorkerProcessConnection, options?: ProdRuntimeManagerOptions);
    disable(): void;
    waitForDuration(ms: number): Promise<void>;
    resumeAfterDuration(): void;
    waitUntil(date: Date): Promise<void>;
    waitForTask(params: {
        id: string;
        ctx: TaskRunContext;
    }): Promise<TaskRunExecutionResult>;
    waitForBatch(params: {
        id: string;
        runs: string[];
        ctx: TaskRunContext;
    }): Promise<BatchTaskRunExecutionResult>;
    resumeTask(completion: TaskRunExecutionResult): void;
    private get waitThresholdInMs();
}
