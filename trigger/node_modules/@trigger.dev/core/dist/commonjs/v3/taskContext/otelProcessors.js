"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskContextLogProcessor = exports.TaskContextSpanProcessor = void 0;
const semanticInternalAttributes_js_1 = require("../semanticInternalAttributes.js");
const flattenAttributes_js_1 = require("../utils/flattenAttributes.js");
const task_context_api_js_1 = require("../task-context-api.js");
class TaskContextSpanProcessor {
    _innerProcessor;
    constructor(innerProcessor) {
        this._innerProcessor = innerProcessor;
    }
    // Called when a span starts
    onStart(span, parentContext) {
        if (task_context_api_js_1.taskContext.ctx) {
            span.setAttributes((0, flattenAttributes_js_1.flattenAttributes)({
                [semanticInternalAttributes_js_1.SemanticInternalAttributes.ATTEMPT_ID]: task_context_api_js_1.taskContext.ctx.attempt.id,
                [semanticInternalAttributes_js_1.SemanticInternalAttributes.ATTEMPT_NUMBER]: task_context_api_js_1.taskContext.ctx.attempt.number,
            }, semanticInternalAttributes_js_1.SemanticInternalAttributes.METADATA));
        }
        this._innerProcessor.onStart(span, parentContext);
    }
    // Delegate the rest of the methods to the wrapped processor
    onEnd(span) {
        this._innerProcessor.onEnd(span);
    }
    shutdown() {
        return this._innerProcessor.shutdown();
    }
    forceFlush() {
        return this._innerProcessor.forceFlush();
    }
}
exports.TaskContextSpanProcessor = TaskContextSpanProcessor;
class TaskContextLogProcessor {
    _innerProcessor;
    constructor(innerProcessor) {
        this._innerProcessor = innerProcessor;
    }
    forceFlush() {
        return this._innerProcessor.forceFlush();
    }
    onEmit(logRecord, context) {
        // Adds in the context attributes to the log record
        if (task_context_api_js_1.taskContext.ctx) {
            logRecord.setAttributes((0, flattenAttributes_js_1.flattenAttributes)({
                [semanticInternalAttributes_js_1.SemanticInternalAttributes.ATTEMPT_ID]: task_context_api_js_1.taskContext.ctx.attempt.id,
                [semanticInternalAttributes_js_1.SemanticInternalAttributes.ATTEMPT_NUMBER]: task_context_api_js_1.taskContext.ctx.attempt.number,
            }, semanticInternalAttributes_js_1.SemanticInternalAttributes.METADATA));
        }
        this._innerProcessor.onEmit(logRecord, context);
    }
    shutdown() {
        return this._innerProcessor.shutdown();
    }
}
exports.TaskContextLogProcessor = TaskContextLogProcessor;
//# sourceMappingURL=otelProcessors.js.map