"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleInterceptor = void 0;
const api_logs_1 = require("@opentelemetry/api-logs");
const node_util_1 = __importDefault(require("node:util"));
const icons_js_1 = require("./icons.js");
const semanticInternalAttributes_js_1 = require("./semanticInternalAttributes.js");
const flattenAttributes_js_1 = require("./utils/flattenAttributes.js");
const clock_api_js_1 = require("./clock-api.js");
class ConsoleInterceptor {
    logger;
    sendToStdIO;
    constructor(logger, sendToStdIO) {
        this.logger = logger;
        this.sendToStdIO = sendToStdIO;
    }
    // Intercept the console and send logs to the OpenTelemetry logger
    // during the execution of the callback
    async intercept(console, callback) {
        // Save the original console methods
        const originalConsole = {
            log: console.log,
            info: console.info,
            warn: console.warn,
            error: console.error,
            debug: console.debug,
        };
        // Override the console methods
        console.log = this.log.bind(this);
        console.info = this.info.bind(this);
        console.warn = this.warn.bind(this);
        console.error = this.error.bind(this);
        console.debug = this.debug.bind(this);
        try {
            return await callback();
        }
        finally {
            // Restore the original console methods
            console.log = originalConsole.log;
            console.info = originalConsole.info;
            console.warn = originalConsole.warn;
            console.error = originalConsole.error;
            console.debug = originalConsole.debug;
        }
    }
    debug(...args) {
        this.#handleLog(api_logs_1.SeverityNumber.DEBUG, this.#getTimestampInHrTime(), "Debug", ...args);
    }
    log(...args) {
        this.#handleLog(api_logs_1.SeverityNumber.INFO, this.#getTimestampInHrTime(), "Log", ...args);
    }
    info(...args) {
        this.#handleLog(api_logs_1.SeverityNumber.INFO, this.#getTimestampInHrTime(), "Info", ...args);
    }
    warn(...args) {
        this.#handleLog(api_logs_1.SeverityNumber.WARN, this.#getTimestampInHrTime(), "Warn", ...args);
    }
    error(...args) {
        this.#handleLog(api_logs_1.SeverityNumber.ERROR, this.#getTimestampInHrTime(), "Error", ...args);
    }
    #handleLog(severityNumber, timestamp, severityText, ...args) {
        const body = node_util_1.default.format(...args);
        if (this.sendToStdIO) {
            if (severityNumber === api_logs_1.SeverityNumber.ERROR) {
                process.stderr.write(body);
            }
            else {
                process.stdout.write(body);
            }
        }
        const parsed = tryParseJSON(body);
        if (parsed.ok) {
            this.logger.emit({
                severityNumber,
                severityText,
                body: getLogMessage(parsed.value, severityText),
                attributes: { ...this.#getAttributes(severityNumber), ...(0, flattenAttributes_js_1.flattenAttributes)(parsed.value) },
                timestamp,
            });
            return;
        }
        this.logger.emit({
            severityNumber,
            severityText,
            body,
            attributes: this.#getAttributes(severityNumber),
            timestamp,
        });
    }
    #getTimestampInHrTime() {
        return clock_api_js_1.clock.preciseNow();
    }
    #getAttributes(severityNumber) {
        const icon = (0, icons_js_1.iconStringForSeverity)(severityNumber);
        let result = {};
        if (icon !== undefined) {
            result[semanticInternalAttributes_js_1.SemanticInternalAttributes.STYLE_ICON] = icon;
        }
        return result;
    }
}
exports.ConsoleInterceptor = ConsoleInterceptor;
function getLogMessage(value, fallback) {
    if (typeof value["message"] === "string") {
        return value["message"];
    }
    if (typeof value["msg"] === "string") {
        return value["msg"];
    }
    if (typeof value["body"] === "string") {
        return value["body"];
    }
    if (typeof value["error"] === "string") {
        return value["error"];
    }
    return fallback;
}
function tryParseJSON(value) {
    try {
        const parsed = JSON.parse(value);
        if (typeof parsed === "object" && parsed !== null && !Array.isArray(parsed)) {
            return { ok: true, value: parsed };
        }
        return { ok: false, value };
    }
    catch (e) {
        return { ok: false, value };
    }
}
//# sourceMappingURL=consoleInterceptor.js.map