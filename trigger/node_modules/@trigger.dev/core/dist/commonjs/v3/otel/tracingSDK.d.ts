import { TracerProvider } from "@opentelemetry/api";
import { type Instrumentation } from "@opentelemetry/instrumentation";
import { DetectorSync, IResource, Resource, ResourceAttributes, ResourceDetectionConfig } from "@opentelemetry/resources";
import { LoggerProvider } from "@opentelemetry/sdk-logs";
declare class AsyncResourceDetector implements DetectorSync {
    private _promise;
    private _resolver?;
    private _resolved;
    constructor();
    detect(_config?: ResourceDetectionConfig): Resource;
    resolveWithAttributes(attributes: ResourceAttributes): void;
}
export type TracingDiagnosticLogLevel = "none" | "error" | "warn" | "info" | "debug" | "verbose" | "all";
export type TracingSDKConfig = {
    url: string;
    forceFlushTimeoutMillis?: number;
    resource?: IResource;
    instrumentations?: Instrumentation[];
    diagLogLevel?: TracingDiagnosticLogLevel;
};
export declare class TracingSDK {
    private readonly config;
    readonly asyncResourceDetector: AsyncResourceDetector;
    private readonly _logProvider;
    private readonly _spanExporter;
    private readonly _traceProvider;
    readonly getLogger: LoggerProvider["getLogger"];
    readonly getTracer: TracerProvider["getTracer"];
    constructor(config: TracingSDKConfig);
    flush(): Promise<void>;
    shutdown(): Promise<void>;
}
export {};
