export type APIHeaders = Record<string, string | null | undefined>;
export declare class ApiError extends Error {
    readonly status: number | undefined;
    readonly headers: APIHeaders | undefined;
    readonly error: Object | undefined;
    readonly code: string | null | undefined;
    readonly param: string | null | undefined;
    readonly type: string | undefined;
    constructor(status: number | undefined, error: Object | undefined, message: string | undefined, headers: APIHeaders | undefined);
    private static makeMessage;
    static generate(status: number | undefined, errorResponse: Object | undefined, message: string | undefined, headers: APIHeaders | undefined): ApiError;
}
export declare class ApiConnectionError extends ApiError {
    readonly status: undefined;
    constructor({ message, cause }: {
        message?: string;
        cause?: Error | undefined;
    });
}
export declare class BadRequestError extends ApiError {
    readonly status: 400;
}
export declare class AuthenticationError extends ApiError {
    readonly status: 401;
}
export declare class PermissionDeniedError extends ApiError {
    readonly status: 403;
}
export declare class NotFoundError extends ApiError {
    readonly status: 404;
}
export declare class ConflictError extends ApiError {
    readonly status: 409;
}
export declare class UnprocessableEntityError extends ApiError {
    readonly status: 422;
}
export declare class RateLimitError extends ApiError {
    readonly status: 429;
    get millisecondsUntilReset(): number | undefined;
}
export declare class InternalServerError extends ApiError {
}
export declare class ApiSchemaValidationError extends ApiError {
    readonly status: 200;
    readonly rawBody: any;
    constructor({ message, cause, status, rawBody, headers, }: {
        message?: string;
        cause?: Error | undefined;
        status: number;
        rawBody: any;
        headers: APIHeaders | undefined;
    });
}
