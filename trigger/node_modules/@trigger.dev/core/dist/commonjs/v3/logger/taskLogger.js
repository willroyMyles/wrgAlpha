"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopTaskLogger = exports.OtelTaskLogger = exports.logLevels = void 0;
const api_logs_1 = require("@opentelemetry/api-logs");
const icons_js_1 = require("../icons.js");
const semanticInternalAttributes_js_1 = require("../semanticInternalAttributes.js");
const flattenAttributes_js_1 = require("../utils/flattenAttributes.js");
const clock_api_js_1 = require("../clock-api.js");
exports.logLevels = ["none", "error", "warn", "info", "debug"];
class OtelTaskLogger {
    _config;
    _level;
    constructor(_config) {
        this._config = _config;
        this._level = exports.logLevels.indexOf(_config.level);
    }
    debug(message, properties) {
        if (this._level < 4)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "debug", api_logs_1.SeverityNumber.DEBUG, properties);
    }
    log(message, properties) {
        if (this._level < 3)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "log", api_logs_1.SeverityNumber.INFO, properties);
    }
    info(message, properties) {
        if (this._level < 3)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "info", api_logs_1.SeverityNumber.INFO, properties);
    }
    warn(message, properties) {
        if (this._level < 2)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "warn", api_logs_1.SeverityNumber.WARN, properties);
    }
    error(message, properties) {
        if (this._level < 1)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "error", api_logs_1.SeverityNumber.ERROR, properties);
    }
    #emitLog(message, timestamp, severityText, severityNumber, properties) {
        let attributes = { ...(0, flattenAttributes_js_1.flattenAttributes)(safeJsonProcess(properties)) };
        const icon = (0, icons_js_1.iconStringForSeverity)(severityNumber);
        if (icon !== undefined) {
            attributes[semanticInternalAttributes_js_1.SemanticInternalAttributes.STYLE_ICON] = icon;
        }
        this._config.logger.emit({
            severityNumber,
            severityText,
            body: message,
            attributes,
            timestamp,
        });
    }
    trace(name, fn, options) {
        return this._config.tracer.startActiveSpan(name, fn, options);
    }
    #getTimestampInHrTime() {
        return clock_api_js_1.clock.preciseNow();
    }
}
exports.OtelTaskLogger = OtelTaskLogger;
class NoopTaskLogger {
    debug() { }
    log() { }
    info() { }
    warn() { }
    error() { }
    trace(name, fn) {
        return fn({});
    }
}
exports.NoopTaskLogger = NoopTaskLogger;
function safeJsonProcess(value) {
    try {
        return JSON.parse(JSON.stringify(value, jsonErrorReplacer));
    }
    catch {
        return value;
    }
}
function jsonErrorReplacer(key, value) {
    if (value instanceof Error) {
        return {
            name: value.name,
            message: value.message,
            stack: value.stack,
        };
    }
    return value;
}
//# sourceMappingURL=taskLogger.js.map