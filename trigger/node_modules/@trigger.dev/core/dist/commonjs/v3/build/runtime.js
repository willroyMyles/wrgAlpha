"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_RUNTIME = void 0;
exports.binaryForRuntime = binaryForRuntime;
exports.execPathForRuntime = execPathForRuntime;
exports.execOptionsForRuntime = execOptionsForRuntime;
const node_path_1 = require("node:path");
const url_1 = require("url");
exports.DEFAULT_RUNTIME = "node";
function binaryForRuntime(runtime) {
    switch (runtime) {
        case "node":
            return "node";
        case "bun":
            return "bun";
        default:
            throw new Error(`Unsupported runtime ${runtime}`);
    }
}
function execPathForRuntime(runtime) {
    switch (runtime) {
        case "node":
            return process.execPath;
        case "bun":
            if (typeof process.env.BUN_INSTALL === "string") {
                return (0, node_path_1.join)(process.env.BUN_INSTALL, "bin", "bun");
            }
            if (typeof process.env.BUN_INSTALL_BIN === "string") {
                return (0, node_path_1.join)(process.env.BUN_INSTALL_BIN, "bun");
            }
            return (0, node_path_1.join)("~", ".bin", "bin", "bun");
        default:
            throw new Error(`Unsupported runtime ${runtime}`);
    }
}
function execOptionsForRuntime(runtime, options) {
    switch (runtime) {
        case "node": {
            const importEntryPoint = options.loaderEntryPoint
                ? `--import=${(0, url_1.pathToFileURL)(options.loaderEntryPoint).href}`
                : undefined;
            const conditions = options.customConditions?.map((condition) => `--conditions=${condition}`);
            return [importEntryPoint, conditions, process.env.NODE_OPTIONS]
                .filter(Boolean)
                .flat()
                .join(" ");
        }
        case "bun": {
            return "";
        }
    }
}
//# sourceMappingURL=runtime.js.map