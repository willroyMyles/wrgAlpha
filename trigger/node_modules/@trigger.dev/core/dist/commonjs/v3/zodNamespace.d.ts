import type { DisconnectReason, Namespace, Server, Socket } from "socket.io";
import { ZodMessageSender } from "./zodMessageHandler.js";
import { ZodMessageCatalogToSocketIoEvents, ZodSocketMessageCatalogSchema, ZodSocketMessageHandler, ZodSocketMessageHandlers } from "./zodSocket.js";
import type { DefaultEventsMap, EventsMap } from "socket.io/dist/typed-events";
import { z } from "zod";
import { StructuredLogger } from "./utils/structuredLogger.js";
interface ExtendedError extends Error {
    data?: any;
}
export type ZodNamespaceSocket<TClientMessages extends ZodSocketMessageCatalogSchema, TServerMessages extends ZodSocketMessageCatalogSchema, TServerSideEvents extends EventsMap = DefaultEventsMap, TSocketData extends z.ZodObject<any, any, any> = any> = Socket<ZodMessageCatalogToSocketIoEvents<TClientMessages>, ZodMessageCatalogToSocketIoEvents<TServerMessages>, TServerSideEvents, z.infer<TSocketData>>;
interface ZodNamespaceOptions<TClientMessages extends ZodSocketMessageCatalogSchema, TServerMessages extends ZodSocketMessageCatalogSchema, TServerSideEvents extends EventsMap = DefaultEventsMap, TSocketData extends z.ZodObject<any, any, any> = any> {
    io: Server;
    name: string;
    clientMessages: TClientMessages;
    serverMessages: TServerMessages;
    socketData?: TSocketData;
    handlers?: ZodSocketMessageHandlers<TClientMessages>;
    authToken?: string;
    logger?: StructuredLogger;
    preAuth?: (socket: ZodNamespaceSocket<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>, next: (err?: ExtendedError) => void, logger: StructuredLogger) => Promise<void>;
    postAuth?: (socket: ZodNamespaceSocket<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>, next: (err?: ExtendedError) => void, logger: StructuredLogger) => Promise<void>;
    onConnection?: (socket: ZodNamespaceSocket<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>, handler: ZodSocketMessageHandler<TClientMessages>, sender: ZodMessageSender<TServerMessages>, logger: StructuredLogger) => Promise<void>;
    onDisconnect?: (socket: ZodNamespaceSocket<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>, reason: DisconnectReason, description: any, logger: StructuredLogger) => Promise<void>;
    onError?: (socket: ZodNamespaceSocket<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>, err: Error, logger: StructuredLogger) => Promise<void>;
}
export declare class ZodNamespace<TClientMessages extends ZodSocketMessageCatalogSchema, TServerMessages extends ZodSocketMessageCatalogSchema, TSocketData extends z.ZodObject<any, any, any> = any, TServerSideEvents extends EventsMap = DefaultEventsMap> {
    #private;
    sender: ZodMessageSender<TServerMessages>;
    io: Server;
    namespace: Namespace<ZodMessageCatalogToSocketIoEvents<TClientMessages>, ZodMessageCatalogToSocketIoEvents<TServerMessages>, TServerSideEvents, z.infer<TSocketData>>;
    constructor(opts: ZodNamespaceOptions<TClientMessages, TServerMessages, TServerSideEvents, TSocketData>);
    fetchSockets(): Promise<import("socket.io").RemoteSocket<ZodMessageCatalogToSocketIoEvents<TServerMessages>, z.TypeOf<TSocketData>>[]>;
}
export {};
