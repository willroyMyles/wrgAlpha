import { z } from "zod";
export declare const BackgroundWorkerServerMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"CANCEL_ATTEMPT">;
    taskAttemptId: z.ZodString;
    taskRunId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CANCEL_ATTEMPT";
    taskRunId: string;
    taskAttemptId: string;
}, {
    type: "CANCEL_ATTEMPT";
    taskRunId: string;
    taskAttemptId: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
    image: z.ZodString;
    version: z.ZodString;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }>;
    nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
    id: z.ZodOptional<z.ZodString>;
    envId: z.ZodString;
    envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    orgId: z.ZodString;
    projectId: z.ZodString;
    runId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "SCHEDULE_ATTEMPT";
    version: string;
    machine: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    };
    runId: string;
    projectId: string;
    image: string;
    envId: string;
    envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    orgId: string;
    nextAttemptNumber?: number | undefined;
    id?: string | undefined;
}, {
    type: "SCHEDULE_ATTEMPT";
    version: string;
    machine: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    };
    runId: string;
    projectId: string;
    image: string;
    envId: string;
    envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    orgId: string;
    nextAttemptNumber?: number | undefined;
    id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
    payload: z.ZodObject<{
        runId: z.ZodString;
        attemptCount: z.ZodOptional<z.ZodNumber>;
        messageId: z.ZodString;
        isTest: z.ZodBoolean;
        traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        attemptCount?: number | undefined;
        environment?: Record<string, string> | undefined;
    }, {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        attemptCount?: number | undefined;
        environment?: Record<string, string> | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXECUTE_RUN_LAZY_ATTEMPT";
    payload: {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        attemptCount?: number | undefined;
        environment?: Record<string, string> | undefined;
    };
}, {
    type: "EXECUTE_RUN_LAZY_ATTEMPT";
    payload: {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        attemptCount?: number | undefined;
        environment?: Record<string, string> | undefined;
    };
}>]>;
export type BackgroundWorkerServerMessages = z.infer<typeof BackgroundWorkerServerMessages>;
export declare const serverWebsocketMessages: {
    SERVER_READY: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        id: string;
    }, {
        id: string;
        version?: "v1" | undefined;
    }>;
    BACKGROUND_WORKER_MESSAGE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"CANCEL_ATTEMPT">;
            taskAttemptId: z.ZodString;
            taskRunId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        }, {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
            image: z.ZodString;
            version: z.ZodString;
            machine: z.ZodObject<{
                name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                cpu: z.ZodNumber;
                memory: z.ZodNumber;
                centsPerMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            }, {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            }>;
            nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
            id: z.ZodOptional<z.ZodString>;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            image: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            nextAttemptNumber?: number | undefined;
            id?: string | undefined;
        }, {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            image: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            nextAttemptNumber?: number | undefined;
            id?: string | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
            payload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        }, {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        }>]>;
    }, "strip", z.ZodTypeAny, {
        data: {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        } | {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            image: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            nextAttemptNumber?: number | undefined;
            id?: string | undefined;
        } | {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        };
        version: "v1";
        backgroundWorkerId: string;
    }, {
        data: {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        } | {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            image: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            nextAttemptNumber?: number | undefined;
            id?: string | undefined;
        } | {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        };
        backgroundWorkerId: string;
        version?: "v1" | undefined;
    }>;
};
export declare const BackgroundWorkerClientMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
    completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
        ok: z.ZodLiteral<true>;
        id: z.ZodString;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }, {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }>, z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }>]>;
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName: string;
        }, {
            id: string;
            filePath: string;
            exportName: string;
        }>;
        attempt: z.ZodObject<{
            id: z.ZodString;
            number: z.ZodNumber;
            startedAt: z.ZodDate;
            backgroundWorkerId: z.ZodString;
            backgroundWorkerTaskId: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            context: z.ZodAny;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            durationMs: z.ZodDefault<z.ZodNumber>;
            costInCents: z.ZodDefault<z.ZodNumber>;
            baseCostInCents: z.ZodDefault<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        }>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        machine: z.ZodOptional<z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    }, {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_COMPLETED";
    version: "v1";
    execution: {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    };
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    } | {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    };
}, {
    type: "TASK_RUN_COMPLETED";
    execution: {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    };
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    } | {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    };
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
    completion: z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_FAILED_TO_RUN";
    version: "v1";
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    };
}, {
    type: "TASK_RUN_FAILED_TO_RUN";
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    };
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_HEARTBEAT">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TASK_HEARTBEAT";
    version: "v1";
    id: string;
}, {
    type: "TASK_HEARTBEAT";
    id: string;
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_HEARTBEAT";
    version: "v1";
    id: string;
}, {
    type: "TASK_RUN_HEARTBEAT";
    id: string;
    version?: "v1" | undefined;
}>]>;
export type BackgroundWorkerClientMessages = z.infer<typeof BackgroundWorkerClientMessages>;
export declare const ServerBackgroundWorker: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
    contentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    version: string;
    id: string;
    contentHash: string;
}, {
    version: string;
    id: string;
    contentHash: string;
}>;
export type ServerBackgroundWorker = z.infer<typeof ServerBackgroundWorker>;
export declare const clientWebsocketMessages: {
    READY_FOR_TASKS: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        inProgressRuns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
        inProgressRuns?: string[] | undefined;
    }, {
        backgroundWorkerId: string;
        version?: "v1" | undefined;
        inProgressRuns?: string[] | undefined;
    }>;
    BACKGROUND_WORKER_DEPRECATED: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
    }, {
        backgroundWorkerId: string;
        version?: "v1" | undefined;
    }>;
    BACKGROUND_WORKER_MESSAGE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_COMPLETED";
            version: "v1";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            type: "TASK_RUN_COMPLETED";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_FAILED_TO_RUN";
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            type: "TASK_RUN_FAILED_TO_RUN";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_HEARTBEAT">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_HEARTBEAT";
            version: "v1";
            id: string;
        }, {
            type: "TASK_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_HEARTBEAT";
            version: "v1";
            id: string;
        }, {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        data: {
            type: "TASK_RUN_COMPLETED";
            version: "v1";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        } | {
            type: "TASK_RUN_FAILED_TO_RUN";
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        } | {
            type: "TASK_HEARTBEAT";
            version: "v1";
            id: string;
        } | {
            type: "TASK_RUN_HEARTBEAT";
            version: "v1";
            id: string;
        };
        version: "v1";
        backgroundWorkerId: string;
    }, {
        data: {
            type: "TASK_RUN_COMPLETED";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        } | {
            type: "TASK_RUN_FAILED_TO_RUN";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        } | {
            type: "TASK_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        } | {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        };
        backgroundWorkerId: string;
        version?: "v1" | undefined;
    }>;
};
export declare const UncaughtExceptionMessage: z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    error: z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
    }>;
    origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
    };
    version: "v1";
    origin: "uncaughtException" | "unhandledRejection";
}, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
    };
    origin: "uncaughtException" | "unhandledRejection";
    version?: "v1" | undefined;
}>;
export declare const TaskMetadataFailedToParseData: z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    tasks: z.ZodUnknown;
    zodIssues: z.ZodType<z.ZodIssue[], z.ZodTypeDef, z.ZodIssue[]>;
}, "strip", z.ZodTypeAny, {
    version: "v1";
    zodIssues: z.ZodIssue[];
    tasks?: unknown;
}, {
    zodIssues: z.ZodIssue[];
    version?: "v1" | undefined;
    tasks?: unknown;
}>;
export declare const indexerToWorkerMessages: {
    INDEX_COMPLETE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        manifest: z.ZodObject<{
            configPath: z.ZodString;
            tasks: z.ZodArray<z.ZodObject<{
                filePath: z.ZodString;
                exportName: z.ZodString;
                entryPoint: z.ZodString;
                id: z.ZodString;
                queue: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                    rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"fixed-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"sliding-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>]>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                }, {
                    cron: string;
                    timezone: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }, {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }>, "many">;
            workerEntryPoint: z.ZodString;
            controllerEntryPoint: z.ZodOptional<z.ZodString>;
            loaderEntryPoint: z.ZodOptional<z.ZodString>;
            runtime: z.ZodEnum<["node", "bun"]>;
            customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            otelImportHook: z.ZodOptional<z.ZodObject<{
                include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }, {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }>;
        importErrors: z.ZodArray<z.ZodObject<{
            message: z.ZodString;
            file: z.ZodString;
            stack: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            file: string;
            stack?: string | undefined;
            name?: string | undefined;
        }, {
            message: string;
            file: string;
            stack?: string | undefined;
            name?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
        importErrors: {
            message: string;
            file: string;
            stack?: string | undefined;
            name?: string | undefined;
        }[];
    }, {
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
        importErrors: {
            message: string;
            file: string;
            stack?: string | undefined;
            name?: string | undefined;
        }[];
        version?: "v1" | undefined;
    }>;
    TASKS_FAILED_TO_PARSE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        tasks: z.ZodUnknown;
        zodIssues: z.ZodType<z.ZodIssue[], z.ZodTypeDef, z.ZodIssue[]>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        zodIssues: z.ZodIssue[];
        tasks?: unknown;
    }, {
        zodIssues: z.ZodIssue[];
        version?: "v1" | undefined;
        tasks?: unknown;
    }>;
    UNCAUGHT_EXCEPTION: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        error: z.ZodObject<{
            name: z.ZodString;
            message: z.ZodString;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name: string;
            stack?: string | undefined;
        }, {
            message: string;
            name: string;
            stack?: string | undefined;
        }>;
        origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
        };
        version: "v1";
        origin: "uncaughtException" | "unhandledRejection";
    }, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
        };
        origin: "uncaughtException" | "unhandledRejection";
        version?: "v1" | undefined;
    }>;
};
export declare const ExecutorToWorkerMessageCatalog: {
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
            result: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            result: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            result: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            id: string;
        }, {
            id: string;
            version?: "v1" | undefined;
        }>;
    };
    READY_TO_DISPOSE: {
        message: z.ZodUndefined;
    };
    WAIT_FOR_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            ms: z.ZodNumber;
            now: z.ZodNumber;
            waitThresholdInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            now: number;
            ms: number;
            waitThresholdInMs: number;
        }, {
            now: number;
            ms: number;
            waitThresholdInMs: number;
            version?: "v1" | undefined;
        }>;
    };
    WAIT_FOR_TASK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            friendlyId: string;
        }, {
            friendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    WAIT_FOR_BATCH: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            batchFriendlyId: z.ZodString;
            runFriendlyIds: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            batchFriendlyId: string;
            runFriendlyIds: string[];
        }, {
            batchFriendlyId: string;
            runFriendlyIds: string[];
            version?: "v1" | undefined;
        }>;
    };
    UNCAUGHT_EXCEPTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
            origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
            origin: "uncaughtException" | "unhandledRejection";
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            origin: "uncaughtException" | "unhandledRejection";
            version?: "v1" | undefined;
        }>;
    };
};
export declare const WorkerToExecutorMessageCatalog: {
    EXECUTE_TASK_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
            traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            metadata: z.ZodObject<{
                id: z.ZodString;
                version: z.ZodString;
                contentHash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                version: string;
                id: string;
                contentHash: string;
            }, {
                version: string;
                id: string;
                contentHash: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            metadata: {
                version: string;
                id: string;
                contentHash: string;
            };
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            traceContext: Record<string, unknown>;
        }, {
            metadata: {
                version: string;
                id: string;
                contentHash: string;
            };
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            traceContext: Record<string, unknown>;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_COMPLETED_NOTIFICATION: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            version: "v1";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            version: "v2";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }>]>;
    };
    WAIT_COMPLETED_NOTIFICATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version?: "v1" | undefined;
        }>;
    };
    FLUSH: {
        message: z.ZodObject<{
            timeoutInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            timeoutInMs: number;
        }, {
            timeoutInMs: number;
        }>;
        callback: z.ZodVoid;
    };
};
export declare const ProviderToPlatformMessages: {
    LOG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
            version: "v1";
        }, {
            data: string;
            version?: "v1" | undefined;
        }>;
    };
    LOG_WITH_ACK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            data: string;
            version: "v1";
        }, {
            data: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodObject<{
            status: z.ZodLiteral<"ok">;
        }, "strip", z.ZodTypeAny, {
            status: "ok";
        }, {
            status: "ok";
        }>;
    };
    WORKER_CRASHED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            exitCode: z.ZodOptional<z.ZodNumber>;
            message: z.ZodOptional<z.ZodString>;
            logs: z.ZodOptional<z.ZodString>;
            overrideCompletion: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            reason?: string | undefined;
            exitCode?: number | undefined;
            message?: string | undefined;
            logs?: string | undefined;
            overrideCompletion?: boolean | undefined;
        }, {
            runId: string;
            version?: "v1" | undefined;
            reason?: string | undefined;
            exitCode?: number | undefined;
            message?: string | undefined;
            logs?: string | undefined;
            overrideCompletion?: boolean | undefined;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
            overrideCompletion: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
            overrideCompletion?: boolean | undefined;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
            overrideCompletion?: boolean | undefined;
        }>;
    };
};
export declare const PlatformToProviderMessages: {
    INDEX: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            imageTag: z.ZodString;
            shortCode: z.ZodString;
            apiKey: z.ZodString;
            apiUrl: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            deploymentId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            apiKey: string;
            imageTag: string;
            apiUrl: string;
            projectId: string;
            shortCode: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
        }, {
            apiKey: string;
            imageTag: string;
            apiUrl: string;
            projectId: string;
            shortCode: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    RESTORE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodEnum<["DOCKER", "KUBERNETES"]>;
            location: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            imageRef: z.ZodString;
            attemptNumber: z.ZodOptional<z.ZodNumber>;
            machine: z.ZodObject<{
                name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                cpu: z.ZodNumber;
                memory: z.ZodNumber;
                centsPerMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            }, {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            }>;
            checkpointId: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "DOCKER" | "KUBERNETES";
            version: "v1";
            location: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            imageRef: string;
            checkpointId: string;
            reason?: string | undefined;
            attemptNumber?: number | undefined;
        }, {
            type: "DOCKER" | "KUBERNETES";
            location: string;
            machine: {
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                cpu: number;
                memory: number;
                centsPerMs: number;
            };
            runId: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            imageRef: string;
            checkpointId: string;
            version?: "v1" | undefined;
            reason?: string | undefined;
            attemptNumber?: number | undefined;
        }>;
    };
    PRE_PULL_DEPLOYMENT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            imageRef: z.ZodString;
            shortCode: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            deploymentId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            projectId: string;
            shortCode: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
            imageRef: string;
        }, {
            projectId: string;
            shortCode: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
            imageRef: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const CoordinatorToPlatformMessages: {
    LOG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            metadata: z.ZodAny;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            text: string;
            metadata?: any;
        }, {
            text: string;
            version?: "v1" | undefined;
            metadata?: any;
        }>;
    };
    CREATE_WORKER: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            metadata: z.ZodObject<{
                cliPackageVersion: z.ZodOptional<z.ZodString>;
                contentHash: z.ZodString;
                packageVersion: z.ZodString;
                tasks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                    queue: z.ZodOptional<z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                        rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"fixed-window">;
                            limit: z.ZodNumber;
                            window: z.ZodUnion<[z.ZodObject<{
                                seconds: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                seconds: number;
                            }, {
                                seconds: number;
                            }>, z.ZodObject<{
                                minutes: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                minutes: number;
                            }, {
                                minutes: number;
                            }>, z.ZodObject<{
                                hours: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                hours: number;
                            }, {
                                hours: number;
                            }>]>;
                        }, "strip", z.ZodTypeAny, {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }, {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"sliding-window">;
                            limit: z.ZodNumber;
                            window: z.ZodUnion<[z.ZodObject<{
                                seconds: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                seconds: number;
                            }, {
                                seconds: number;
                            }>, z.ZodObject<{
                                minutes: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                minutes: number;
                            }, {
                                minutes: number;
                            }>, z.ZodObject<{
                                hours: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                hours: number;
                            }, {
                                hours: number;
                            }>]>;
                        }, "strip", z.ZodTypeAny, {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }, {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }>]>>;
                    }, "strip", z.ZodTypeAny, {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    }, {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    }>>;
                    retry: z.ZodOptional<z.ZodObject<{
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        factor: z.ZodOptional<z.ZodNumber>;
                        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        randomize: z.ZodOptional<z.ZodBoolean>;
                    }, "strip", z.ZodTypeAny, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    }, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    }>>;
                    machine: z.ZodOptional<z.ZodObject<{
                        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                    triggerSource: z.ZodOptional<z.ZodString>;
                    schedule: z.ZodOptional<z.ZodObject<{
                        cron: z.ZodString;
                        timezone: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        cron: string;
                        timezone: string;
                    }, {
                        cron: string;
                        timezone: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            }, {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            }>;
            envId: z.ZodString;
            deploymentId: z.ZodString;
            projectRef: z.ZodString;
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            metadata: {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            };
            envId: string;
            deploymentId: string;
            projectRef: string;
        }, {
            version: "v1";
            metadata: {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            };
            envId: string;
            deploymentId: string;
            projectRef: string;
        }>, z.ZodObject<{
            metadata: z.ZodObject<{
                cliPackageVersion: z.ZodOptional<z.ZodString>;
                contentHash: z.ZodString;
                packageVersion: z.ZodString;
                tasks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                    queue: z.ZodOptional<z.ZodObject<{
                        name: z.ZodOptional<z.ZodString>;
                        concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                        rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"fixed-window">;
                            limit: z.ZodNumber;
                            window: z.ZodUnion<[z.ZodObject<{
                                seconds: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                seconds: number;
                            }, {
                                seconds: number;
                            }>, z.ZodObject<{
                                minutes: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                minutes: number;
                            }, {
                                minutes: number;
                            }>, z.ZodObject<{
                                hours: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                hours: number;
                            }, {
                                hours: number;
                            }>]>;
                        }, "strip", z.ZodTypeAny, {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }, {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"sliding-window">;
                            limit: z.ZodNumber;
                            window: z.ZodUnion<[z.ZodObject<{
                                seconds: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                seconds: number;
                            }, {
                                seconds: number;
                            }>, z.ZodObject<{
                                minutes: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                minutes: number;
                            }, {
                                minutes: number;
                            }>, z.ZodObject<{
                                hours: z.ZodNumber;
                            }, "strip", z.ZodTypeAny, {
                                hours: number;
                            }, {
                                hours: number;
                            }>]>;
                        }, "strip", z.ZodTypeAny, {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }, {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        }>]>>;
                    }, "strip", z.ZodTypeAny, {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    }, {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    }>>;
                    retry: z.ZodOptional<z.ZodObject<{
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        factor: z.ZodOptional<z.ZodNumber>;
                        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        randomize: z.ZodOptional<z.ZodBoolean>;
                    }, "strip", z.ZodTypeAny, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    }, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    }>>;
                    machine: z.ZodOptional<z.ZodObject<{
                        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                    triggerSource: z.ZodOptional<z.ZodString>;
                    schedule: z.ZodOptional<z.ZodObject<{
                        cron: z.ZodString;
                        timezone: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        cron: string;
                        timezone: string;
                    }, {
                        cron: string;
                        timezone: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            }, {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            }>;
            envId: z.ZodString;
            deploymentId: z.ZodString;
            projectRef: z.ZodString;
            version: z.ZodLiteral<"v2">;
            supportsLazyAttempts: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            metadata: {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            };
            supportsLazyAttempts: boolean;
            envId: string;
            deploymentId: string;
            projectRef: string;
        }, {
            version: "v2";
            metadata: {
                tasks: {
                    id: string;
                    filePath: string;
                    exportName: string;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | undefined;
                        rateLimit?: {
                            type: "fixed-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | {
                            type: "sliding-window";
                            limit: number;
                            window: ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            }) & ({
                                seconds: number;
                            } | {
                                minutes: number;
                            } | {
                                hours: number;
                            } | undefined);
                        } | undefined;
                    } | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                    } | undefined;
                }[];
                contentHash: string;
                packageVersion: string;
                cliPackageVersion?: string | undefined;
            };
            supportsLazyAttempts: boolean;
            envId: string;
            deploymentId: string;
            projectRef: string;
        }>]>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    CREATE_TASK_RUN_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            envId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            envId: string;
        }, {
            runId: string;
            envId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    run: z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        context: z.ZodAny;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        durationMs: z.ZodDefault<z.ZodNumber>;
                        costInCents: z.ZodDefault<z.ZodNumber>;
                        baseCostInCents: z.ZodDefault<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }>;
                    attempt: z.ZodObject<{
                        id: z.ZodString;
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
        }, {
            success: true;
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
        }>]>;
    };
    READY_FOR_EXECUTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            payload: z.ZodObject<{
                execution: z.ZodObject<{
                    run: z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        context: z.ZodAny;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        durationMs: z.ZodDefault<z.ZodNumber>;
                        costInCents: z.ZodDefault<z.ZodNumber>;
                        baseCostInCents: z.ZodDefault<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }>;
                    attempt: z.ZodObject<{
                        id: z.ZodString;
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            payload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
            success: true;
        }, {
            payload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
            success: true;
        }>]>;
    };
    READY_FOR_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            envId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            envId: string;
            totalCompletions: number;
        }, {
            runId: string;
            envId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            lazyPayload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        }, {
            success: true;
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        }>]>;
    };
    READY_FOR_RESUME: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            execution: z.ZodObject<{
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                worker: z.ZodObject<{
                    id: z.ZodString;
                    contentHash: z.ZodString;
                    version: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    id: string;
                    contentHash: string;
                }, {
                    version: string;
                    id: string;
                    contentHash: string;
                }>;
                machine: z.ZodDefault<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
            checkpoint: z.ZodOptional<z.ZodObject<{
                docker: z.ZodBoolean;
                location: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                location: string;
                docker: boolean;
            }, {
                location: string;
                docker: boolean;
            }>>;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }, {
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | "v2" | undefined;
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }>;
    };
    TASK_RUN_FAILED_TO_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
        }, {
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    CHECKPOINT_CREATED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
            docker: z.ZodBoolean;
            location: z.ZodString;
            reason: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_DURATION">;
                ms: z.ZodNumber;
                now: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_DURATION";
                now: number;
                ms: number;
            }, {
                type: "WAIT_FOR_DURATION";
                now: number;
                ms: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_BATCH">;
                batchFriendlyId: z.ZodString;
                runFriendlyIds: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            }, {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            }>, z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_TASK">;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            }, {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"RETRYING_AFTER_FAILURE">;
                attemptNumber: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            }, {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            location: string;
            reason: {
                type: "WAIT_FOR_DURATION";
                now: number;
                ms: number;
            } | {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            } | {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            } | {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            };
            attemptFriendlyId: string;
            docker: boolean;
        }, {
            location: string;
            reason: {
                type: "WAIT_FOR_DURATION";
                now: number;
                ms: number;
            } | {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            } | {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            } | {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            };
            attemptFriendlyId: string;
            docker: boolean;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            keepRunAlive: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            keepRunAlive: boolean;
        }, {
            keepRunAlive: boolean;
            version?: "v1" | undefined;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
    };
    RUN_CRASHED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
            runId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const PlatformToCoordinatorMessages: {
    /** @deprecated use RESUME_AFTER_DEPENDENCY_WITH_ACK instead  */
    RESUME_AFTER_DEPENDENCY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            attemptFriendlyId: string;
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
        }, {
            runId: string;
            attemptFriendlyId: string;
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
    };
    RESUME_AFTER_DEPENDENCY_WITH_ACK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            attemptFriendlyId: string;
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
        }, {
            runId: string;
            attemptFriendlyId: string;
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    RESUME_AFTER_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
            attemptId: string;
        }, {
            attemptFriendlyId: string;
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_ATTEMPT_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
            attemptId: string;
        }, {
            attemptFriendlyId: string;
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_RUN_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            delayInMs: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            delayInMs?: number | undefined;
        }, {
            runId: string;
            version?: "v1" | undefined;
            delayInMs?: number | undefined;
        }>;
    };
    READY_FOR_RETRY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    DYNAMIC_CONFIG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            checkpointThresholdInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            checkpointThresholdInMs: number;
        }, {
            checkpointThresholdInMs: number;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ClientToSharedQueueMessages: {
    READY_FOR_TASKS: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
        }, {
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_DEPRECATED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
        }, {
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_MESSAGE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
            data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
                completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                    ok: z.ZodLiteral<true>;
                    id: z.ZodString;
                    output: z.ZodOptional<z.ZodString>;
                    outputType: z.ZodString;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }, {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }>, z.ZodObject<{
                    ok: z.ZodLiteral<false>;
                    id: z.ZodString;
                    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"BUILT_IN_ERROR">;
                        name: z.ZodString;
                        message: z.ZodString;
                        stackTrace: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"CUSTOM_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STRING_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "STRING_ERROR";
                        raw: string;
                    }, {
                        type: "STRING_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"INTERNAL_ERROR">;
                        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                        message: z.ZodOptional<z.ZodString>;
                        stackTrace: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }>]>;
                    retry: z.ZodOptional<z.ZodObject<{
                        timestamp: z.ZodNumber;
                        delay: z.ZodNumber;
                        error: z.ZodOptional<z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }>>;
                    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }>]>;
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }>;
                    attempt: z.ZodObject<{
                        id: z.ZodString;
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        context: z.ZodAny;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        durationMs: z.ZodDefault<z.ZodNumber>;
                        costInCents: z.ZodDefault<z.ZodNumber>;
                        baseCostInCents: z.ZodDefault<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    }>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                    machine: z.ZodOptional<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }, {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_COMPLETED";
                version: "v1";
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                } | {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
            }, {
                type: "TASK_RUN_COMPLETED";
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                } | {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
                completion: z.ZodObject<{
                    ok: z.ZodLiteral<false>;
                    id: z.ZodString;
                    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"BUILT_IN_ERROR">;
                        name: z.ZodString;
                        message: z.ZodString;
                        stackTrace: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"CUSTOM_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STRING_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "STRING_ERROR";
                        raw: string;
                    }, {
                        type: "STRING_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"INTERNAL_ERROR">;
                        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                        message: z.ZodOptional<z.ZodString>;
                        stackTrace: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }>]>;
                    retry: z.ZodOptional<z.ZodObject<{
                        timestamp: z.ZodNumber;
                        delay: z.ZodNumber;
                        error: z.ZodOptional<z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }>>;
                    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_FAILED_TO_RUN";
                version: "v1";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
            }, {
                type: "TASK_RUN_FAILED_TO_RUN";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_HEARTBEAT">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_HEARTBEAT";
                version: "v1";
                id: string;
            }, {
                type: "TASK_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_HEARTBEAT";
                version: "v1";
                id: string;
            }, {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            data: {
                type: "TASK_RUN_COMPLETED";
                version: "v1";
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                } | {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
            } | {
                type: "TASK_RUN_FAILED_TO_RUN";
                version: "v1";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
            } | {
                type: "TASK_HEARTBEAT";
                version: "v1";
                id: string;
            } | {
                type: "TASK_RUN_HEARTBEAT";
                version: "v1";
                id: string;
            };
            version: "v1";
            backgroundWorkerId: string;
        }, {
            data: {
                type: "TASK_RUN_COMPLETED";
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                } | {
                    id: string;
                    ok: true;
                    outputType: string;
                    output?: string | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
                version?: "v1" | undefined;
            } | {
                type: "TASK_RUN_FAILED_TO_RUN";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    id: string;
                    ok: false;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                };
                version?: "v1" | undefined;
            } | {
                type: "TASK_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            } | {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            };
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const SharedQueueToClientMessages: {
    SERVER_READY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            id: string;
        }, {
            id: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_MESSAGE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
            data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"CANCEL_ATTEMPT">;
                taskAttemptId: z.ZodString;
                taskRunId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            }, {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
                image: z.ZodString;
                version: z.ZodString;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>;
                nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
                id: z.ZodOptional<z.ZodString>;
                envId: z.ZodString;
                envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                orgId: z.ZodString;
                projectId: z.ZodString;
                runId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                runId: string;
                projectId: string;
                image: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                nextAttemptNumber?: number | undefined;
                id?: string | undefined;
            }, {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                runId: string;
                projectId: string;
                image: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                nextAttemptNumber?: number | undefined;
                id?: string | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
                payload: z.ZodObject<{
                    runId: z.ZodString;
                    attemptCount: z.ZodOptional<z.ZodNumber>;
                    messageId: z.ZodString;
                    isTest: z.ZodBoolean;
                    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                }, {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                };
            }, {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                };
            }>]>;
        }, "strip", z.ZodTypeAny, {
            data: {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            } | {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                runId: string;
                projectId: string;
                image: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                nextAttemptNumber?: number | undefined;
                id?: string | undefined;
            } | {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                };
            };
            version: "v1";
            backgroundWorkerId: string;
        }, {
            data: {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            } | {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                runId: string;
                projectId: string;
                image: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                nextAttemptNumber?: number | undefined;
                id?: string | undefined;
            } | {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    attemptCount?: number | undefined;
                    environment?: Record<string, string> | undefined;
                };
            };
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ProdWorkerToCoordinatorMessages: {
    TEST: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version?: "v1" | undefined;
        }>;
        callback: z.ZodVoid;
    };
    INDEX_TASKS: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            tasks: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                filePath: z.ZodString;
                exportName: z.ZodString;
                queue: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                    rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"fixed-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"sliding-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>]>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                }, {
                    cron: string;
                    timezone: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }, {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }>, "many">;
            packageVersion: z.ZodString;
            deploymentId: z.ZodString;
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            packageVersion: string;
            deploymentId: string;
        }, {
            version: "v1";
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            packageVersion: string;
            deploymentId: string;
        }>, z.ZodObject<{
            tasks: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                filePath: z.ZodString;
                exportName: z.ZodString;
                queue: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                    rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"fixed-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"sliding-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>]>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                }, {
                    cron: string;
                    timezone: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }, {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }>, "many">;
            packageVersion: z.ZodString;
            deploymentId: z.ZodString;
            version: z.ZodLiteral<"v2">;
            supportsLazyAttempts: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            packageVersion: string;
            supportsLazyAttempts: boolean;
            deploymentId: string;
        }, {
            version: "v2";
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            packageVersion: string;
            supportsLazyAttempts: boolean;
            deploymentId: string;
        }>]>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    READY_FOR_EXECUTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
    };
    READY_FOR_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
    };
    READY_FOR_RESUME: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
            attemptFriendlyId: z.ZodString;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            attemptFriendlyId: z.ZodString;
            attemptNumber: z.ZodNumber;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v2";
            attemptNumber: number;
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v2";
            attemptNumber: number;
            attemptFriendlyId: string;
        }>]>;
    };
    READY_FOR_CHECKPOINT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version?: "v1" | undefined;
        }>;
    };
    CANCEL_CHECKPOINT: {
        message: z.ZodDefault<z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version: "v1";
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            reason: z.ZodOptional<z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }, {
            version: "v2";
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }>]>>;
        callback: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v2">>;
            checkpointCanceled: z.ZodBoolean;
            reason: z.ZodOptional<z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            checkpointCanceled: boolean;
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }, {
            checkpointCanceled: boolean;
            version?: "v2" | undefined;
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
        }, {
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            execution: z.ZodObject<{
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                worker: z.ZodObject<{
                    id: z.ZodString;
                    contentHash: z.ZodString;
                    version: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    version: string;
                    id: string;
                    contentHash: string;
                }, {
                    version: string;
                    id: string;
                    contentHash: string;
                }>;
                machine: z.ZodDefault<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            execution: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                machine: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            execution: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                worker: {
                    version: string;
                    id: string;
                    contentHash: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
            shouldExit: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
            shouldExit: boolean;
        }, {
            willCheckpointAndRestore: boolean;
            shouldExit: boolean;
        }>;
    };
    TASK_RUN_FAILED_TO_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
        }, {
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    WAIT_FOR_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            ms: z.ZodNumber;
            now: z.ZodNumber;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            now: number;
            ms: number;
            attemptFriendlyId: string;
        }, {
            now: number;
            ms: number;
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    WAIT_FOR_TASK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            friendlyId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            friendlyId: string;
            attemptFriendlyId: string;
        }, {
            friendlyId: string;
            attemptFriendlyId: string;
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    WAIT_FOR_BATCH: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            batchFriendlyId: z.ZodString;
            runFriendlyIds: z.ZodArray<z.ZodString, "many">;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            batchFriendlyId: string;
            runFriendlyIds: string[];
            attemptFriendlyId: string;
        }, {
            batchFriendlyId: string;
            runFriendlyIds: string[];
            attemptFriendlyId: string;
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
    };
    CREATE_TASK_RUN_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    run: z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        context: z.ZodAny;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        durationMs: z.ZodDefault<z.ZodNumber>;
                        costInCents: z.ZodDefault<z.ZodNumber>;
                        baseCostInCents: z.ZodDefault<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }>;
                    attempt: z.ZodObject<{
                        id: z.ZodString;
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
        }, {
            success: true;
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
        }>]>;
    };
    UNRECOVERABLE_ERROR: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    SET_STATE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodOptional<z.ZodString>;
            attemptNumber: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId?: string | undefined;
            attemptNumber?: string | undefined;
        }, {
            version?: "v1" | undefined;
            attemptFriendlyId?: string | undefined;
            attemptNumber?: string | undefined;
        }>;
    };
};
export declare const CoordinatorToProdWorkerMessages: {
    RESUME_AFTER_DEPENDENCY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }, {
                    id: string;
                    filePath: string;
                    exportName: string;
                }>;
                attempt: z.ZodObject<{
                    id: z.ZodString;
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    context: z.ZodAny;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    durationMs: z.ZodDefault<z.ZodNumber>;
                    costInCents: z.ZodDefault<z.ZodNumber>;
                    baseCostInCents: z.ZodDefault<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                }>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }, {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }, {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    startedAt: Date;
                    payloadType: string;
                    isTest: boolean;
                    createdAt: Date;
                    tags: string[];
                    durationMs: number;
                    costInCents: number;
                    baseCostInCents: number;
                    context?: any;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
        }, {
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                id: string;
                ok: false;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            } | {
                id: string;
                ok: true;
                outputType: string;
                output?: string | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
            })[];
            executions: {
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    createdAt: Date;
                    tags: string[];
                    context?: any;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    baseCostInCents?: number | undefined;
                    version?: string | undefined;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                task: {
                    id: string;
                    filePath: string;
                    exportName: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                queue: {
                    name: string;
                    id: string;
                };
                batch?: {
                    id: string;
                } | undefined;
                machine?: {
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    cpu: number;
                    memory: number;
                    centsPerMs: number;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
    };
    RESUME_AFTER_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
        }, {
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    EXECUTE_TASK_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    run: z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        context: z.ZodAny;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        durationMs: z.ZodDefault<z.ZodNumber>;
                        costInCents: z.ZodDefault<z.ZodNumber>;
                        baseCostInCents: z.ZodDefault<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }, {
                        id: string;
                        filePath: string;
                        exportName: string;
                    }>;
                    attempt: z.ZodObject<{
                        id: z.ZodString;
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }, {
                        version: string;
                        id: string;
                        contentHash: string;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }, {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }, {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        startedAt: Date;
                        payloadType: string;
                        isTest: boolean;
                        createdAt: Date;
                        tags: string[];
                        durationMs: number;
                        costInCents: number;
                        baseCostInCents: number;
                        context?: any;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    machine: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
        }, {
            executionPayload: {
                execution: {
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        createdAt: Date;
                        tags: string[];
                        context?: any;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        durationMs?: number | undefined;
                        costInCents?: number | undefined;
                        baseCostInCents?: number | undefined;
                        version?: string | undefined;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    task: {
                        id: string;
                        filePath: string;
                        exportName: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    worker: {
                        version: string;
                        id: string;
                        contentHash: string;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                    machine?: {
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        cpu: number;
                        memory: number;
                        centsPerMs: number;
                    } | undefined;
                };
                traceContext: Record<string, unknown>;
                environment?: Record<string, string> | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    EXECUTE_TASK_RUN_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            lazyPayload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
        }, {
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                attemptCount?: number | undefined;
                environment?: Record<string, string> | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_ATTEMPT_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
        }, {
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_EXIT: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version: "v1";
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            delayInMs: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            delayInMs?: number | undefined;
        }, {
            version: "v2";
            delayInMs?: number | undefined;
        }>]>;
    };
    READY_FOR_RETRY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ProdWorkerSocketData: z.ZodObject<{
    contentHash: z.ZodString;
    projectRef: z.ZodString;
    envId: z.ZodString;
    runId: z.ZodString;
    attemptFriendlyId: z.ZodOptional<z.ZodString>;
    attemptNumber: z.ZodOptional<z.ZodString>;
    podName: z.ZodString;
    deploymentId: z.ZodString;
    deploymentVersion: z.ZodString;
    requiresCheckpointResumeWithMessage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    runId: string;
    envId: string;
    deploymentId: string;
    projectRef: string;
    podName: string;
    deploymentVersion: string;
    attemptFriendlyId?: string | undefined;
    attemptNumber?: string | undefined;
    requiresCheckpointResumeWithMessage?: string | undefined;
}, {
    contentHash: string;
    runId: string;
    envId: string;
    deploymentId: string;
    projectRef: string;
    podName: string;
    deploymentVersion: string;
    attemptFriendlyId?: string | undefined;
    attemptNumber?: string | undefined;
    requiresCheckpointResumeWithMessage?: string | undefined;
}>;
export declare const CoordinatorSocketData: z.ZodObject<{
    supportsDynamicConfig: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    supportsDynamicConfig?: string | undefined;
}, {
    supportsDynamicConfig?: string | undefined;
}>;
