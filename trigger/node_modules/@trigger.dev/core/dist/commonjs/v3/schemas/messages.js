"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoordinatorSocketData = exports.ProdWorkerSocketData = exports.CoordinatorToProdWorkerMessages = exports.ProdWorkerToCoordinatorMessages = exports.SharedQueueToClientMessages = exports.ClientToSharedQueueMessages = exports.PlatformToCoordinatorMessages = exports.CoordinatorToPlatformMessages = exports.PlatformToProviderMessages = exports.ProviderToPlatformMessages = exports.WorkerToExecutorMessageCatalog = exports.ExecutorToWorkerMessageCatalog = exports.indexerToWorkerMessages = exports.TaskMetadataFailedToParseData = exports.UncaughtExceptionMessage = exports.clientWebsocketMessages = exports.ServerBackgroundWorker = exports.BackgroundWorkerClientMessages = exports.serverWebsocketMessages = exports.BackgroundWorkerServerMessages = void 0;
const zod_1 = require("zod");
const build_js_1 = require("./build.js");
const common_js_1 = require("./common.js");
const resources_js_1 = require("./resources.js");
const schemas_js_1 = require("./schemas.js");
const ackCallbackResult = zod_1.z.discriminatedUnion("success", [
    zod_1.z.object({
        success: zod_1.z.literal(false),
        error: zod_1.z.object({
            name: zod_1.z.string(),
            message: zod_1.z.string(),
            stack: zod_1.z.string().optional(),
            stderr: zod_1.z.string().optional(),
        }),
    }),
    zod_1.z.object({
        success: zod_1.z.literal(true),
    }),
]);
exports.BackgroundWorkerServerMessages = zod_1.z.discriminatedUnion("type", [
    zod_1.z.object({
        type: zod_1.z.literal("CANCEL_ATTEMPT"),
        taskAttemptId: zod_1.z.string(),
        taskRunId: zod_1.z.string(),
    }),
    zod_1.z.object({
        type: zod_1.z.literal("SCHEDULE_ATTEMPT"),
        image: zod_1.z.string(),
        version: zod_1.z.string(),
        machine: common_js_1.MachinePreset,
        nextAttemptNumber: zod_1.z.number().optional(),
        // identifiers
        id: zod_1.z.string().optional(), // TODO: Remove this completely in a future release
        envId: zod_1.z.string(),
        envType: schemas_js_1.EnvironmentType,
        orgId: zod_1.z.string(),
        projectId: zod_1.z.string(),
        runId: zod_1.z.string(),
    }),
    zod_1.z.object({
        type: zod_1.z.literal("EXECUTE_RUN_LAZY_ATTEMPT"),
        payload: schemas_js_1.TaskRunExecutionLazyAttemptPayload,
    }),
]);
exports.serverWebsocketMessages = {
    SERVER_READY: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        id: zod_1.z.string(),
    }),
    BACKGROUND_WORKER_MESSAGE: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        backgroundWorkerId: zod_1.z.string(),
        data: exports.BackgroundWorkerServerMessages,
    }),
};
exports.BackgroundWorkerClientMessages = zod_1.z.discriminatedUnion("type", [
    zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        type: zod_1.z.literal("TASK_RUN_COMPLETED"),
        completion: common_js_1.TaskRunExecutionResult,
        execution: common_js_1.TaskRunExecution,
    }),
    zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        type: zod_1.z.literal("TASK_RUN_FAILED_TO_RUN"),
        completion: common_js_1.TaskRunFailedExecutionResult,
    }),
    zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        type: zod_1.z.literal("TASK_HEARTBEAT"),
        id: zod_1.z.string(),
    }),
    zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        type: zod_1.z.literal("TASK_RUN_HEARTBEAT"),
        id: zod_1.z.string(),
    }),
]);
exports.ServerBackgroundWorker = zod_1.z.object({
    id: zod_1.z.string(),
    version: zod_1.z.string(),
    contentHash: zod_1.z.string(),
});
exports.clientWebsocketMessages = {
    READY_FOR_TASKS: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        backgroundWorkerId: zod_1.z.string(),
        inProgressRuns: zod_1.z.string().array().optional(),
    }),
    BACKGROUND_WORKER_DEPRECATED: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        backgroundWorkerId: zod_1.z.string(),
    }),
    BACKGROUND_WORKER_MESSAGE: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        backgroundWorkerId: zod_1.z.string(),
        data: exports.BackgroundWorkerClientMessages,
    }),
};
exports.UncaughtExceptionMessage = zod_1.z.object({
    version: zod_1.z.literal("v1").default("v1"),
    error: zod_1.z.object({
        name: zod_1.z.string(),
        message: zod_1.z.string(),
        stack: zod_1.z.string().optional(),
    }),
    origin: zod_1.z.enum(["uncaughtException", "unhandledRejection"]),
});
exports.TaskMetadataFailedToParseData = zod_1.z.object({
    version: zod_1.z.literal("v1").default("v1"),
    tasks: zod_1.z.unknown(),
    zodIssues: zod_1.z.custom((v) => {
        return Array.isArray(v) && v.every((issue) => typeof issue === "object" && "message" in issue);
    }),
});
exports.indexerToWorkerMessages = {
    INDEX_COMPLETE: zod_1.z.object({
        version: zod_1.z.literal("v1").default("v1"),
        manifest: build_js_1.WorkerManifest,
        importErrors: build_js_1.ImportTaskFileErrors,
    }),
    TASKS_FAILED_TO_PARSE: exports.TaskMetadataFailedToParseData,
    UNCAUGHT_EXCEPTION: exports.UncaughtExceptionMessage,
};
exports.ExecutorToWorkerMessageCatalog = {
    TASK_RUN_COMPLETED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            execution: common_js_1.TaskRunExecution,
            result: common_js_1.TaskRunExecutionResult,
        }),
    },
    TASK_HEARTBEAT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            id: zod_1.z.string(),
        }),
    },
    READY_TO_DISPOSE: {
        message: zod_1.z.undefined(),
    },
    WAIT_FOR_DURATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            ms: zod_1.z.number(),
            now: zod_1.z.number(),
            waitThresholdInMs: zod_1.z.number(),
        }),
    },
    WAIT_FOR_TASK: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            friendlyId: zod_1.z.string(),
        }),
    },
    WAIT_FOR_BATCH: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            batchFriendlyId: zod_1.z.string(),
            runFriendlyIds: zod_1.z.string().array(),
        }),
    },
    UNCAUGHT_EXCEPTION: {
        message: exports.UncaughtExceptionMessage,
    },
};
exports.WorkerToExecutorMessageCatalog = {
    EXECUTE_TASK_RUN: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            execution: common_js_1.TaskRunExecution,
            traceContext: zod_1.z.record(zod_1.z.unknown()),
            metadata: exports.ServerBackgroundWorker,
        }),
    },
    TASK_RUN_COMPLETED_NOTIFICATION: {
        message: zod_1.z.discriminatedUnion("version", [
            zod_1.z.object({
                version: zod_1.z.literal("v1"),
                completion: common_js_1.TaskRunExecutionResult,
                execution: common_js_1.TaskRunExecution,
            }),
            zod_1.z.object({
                version: zod_1.z.literal("v2"),
                completion: common_js_1.TaskRunExecutionResult,
            }),
        ]),
    },
    WAIT_COMPLETED_NOTIFICATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
        }),
    },
    FLUSH: {
        message: zod_1.z.object({
            timeoutInMs: zod_1.z.number(),
        }),
        callback: zod_1.z.void(),
    },
};
exports.ProviderToPlatformMessages = {
    LOG: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            data: zod_1.z.string(),
        }),
    },
    LOG_WITH_ACK: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            data: zod_1.z.string(),
        }),
        callback: zod_1.z.object({
            status: zod_1.z.literal("ok"),
        }),
    },
    WORKER_CRASHED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            reason: zod_1.z.string().optional(),
            exitCode: zod_1.z.number().optional(),
            message: zod_1.z.string().optional(),
            logs: zod_1.z.string().optional(),
            overrideCompletion: zod_1.z.boolean().optional(),
        }),
    },
    INDEXING_FAILED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            deploymentId: zod_1.z.string(),
            error: zod_1.z.object({
                name: zod_1.z.string(),
                message: zod_1.z.string(),
                stack: zod_1.z.string().optional(),
                stderr: zod_1.z.string().optional(),
            }),
            overrideCompletion: zod_1.z.boolean().optional(),
        }),
    },
};
exports.PlatformToProviderMessages = {
    INDEX: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            imageTag: zod_1.z.string(),
            shortCode: zod_1.z.string(),
            apiKey: zod_1.z.string(),
            apiUrl: zod_1.z.string(),
            // identifiers
            envId: zod_1.z.string(),
            envType: schemas_js_1.EnvironmentType,
            orgId: zod_1.z.string(),
            projectId: zod_1.z.string(),
            deploymentId: zod_1.z.string(),
        }),
        callback: ackCallbackResult,
    },
    RESTORE: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            type: zod_1.z.enum(["DOCKER", "KUBERNETES"]),
            location: zod_1.z.string(),
            reason: zod_1.z.string().optional(),
            imageRef: zod_1.z.string(),
            attemptNumber: zod_1.z.number().optional(),
            machine: common_js_1.MachinePreset,
            // identifiers
            checkpointId: zod_1.z.string(),
            envId: zod_1.z.string(),
            envType: schemas_js_1.EnvironmentType,
            orgId: zod_1.z.string(),
            projectId: zod_1.z.string(),
            runId: zod_1.z.string(),
        }),
    },
    PRE_PULL_DEPLOYMENT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            imageRef: zod_1.z.string(),
            shortCode: zod_1.z.string(),
            // identifiers
            envId: zod_1.z.string(),
            envType: schemas_js_1.EnvironmentType,
            orgId: zod_1.z.string(),
            projectId: zod_1.z.string(),
            deploymentId: zod_1.z.string(),
        }),
    },
};
const CreateWorkerMessage = zod_1.z.object({
    projectRef: zod_1.z.string(),
    envId: zod_1.z.string(),
    deploymentId: zod_1.z.string(),
    metadata: zod_1.z.object({
        cliPackageVersion: zod_1.z.string().optional(),
        contentHash: zod_1.z.string(),
        packageVersion: zod_1.z.string(),
        tasks: resources_js_1.TaskResource.array(),
    }),
});
exports.CoordinatorToPlatformMessages = {
    LOG: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            metadata: zod_1.z.any(),
            text: zod_1.z.string(),
        }),
    },
    CREATE_WORKER: {
        message: zod_1.z.discriminatedUnion("version", [
            CreateWorkerMessage.extend({
                version: zod_1.z.literal("v1"),
            }),
            CreateWorkerMessage.extend({
                version: zod_1.z.literal("v2"),
                supportsLazyAttempts: zod_1.z.boolean(),
            }),
        ]),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
            }),
        ]),
    },
    CREATE_TASK_RUN_ATTEMPT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            envId: zod_1.z.string(),
        }),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
                reason: zod_1.z.string().optional(),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
                executionPayload: schemas_js_1.ProdTaskRunExecutionPayload,
            }),
        ]),
    },
    // Deprecated: Only workers without lazy attempt support will use this
    READY_FOR_EXECUTION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            totalCompletions: zod_1.z.number(),
        }),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
                payload: schemas_js_1.ProdTaskRunExecutionPayload,
            }),
        ]),
    },
    READY_FOR_LAZY_ATTEMPT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            envId: zod_1.z.string(),
            totalCompletions: zod_1.z.number(),
        }),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
                reason: zod_1.z.string().optional(),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
                lazyPayload: schemas_js_1.TaskRunExecutionLazyAttemptPayload,
            }),
        ]),
    },
    READY_FOR_RESUME: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptFriendlyId: zod_1.z.string(),
            type: schemas_js_1.WaitReason,
        }),
    },
    TASK_RUN_COMPLETED: {
        message: zod_1.z.object({
            version: zod_1.z.enum(["v1", "v2"]).default("v1"),
            execution: schemas_js_1.ProdTaskRunExecution,
            completion: common_js_1.TaskRunExecutionResult,
            checkpoint: zod_1.z
                .object({
                docker: zod_1.z.boolean(),
                location: zod_1.z.string(),
            })
                .optional(),
        }),
    },
    TASK_RUN_FAILED_TO_RUN: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            completion: common_js_1.TaskRunFailedExecutionResult,
        }),
    },
    TASK_HEARTBEAT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptFriendlyId: zod_1.z.string(),
        }),
    },
    TASK_RUN_HEARTBEAT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
        }),
    },
    CHECKPOINT_CREATED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptFriendlyId: zod_1.z.string(),
            docker: zod_1.z.boolean(),
            location: zod_1.z.string(),
            reason: zod_1.z.discriminatedUnion("type", [
                zod_1.z.object({
                    type: zod_1.z.literal("WAIT_FOR_DURATION"),
                    ms: zod_1.z.number(),
                    now: zod_1.z.number(),
                }),
                zod_1.z.object({
                    type: zod_1.z.literal("WAIT_FOR_BATCH"),
                    batchFriendlyId: zod_1.z.string(),
                    runFriendlyIds: zod_1.z.string().array(),
                }),
                zod_1.z.object({
                    type: zod_1.z.literal("WAIT_FOR_TASK"),
                    friendlyId: zod_1.z.string(),
                }),
                zod_1.z.object({
                    type: zod_1.z.literal("RETRYING_AFTER_FAILURE"),
                    attemptNumber: zod_1.z.number(),
                }),
            ]),
        }),
        callback: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            keepRunAlive: zod_1.z.boolean(),
        }),
    },
    INDEXING_FAILED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            deploymentId: zod_1.z.string(),
            error: zod_1.z.object({
                name: zod_1.z.string(),
                message: zod_1.z.string(),
                stack: zod_1.z.string().optional(),
                stderr: zod_1.z.string().optional(),
            }),
        }),
    },
    RUN_CRASHED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            error: zod_1.z.object({
                name: zod_1.z.string(),
                message: zod_1.z.string(),
                stack: zod_1.z.string().optional(),
            }),
        }),
    },
};
exports.PlatformToCoordinatorMessages = {
    /** @deprecated use RESUME_AFTER_DEPENDENCY_WITH_ACK instead  */
    RESUME_AFTER_DEPENDENCY: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            attemptId: zod_1.z.string(),
            attemptFriendlyId: zod_1.z.string(),
            completions: common_js_1.TaskRunExecutionResult.array(),
            executions: common_js_1.TaskRunExecution.array(),
        }),
    },
    RESUME_AFTER_DEPENDENCY_WITH_ACK: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            attemptId: zod_1.z.string(),
            attemptFriendlyId: zod_1.z.string(),
            completions: common_js_1.TaskRunExecutionResult.array(),
            executions: common_js_1.TaskRunExecution.array(),
        }),
        callback: ackCallbackResult,
    },
    RESUME_AFTER_DURATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptId: zod_1.z.string(),
            attemptFriendlyId: zod_1.z.string(),
        }),
    },
    REQUEST_ATTEMPT_CANCELLATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptId: zod_1.z.string(),
            attemptFriendlyId: zod_1.z.string(),
        }),
    },
    REQUEST_RUN_CANCELLATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            delayInMs: zod_1.z.number().optional(),
        }),
    },
    READY_FOR_RETRY: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
        }),
    },
    DYNAMIC_CONFIG: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            checkpointThresholdInMs: zod_1.z.number(),
        }),
    },
};
exports.ClientToSharedQueueMessages = {
    READY_FOR_TASKS: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            backgroundWorkerId: zod_1.z.string(),
        }),
    },
    BACKGROUND_WORKER_DEPRECATED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            backgroundWorkerId: zod_1.z.string(),
        }),
    },
    BACKGROUND_WORKER_MESSAGE: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            backgroundWorkerId: zod_1.z.string(),
            data: exports.BackgroundWorkerClientMessages,
        }),
    },
};
exports.SharedQueueToClientMessages = {
    SERVER_READY: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            id: zod_1.z.string(),
        }),
    },
    BACKGROUND_WORKER_MESSAGE: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            backgroundWorkerId: zod_1.z.string(),
            data: exports.BackgroundWorkerServerMessages,
        }),
    },
};
const IndexTasksMessage = zod_1.z.object({
    version: zod_1.z.literal("v1"),
    deploymentId: zod_1.z.string(),
    tasks: resources_js_1.TaskResource.array(),
    packageVersion: zod_1.z.string(),
});
exports.ProdWorkerToCoordinatorMessages = {
    TEST: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
        }),
        callback: zod_1.z.void(),
    },
    INDEX_TASKS: {
        message: zod_1.z.discriminatedUnion("version", [
            IndexTasksMessage.extend({
                version: zod_1.z.literal("v1"),
            }),
            IndexTasksMessage.extend({
                version: zod_1.z.literal("v2"),
                supportsLazyAttempts: zod_1.z.boolean(),
            }),
        ]),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
            }),
        ]),
    },
    // Deprecated: Only workers without lazy attempt support will use this
    READY_FOR_EXECUTION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            totalCompletions: zod_1.z.number(),
        }),
    },
    READY_FOR_LAZY_ATTEMPT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
            totalCompletions: zod_1.z.number(),
        }),
    },
    READY_FOR_RESUME: {
        message: zod_1.z.discriminatedUnion("version", [
            zod_1.z.object({
                version: zod_1.z.literal("v1"),
                attemptFriendlyId: zod_1.z.string(),
                type: schemas_js_1.WaitReason,
            }),
            zod_1.z.object({
                version: zod_1.z.literal("v2"),
                attemptFriendlyId: zod_1.z.string(),
                attemptNumber: zod_1.z.number(),
                type: schemas_js_1.WaitReason,
            }),
        ]),
    },
    READY_FOR_CHECKPOINT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
        }),
    },
    CANCEL_CHECKPOINT: {
        message: zod_1.z
            .discriminatedUnion("version", [
            zod_1.z.object({
                version: zod_1.z.literal("v1"),
            }),
            zod_1.z.object({
                version: zod_1.z.literal("v2"),
                reason: schemas_js_1.WaitReason.optional(),
            }),
        ])
            .default({ version: "v1" }),
        callback: zod_1.z.object({
            version: zod_1.z.literal("v2").default("v2"),
            checkpointCanceled: zod_1.z.boolean(),
            reason: schemas_js_1.WaitReason.optional(),
        }),
    },
    TASK_HEARTBEAT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptFriendlyId: zod_1.z.string(),
        }),
    },
    TASK_RUN_HEARTBEAT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
        }),
    },
    TASK_RUN_COMPLETED: {
        message: zod_1.z.object({
            version: zod_1.z.enum(["v1", "v2"]).default("v1"),
            execution: schemas_js_1.ProdTaskRunExecution,
            completion: common_js_1.TaskRunExecutionResult,
        }),
        callback: zod_1.z.object({
            willCheckpointAndRestore: zod_1.z.boolean(),
            shouldExit: zod_1.z.boolean(),
        }),
    },
    TASK_RUN_FAILED_TO_RUN: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            completion: common_js_1.TaskRunFailedExecutionResult,
        }),
    },
    WAIT_FOR_DURATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            ms: zod_1.z.number(),
            now: zod_1.z.number(),
            attemptFriendlyId: zod_1.z.string(),
        }),
        callback: zod_1.z.object({
            willCheckpointAndRestore: zod_1.z.boolean(),
        }),
    },
    WAIT_FOR_TASK: {
        message: zod_1.z.object({
            version: zod_1.z.enum(["v1", "v2"]).default("v1"),
            friendlyId: zod_1.z.string(),
            // This is the attempt that is waiting
            attemptFriendlyId: zod_1.z.string(),
        }),
        callback: zod_1.z.object({
            willCheckpointAndRestore: zod_1.z.boolean(),
        }),
    },
    WAIT_FOR_BATCH: {
        message: zod_1.z.object({
            version: zod_1.z.enum(["v1", "v2"]).default("v1"),
            batchFriendlyId: zod_1.z.string(),
            runFriendlyIds: zod_1.z.string().array(),
            // This is the attempt that is waiting
            attemptFriendlyId: zod_1.z.string(),
        }),
        callback: zod_1.z.object({
            willCheckpointAndRestore: zod_1.z.boolean(),
        }),
    },
    INDEXING_FAILED: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            deploymentId: zod_1.z.string(),
            error: zod_1.z.object({
                name: zod_1.z.string(),
                message: zod_1.z.string(),
                stack: zod_1.z.string().optional(),
                stderr: zod_1.z.string().optional(),
            }),
        }),
    },
    CREATE_TASK_RUN_ATTEMPT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
        }),
        callback: zod_1.z.discriminatedUnion("success", [
            zod_1.z.object({
                success: zod_1.z.literal(false),
                reason: zod_1.z.string().optional(),
            }),
            zod_1.z.object({
                success: zod_1.z.literal(true),
                executionPayload: schemas_js_1.ProdTaskRunExecutionPayload,
            }),
        ]),
    },
    UNRECOVERABLE_ERROR: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            error: zod_1.z.object({
                name: zod_1.z.string(),
                message: zod_1.z.string(),
                stack: zod_1.z.string().optional(),
            }),
        }),
    },
    SET_STATE: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptFriendlyId: zod_1.z.string().optional(),
            attemptNumber: zod_1.z.string().optional(),
        }),
    },
};
// TODO: The coordinator can only safely use v1 worker messages, higher versions will need a new flag, e.g. SUPPORTS_VERSIONED_MESSAGES
exports.CoordinatorToProdWorkerMessages = {
    RESUME_AFTER_DEPENDENCY: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptId: zod_1.z.string(),
            completions: common_js_1.TaskRunExecutionResult.array(),
            executions: common_js_1.TaskRunExecution.array(),
        }),
    },
    RESUME_AFTER_DURATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptId: zod_1.z.string(),
        }),
    },
    // Deprecated: Only workers without lazy attempt support will use this
    EXECUTE_TASK_RUN: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            executionPayload: schemas_js_1.ProdTaskRunExecutionPayload,
        }),
    },
    EXECUTE_TASK_RUN_LAZY_ATTEMPT: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            lazyPayload: schemas_js_1.TaskRunExecutionLazyAttemptPayload,
        }),
    },
    REQUEST_ATTEMPT_CANCELLATION: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            attemptId: zod_1.z.string(),
        }),
    },
    REQUEST_EXIT: {
        message: zod_1.z.discriminatedUnion("version", [
            zod_1.z.object({
                version: zod_1.z.literal("v1"),
            }),
            zod_1.z.object({
                version: zod_1.z.literal("v2"),
                delayInMs: zod_1.z.number().optional(),
            }),
        ]),
    },
    READY_FOR_RETRY: {
        message: zod_1.z.object({
            version: zod_1.z.literal("v1").default("v1"),
            runId: zod_1.z.string(),
        }),
    },
};
exports.ProdWorkerSocketData = zod_1.z.object({
    contentHash: zod_1.z.string(),
    projectRef: zod_1.z.string(),
    envId: zod_1.z.string(),
    runId: zod_1.z.string(),
    attemptFriendlyId: zod_1.z.string().optional(),
    attemptNumber: zod_1.z.string().optional(),
    podName: zod_1.z.string(),
    deploymentId: zod_1.z.string(),
    deploymentVersion: zod_1.z.string(),
    requiresCheckpointResumeWithMessage: zod_1.z.string().optional(),
});
exports.CoordinatorSocketData = zod_1.z.object({
    supportsDynamicConfig: zod_1.z.string().optional(),
});
//# sourceMappingURL=messages.js.map