"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializedError = exports.BatchTaskRunExecutionResult = exports.TaskRunExecutionResult = exports.TaskRunSuccessfulExecutionResult = exports.TaskRunFailedExecutionResult = exports.TaskRunExecutionUsage = exports.TaskRunExecutionRetry = exports.TaskRunContext = exports.TaskRunExecution = exports.TaskRunExecutionBatch = exports.TaskRunExecutionQueue = exports.TaskRunExecutionProject = exports.TaskRunExecutionOrganization = exports.TaskRunExecutionEnvironment = exports.TaskRunExecutionAttempt = exports.TaskRunExecutionTask = exports.TaskRun = exports.TaskRunError = exports.TaskRunInternalError = exports.TaskRunErrorCodes = exports.TaskRunStringError = exports.TaskRunCustomErrorObject = exports.TaskRunBuiltInError = exports.MachinePreset = exports.MachineConfig = exports.MachinePresetName = exports.MachineMemory = exports.MachineCpu = void 0;
const zod_1 = require("zod");
// Defaults to 0.5
exports.MachineCpu = zod_1.z.union([
    zod_1.z.literal(0.25),
    zod_1.z.literal(0.5),
    zod_1.z.literal(1),
    zod_1.z.literal(2),
    zod_1.z.literal(4),
]);
// Defaults to 1
exports.MachineMemory = zod_1.z.union([
    zod_1.z.literal(0.25),
    zod_1.z.literal(0.5),
    zod_1.z.literal(1),
    zod_1.z.literal(2),
    zod_1.z.literal(4),
    zod_1.z.literal(8),
]);
// Default is small-1x
exports.MachinePresetName = zod_1.z.enum([
    "micro",
    "small-1x",
    "small-2x",
    "medium-1x",
    "medium-2x",
    "large-1x",
    "large-2x",
]);
exports.MachineConfig = zod_1.z.object({
    cpu: exports.MachineCpu.optional(),
    memory: exports.MachineMemory.optional(),
    preset: exports.MachinePresetName.optional(),
});
exports.MachinePreset = zod_1.z.object({
    name: exports.MachinePresetName,
    cpu: zod_1.z.number(),
    memory: zod_1.z.number(),
    centsPerMs: zod_1.z.number(),
});
exports.TaskRunBuiltInError = zod_1.z.object({
    type: zod_1.z.literal("BUILT_IN_ERROR"),
    name: zod_1.z.string(),
    message: zod_1.z.string(),
    stackTrace: zod_1.z.string(),
});
exports.TaskRunCustomErrorObject = zod_1.z.object({
    type: zod_1.z.literal("CUSTOM_ERROR"),
    raw: zod_1.z.string(),
});
exports.TaskRunStringError = zod_1.z.object({
    type: zod_1.z.literal("STRING_ERROR"),
    raw: zod_1.z.string(),
});
exports.TaskRunErrorCodes = {
    COULD_NOT_FIND_EXECUTOR: "COULD_NOT_FIND_EXECUTOR",
    COULD_NOT_FIND_TASK: "COULD_NOT_FIND_TASK",
    COULD_NOT_IMPORT_TASK: "COULD_NOT_IMPORT_TASK",
    CONFIGURED_INCORRECTLY: "CONFIGURED_INCORRECTLY",
    TASK_ALREADY_RUNNING: "TASK_ALREADY_RUNNING",
    TASK_EXECUTION_FAILED: "TASK_EXECUTION_FAILED",
    TASK_EXECUTION_ABORTED: "TASK_EXECUTION_ABORTED",
    TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE: "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE",
    TASK_PROCESS_SIGKILL_TIMEOUT: "TASK_PROCESS_SIGKILL_TIMEOUT",
    TASK_RUN_CANCELLED: "TASK_RUN_CANCELLED",
    TASK_OUTPUT_ERROR: "TASK_OUTPUT_ERROR",
    HANDLE_ERROR_ERROR: "HANDLE_ERROR_ERROR",
    GRACEFUL_EXIT_TIMEOUT: "GRACEFUL_EXIT_TIMEOUT",
    TASK_RUN_CRASHED: "TASK_RUN_CRASHED",
};
exports.TaskRunInternalError = zod_1.z.object({
    type: zod_1.z.literal("INTERNAL_ERROR"),
    code: zod_1.z.enum([
        "COULD_NOT_FIND_EXECUTOR",
        "COULD_NOT_FIND_TASK",
        "COULD_NOT_IMPORT_TASK",
        "CONFIGURED_INCORRECTLY",
        "TASK_ALREADY_RUNNING",
        "TASK_EXECUTION_FAILED",
        "TASK_EXECUTION_ABORTED",
        "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE",
        "TASK_PROCESS_SIGKILL_TIMEOUT",
        "TASK_RUN_CANCELLED",
        "TASK_OUTPUT_ERROR",
        "HANDLE_ERROR_ERROR",
        "GRACEFUL_EXIT_TIMEOUT",
        "TASK_RUN_HEARTBEAT_TIMEOUT",
        "TASK_RUN_CRASHED",
    ]),
    message: zod_1.z.string().optional(),
    stackTrace: zod_1.z.string().optional(),
});
exports.TaskRunError = zod_1.z.discriminatedUnion("type", [
    exports.TaskRunBuiltInError,
    exports.TaskRunCustomErrorObject,
    exports.TaskRunStringError,
    exports.TaskRunInternalError,
]);
exports.TaskRun = zod_1.z.object({
    id: zod_1.z.string(),
    payload: zod_1.z.string(),
    payloadType: zod_1.z.string(),
    context: zod_1.z.any(),
    tags: zod_1.z.array(zod_1.z.string()),
    isTest: zod_1.z.boolean().default(false),
    createdAt: zod_1.z.coerce.date(),
    startedAt: zod_1.z.coerce.date().default(() => new Date()),
    idempotencyKey: zod_1.z.string().optional(),
    maxAttempts: zod_1.z.number().optional(),
    durationMs: zod_1.z.number().default(0),
    costInCents: zod_1.z.number().default(0),
    baseCostInCents: zod_1.z.number().default(0),
    version: zod_1.z.string().optional(),
});
exports.TaskRunExecutionTask = zod_1.z.object({
    id: zod_1.z.string(),
    filePath: zod_1.z.string(),
    exportName: zod_1.z.string(),
});
exports.TaskRunExecutionAttempt = zod_1.z.object({
    id: zod_1.z.string(),
    number: zod_1.z.number(),
    startedAt: zod_1.z.coerce.date(),
    backgroundWorkerId: zod_1.z.string(),
    backgroundWorkerTaskId: zod_1.z.string(),
    status: zod_1.z.string(),
});
exports.TaskRunExecutionEnvironment = zod_1.z.object({
    id: zod_1.z.string(),
    slug: zod_1.z.string(),
    type: zod_1.z.enum(["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]),
});
exports.TaskRunExecutionOrganization = zod_1.z.object({
    id: zod_1.z.string(),
    slug: zod_1.z.string(),
    name: zod_1.z.string(),
});
exports.TaskRunExecutionProject = zod_1.z.object({
    id: zod_1.z.string(),
    ref: zod_1.z.string(),
    slug: zod_1.z.string(),
    name: zod_1.z.string(),
});
exports.TaskRunExecutionQueue = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
});
exports.TaskRunExecutionBatch = zod_1.z.object({
    id: zod_1.z.string(),
});
exports.TaskRunExecution = zod_1.z.object({
    task: exports.TaskRunExecutionTask,
    attempt: exports.TaskRunExecutionAttempt,
    run: exports.TaskRun,
    queue: exports.TaskRunExecutionQueue,
    environment: exports.TaskRunExecutionEnvironment,
    organization: exports.TaskRunExecutionOrganization,
    project: exports.TaskRunExecutionProject,
    batch: exports.TaskRunExecutionBatch.optional(),
    machine: exports.MachinePreset.optional(),
});
exports.TaskRunContext = zod_1.z.object({
    task: exports.TaskRunExecutionTask,
    attempt: exports.TaskRunExecutionAttempt.omit({
        backgroundWorkerId: true,
        backgroundWorkerTaskId: true,
    }),
    run: exports.TaskRun.omit({ payload: true, payloadType: true }),
    queue: exports.TaskRunExecutionQueue,
    environment: exports.TaskRunExecutionEnvironment,
    organization: exports.TaskRunExecutionOrganization,
    project: exports.TaskRunExecutionProject,
    batch: exports.TaskRunExecutionBatch.optional(),
    machine: exports.MachinePreset.optional(),
});
exports.TaskRunExecutionRetry = zod_1.z.object({
    timestamp: zod_1.z.number(),
    delay: zod_1.z.number(),
    error: zod_1.z.unknown().optional(),
});
exports.TaskRunExecutionUsage = zod_1.z.object({
    durationMs: zod_1.z.number(),
});
exports.TaskRunFailedExecutionResult = zod_1.z.object({
    ok: zod_1.z.literal(false),
    id: zod_1.z.string(),
    error: exports.TaskRunError,
    retry: exports.TaskRunExecutionRetry.optional(),
    skippedRetrying: zod_1.z.boolean().optional(),
    usage: exports.TaskRunExecutionUsage.optional(),
});
exports.TaskRunSuccessfulExecutionResult = zod_1.z.object({
    ok: zod_1.z.literal(true),
    id: zod_1.z.string(),
    output: zod_1.z.string().optional(),
    outputType: zod_1.z.string(),
    usage: exports.TaskRunExecutionUsage.optional(),
});
exports.TaskRunExecutionResult = zod_1.z.discriminatedUnion("ok", [
    exports.TaskRunSuccessfulExecutionResult,
    exports.TaskRunFailedExecutionResult,
]);
exports.BatchTaskRunExecutionResult = zod_1.z.object({
    id: zod_1.z.string(),
    items: exports.TaskRunExecutionResult.array(),
});
exports.SerializedError = zod_1.z.object({
    message: zod_1.z.string(),
    name: zod_1.z.string().optional(),
    stackTrace: zod_1.z.string().optional(),
});
//# sourceMappingURL=common.js.map