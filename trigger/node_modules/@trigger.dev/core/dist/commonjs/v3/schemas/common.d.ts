import { z } from "zod";
export declare const MachineCpu: z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>;
export type MachineCpu = z.infer<typeof MachineCpu>;
export declare const MachineMemory: z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>;
export type MachineMemory = z.infer<typeof MachineMemory>;
export declare const MachinePresetName: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
export type MachinePresetName = z.infer<typeof MachinePresetName>;
export declare const MachineConfig: z.ZodObject<{
    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
}, "strip", z.ZodTypeAny, {
    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
}, {
    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
}>;
export type MachineConfig = z.infer<typeof MachineConfig>;
export declare const MachinePreset: z.ZodObject<{
    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
    cpu: z.ZodNumber;
    memory: z.ZodNumber;
    centsPerMs: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
    cpu: number;
    memory: number;
    centsPerMs: number;
}, {
    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
    cpu: number;
    memory: number;
    centsPerMs: number;
}>;
export type MachinePreset = z.infer<typeof MachinePreset>;
export declare const TaskRunBuiltInError: z.ZodObject<{
    type: z.ZodLiteral<"BUILT_IN_ERROR">;
    name: z.ZodString;
    message: z.ZodString;
    stackTrace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}>;
export type TaskRunBuiltInError = z.infer<typeof TaskRunBuiltInError>;
export declare const TaskRunCustomErrorObject: z.ZodObject<{
    type: z.ZodLiteral<"CUSTOM_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CUSTOM_ERROR";
    raw: string;
}, {
    type: "CUSTOM_ERROR";
    raw: string;
}>;
export type TaskRunCustomErrorObject = z.infer<typeof TaskRunCustomErrorObject>;
export declare const TaskRunStringError: z.ZodObject<{
    type: z.ZodLiteral<"STRING_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "STRING_ERROR";
    raw: string;
}, {
    type: "STRING_ERROR";
    raw: string;
}>;
export type TaskRunStringError = z.infer<typeof TaskRunStringError>;
export declare const TaskRunErrorCodes: {
    readonly COULD_NOT_FIND_EXECUTOR: "COULD_NOT_FIND_EXECUTOR";
    readonly COULD_NOT_FIND_TASK: "COULD_NOT_FIND_TASK";
    readonly COULD_NOT_IMPORT_TASK: "COULD_NOT_IMPORT_TASK";
    readonly CONFIGURED_INCORRECTLY: "CONFIGURED_INCORRECTLY";
    readonly TASK_ALREADY_RUNNING: "TASK_ALREADY_RUNNING";
    readonly TASK_EXECUTION_FAILED: "TASK_EXECUTION_FAILED";
    readonly TASK_EXECUTION_ABORTED: "TASK_EXECUTION_ABORTED";
    readonly TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE: "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE";
    readonly TASK_PROCESS_SIGKILL_TIMEOUT: "TASK_PROCESS_SIGKILL_TIMEOUT";
    readonly TASK_RUN_CANCELLED: "TASK_RUN_CANCELLED";
    readonly TASK_OUTPUT_ERROR: "TASK_OUTPUT_ERROR";
    readonly HANDLE_ERROR_ERROR: "HANDLE_ERROR_ERROR";
    readonly GRACEFUL_EXIT_TIMEOUT: "GRACEFUL_EXIT_TIMEOUT";
    readonly TASK_RUN_CRASHED: "TASK_RUN_CRASHED";
};
export declare const TaskRunInternalError: z.ZodObject<{
    type: z.ZodLiteral<"INTERNAL_ERROR">;
    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
    message: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}>;
export type TaskRunInternalError = z.infer<typeof TaskRunInternalError>;
export declare const TaskRunError: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"BUILT_IN_ERROR">;
    name: z.ZodString;
    message: z.ZodString;
    stackTrace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"CUSTOM_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CUSTOM_ERROR";
    raw: string;
}, {
    type: "CUSTOM_ERROR";
    raw: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"STRING_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "STRING_ERROR";
    raw: string;
}, {
    type: "STRING_ERROR";
    raw: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"INTERNAL_ERROR">;
    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
    message: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}>]>;
export type TaskRunError = z.infer<typeof TaskRunError>;
export declare const TaskRun: z.ZodObject<{
    id: z.ZodString;
    payload: z.ZodString;
    payloadType: z.ZodString;
    context: z.ZodAny;
    tags: z.ZodArray<z.ZodString, "many">;
    isTest: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    startedAt: z.ZodDefault<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    maxAttempts: z.ZodOptional<z.ZodNumber>;
    durationMs: z.ZodDefault<z.ZodNumber>;
    costInCents: z.ZodDefault<z.ZodNumber>;
    baseCostInCents: z.ZodDefault<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    payload: string;
    id: string;
    startedAt: Date;
    payloadType: string;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    context?: any;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    version?: string | undefined;
}, {
    payload: string;
    id: string;
    payloadType: string;
    createdAt: Date;
    tags: string[];
    context?: any;
    isTest?: boolean | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    durationMs?: number | undefined;
    costInCents?: number | undefined;
    baseCostInCents?: number | undefined;
    version?: string | undefined;
}>;
export type TaskRun = z.infer<typeof TaskRun>;
export declare const TaskRunExecutionTask: z.ZodObject<{
    id: z.ZodString;
    filePath: z.ZodString;
    exportName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    exportName: string;
}, {
    id: string;
    filePath: string;
    exportName: string;
}>;
export type TaskRunExecutionTask = z.infer<typeof TaskRunExecutionTask>;
export declare const TaskRunExecutionAttempt: z.ZodObject<{
    id: z.ZodString;
    number: z.ZodNumber;
    startedAt: z.ZodDate;
    backgroundWorkerId: z.ZodString;
    backgroundWorkerTaskId: z.ZodString;
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    number: number;
    status: string;
    id: string;
    startedAt: Date;
    backgroundWorkerId: string;
    backgroundWorkerTaskId: string;
}, {
    number: number;
    status: string;
    id: string;
    startedAt: Date;
    backgroundWorkerId: string;
    backgroundWorkerTaskId: string;
}>;
export type TaskRunExecutionAttempt = z.infer<typeof TaskRunExecutionAttempt>;
export declare const TaskRunExecutionEnvironment: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodString;
    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
}, "strip", z.ZodTypeAny, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
}, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
}>;
export type TaskRunExecutionEnvironment = z.infer<typeof TaskRunExecutionEnvironment>;
export declare const TaskRunExecutionOrganization: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
}, {
    name: string;
    id: string;
    slug: string;
}>;
export type TaskRunExecutionOrganization = z.infer<typeof TaskRunExecutionOrganization>;
export declare const TaskRunExecutionProject: z.ZodObject<{
    id: z.ZodString;
    ref: z.ZodString;
    slug: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
    ref: string;
}, {
    name: string;
    id: string;
    slug: string;
    ref: string;
}>;
export type TaskRunExecutionProject = z.infer<typeof TaskRunExecutionProject>;
export declare const TaskRunExecutionQueue: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
}, {
    name: string;
    id: string;
}>;
export type TaskRunExecutionQueue = z.infer<typeof TaskRunExecutionQueue>;
export declare const TaskRunExecutionBatch: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export declare const TaskRunExecution: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
    }, {
        id: string;
        filePath: string;
        exportName: string;
    }>;
    attempt: z.ZodObject<{
        id: z.ZodString;
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        context: z.ZodAny;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        durationMs: z.ZodDefault<z.ZodNumber>;
        costInCents: z.ZodDefault<z.ZodNumber>;
        baseCostInCents: z.ZodDefault<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        payload: string;
        id: string;
        startedAt: Date;
        payloadType: string;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
    }, {
        payload: string;
        id: string;
        payloadType: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
        version?: string | undefined;
    }>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    run: {
        payload: string;
        id: string;
        startedAt: Date;
        payloadType: string;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    queue: {
        name: string;
        id: string;
    };
    batch?: {
        id: string;
    } | undefined;
    machine?: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    } | undefined;
}, {
    run: {
        payload: string;
        id: string;
        payloadType: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
        version?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    queue: {
        name: string;
        id: string;
    };
    batch?: {
        id: string;
    } | undefined;
    machine?: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    } | undefined;
}>;
export type TaskRunExecution = z.infer<typeof TaskRunExecution>;
export declare const TaskRunContext: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
    }, {
        id: string;
        filePath: string;
        exportName: string;
    }>;
    attempt: z.ZodObject<Omit<{
        id: z.ZodString;
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "backgroundWorkerId" | "backgroundWorkerTaskId">, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    }>;
    run: z.ZodObject<Omit<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        context: z.ZodAny;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        durationMs: z.ZodDefault<z.ZodNumber>;
        costInCents: z.ZodDefault<z.ZodNumber>;
        baseCostInCents: z.ZodDefault<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
    }, "payload" | "payloadType">, "strip", z.ZodTypeAny, {
        id: string;
        startedAt: Date;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        version?: string | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
    }, {
        id: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        version?: string | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        isTest?: boolean | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
    }>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    run: {
        id: string;
        startedAt: Date;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        version?: string | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    };
    queue: {
        name: string;
        id: string;
    };
    batch?: {
        id: string;
    } | undefined;
    machine?: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    } | undefined;
}, {
    run: {
        id: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        version?: string | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        isTest?: boolean | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    };
    queue: {
        name: string;
        id: string;
    };
    batch?: {
        id: string;
    } | undefined;
    machine?: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    } | undefined;
}>;
export type TaskRunContext = z.infer<typeof TaskRunContext>;
export declare const TaskRunExecutionRetry: z.ZodObject<{
    timestamp: z.ZodNumber;
    delay: z.ZodNumber;
    error: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    timestamp: number;
    delay: number;
    error?: unknown;
}, {
    timestamp: number;
    delay: number;
    error?: unknown;
}>;
export type TaskRunExecutionRetry = z.infer<typeof TaskRunExecutionRetry>;
export declare const TaskRunExecutionUsage: z.ZodObject<{
    durationMs: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    durationMs: number;
}, {
    durationMs: number;
}>;
export type TaskRunExecutionUsage = z.infer<typeof TaskRunExecutionUsage>;
export declare const TaskRunFailedExecutionResult: z.ZodObject<{
    ok: z.ZodLiteral<false>;
    id: z.ZodString;
    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"BUILT_IN_ERROR">;
        name: z.ZodString;
        message: z.ZodString;
        stackTrace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"CUSTOM_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CUSTOM_ERROR";
        raw: string;
    }, {
        type: "CUSTOM_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"STRING_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "STRING_ERROR";
        raw: string;
    }, {
        type: "STRING_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"INTERNAL_ERROR">;
        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
        message: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }>]>;
    retry: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodNumber;
        delay: z.ZodNumber;
        error: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }>>;
    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    id: string;
    ok: false;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    id: string;
    ok: false;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}>;
export type TaskRunFailedExecutionResult = z.infer<typeof TaskRunFailedExecutionResult>;
export declare const TaskRunSuccessfulExecutionResult: z.ZodObject<{
    ok: z.ZodLiteral<true>;
    id: z.ZodString;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodString;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    ok: true;
    outputType: string;
    output?: string | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}, {
    id: string;
    ok: true;
    outputType: string;
    output?: string | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}>;
export type TaskRunSuccessfulExecutionResult = z.infer<typeof TaskRunSuccessfulExecutionResult>;
export declare const TaskRunExecutionResult: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    id: z.ZodString;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodString;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    ok: true;
    outputType: string;
    output?: string | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}, {
    id: string;
    ok: true;
    outputType: string;
    output?: string | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    id: z.ZodString;
    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"BUILT_IN_ERROR">;
        name: z.ZodString;
        message: z.ZodString;
        stackTrace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"CUSTOM_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CUSTOM_ERROR";
        raw: string;
    }, {
        type: "CUSTOM_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"STRING_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "STRING_ERROR";
        raw: string;
    }, {
        type: "STRING_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"INTERNAL_ERROR">;
        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
        message: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }>]>;
    retry: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodNumber;
        delay: z.ZodNumber;
        error: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }>>;
    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    id: string;
    ok: false;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    id: string;
    ok: false;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
}>]>;
export type TaskRunExecutionResult = z.infer<typeof TaskRunExecutionResult>;
export declare const BatchTaskRunExecutionResult: z.ZodObject<{
    id: z.ZodString;
    items: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
        ok: z.ZodLiteral<true>;
        id: z.ZodString;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }, {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }>, z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    items: ({
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    } | {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    })[];
}, {
    id: string;
    items: ({
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_RUN_CANCELLED" | "TASK_OUTPUT_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_CRASHED" | "TASK_RUN_HEARTBEAT_TIMEOUT";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        id: string;
        ok: false;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    } | {
        id: string;
        ok: true;
        outputType: string;
        output?: string | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
    })[];
}>;
export type BatchTaskRunExecutionResult = z.infer<typeof BatchTaskRunExecutionResult>;
export declare const SerializedError: z.ZodObject<{
    message: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name?: string | undefined;
    stackTrace?: string | undefined;
}, {
    message: string;
    name?: string | undefined;
    stackTrace?: string | undefined;
}>;
export type SerializedError = z.infer<typeof SerializedError>;
