"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportTaskFileErrors = exports.ImportError = exports.WorkerManifestMessage = exports.WorkerManifest = exports.IndexMessage = exports.BuildManifest = exports.BuildRuntime = exports.BuildTarget = exports.BuildExternal = void 0;
const zod_1 = require("zod");
const config_js_1 = require("./config.js");
const schemas_js_1 = require("./schemas.js");
exports.BuildExternal = zod_1.z.object({
    name: zod_1.z.string(),
    version: zod_1.z.string(),
});
exports.BuildTarget = zod_1.z.enum(["dev", "deploy"]);
exports.BuildRuntime = zod_1.z.enum(["node", "bun"]);
exports.BuildManifest = zod_1.z.object({
    target: exports.BuildTarget,
    packageVersion: zod_1.z.string(),
    cliPackageVersion: zod_1.z.string(),
    contentHash: zod_1.z.string(),
    runtime: exports.BuildRuntime,
    environment: zod_1.z.string(),
    config: config_js_1.ConfigManifest,
    files: zod_1.z.array(schemas_js_1.TaskFile),
    sources: zod_1.z.record(zod_1.z.object({
        contents: zod_1.z.string(),
        contentHash: zod_1.z.string(),
    })),
    outputPath: zod_1.z.string(),
    runWorkerEntryPoint: zod_1.z.string(), // Dev & Deploy has a runWorkerEntryPoint
    runControllerEntryPoint: zod_1.z.string().optional(), // Only deploy has a runControllerEntryPoint
    indexWorkerEntryPoint: zod_1.z.string(), // Dev & Deploy has a indexWorkerEntryPoint
    indexControllerEntryPoint: zod_1.z.string().optional(), // Only deploy has a indexControllerEntryPoint
    loaderEntryPoint: zod_1.z.string().optional(),
    configPath: zod_1.z.string(),
    externals: exports.BuildExternal.array().optional(),
    build: zod_1.z.object({
        env: zod_1.z.record(zod_1.z.string()).optional(),
        commands: zod_1.z.array(zod_1.z.string()).optional(),
    }),
    customConditions: zod_1.z.array(zod_1.z.string()).optional(),
    deploy: zod_1.z.object({
        env: zod_1.z.record(zod_1.z.string()).optional(),
        sync: zod_1.z
            .object({
            env: zod_1.z.record(zod_1.z.string()).optional(),
        })
            .optional(),
    }),
    image: zod_1.z
        .object({
        pkgs: zod_1.z.array(zod_1.z.string()).optional(),
        instructions: zod_1.z.array(zod_1.z.string()).optional(),
    })
        .optional(),
    otelImportHook: zod_1.z
        .object({
        include: zod_1.z.array(zod_1.z.string()).optional(),
        exclude: zod_1.z.array(zod_1.z.string()).optional(),
    })
        .optional(),
});
exports.IndexMessage = zod_1.z.object({
    type: zod_1.z.literal("index"),
    data: zod_1.z.object({
        build: exports.BuildManifest,
    }),
});
exports.WorkerManifest = zod_1.z.object({
    configPath: zod_1.z.string(),
    tasks: schemas_js_1.TaskManifest.array(),
    workerEntryPoint: zod_1.z.string(),
    controllerEntryPoint: zod_1.z.string().optional(),
    loaderEntryPoint: zod_1.z.string().optional(),
    runtime: exports.BuildRuntime,
    customConditions: zod_1.z.array(zod_1.z.string()).optional(),
    otelImportHook: zod_1.z
        .object({
        include: zod_1.z.array(zod_1.z.string()).optional(),
        exclude: zod_1.z.array(zod_1.z.string()).optional(),
    })
        .optional(),
});
exports.WorkerManifestMessage = zod_1.z.object({
    type: zod_1.z.literal("worker-manifest"),
    data: zod_1.z.object({
        manifest: exports.WorkerManifest,
    }),
});
exports.ImportError = zod_1.z.object({
    message: zod_1.z.string(),
    file: zod_1.z.string(),
    stack: zod_1.z.string().optional(),
    name: zod_1.z.string().optional(),
});
exports.ImportTaskFileErrors = zod_1.z.array(exports.ImportError);
//# sourceMappingURL=build.js.map