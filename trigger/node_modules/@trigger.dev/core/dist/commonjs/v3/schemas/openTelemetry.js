"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanMessagingEvent = exports.SpanEvents = exports.SpanEvent = exports.OtherSpanEvent = exports.CancellationSpanEvent = exports.ExceptionSpanEvent = exports.ExceptionEventProperties = void 0;
exports.isExceptionSpanEvent = isExceptionSpanEvent;
exports.isCancellationSpanEvent = isCancellationSpanEvent;
const zod_1 = require("zod");
exports.ExceptionEventProperties = zod_1.z.object({
    type: zod_1.z.string().optional(),
    message: zod_1.z.string().optional(),
    stacktrace: zod_1.z.string().optional(),
});
exports.ExceptionSpanEvent = zod_1.z.object({
    name: zod_1.z.literal("exception"),
    time: zod_1.z.coerce.date(),
    properties: zod_1.z.object({
        exception: exports.ExceptionEventProperties,
    }),
});
exports.CancellationSpanEvent = zod_1.z.object({
    name: zod_1.z.literal("cancellation"),
    time: zod_1.z.coerce.date(),
    properties: zod_1.z.object({
        reason: zod_1.z.string(),
    }),
});
exports.OtherSpanEvent = zod_1.z.object({
    name: zod_1.z.string(),
    time: zod_1.z.coerce.date(),
    properties: zod_1.z.record(zod_1.z.unknown()),
});
exports.SpanEvent = zod_1.z.union([exports.ExceptionSpanEvent, exports.CancellationSpanEvent, exports.OtherSpanEvent]);
exports.SpanEvents = zod_1.z.array(exports.SpanEvent);
function isExceptionSpanEvent(event) {
    return event.name === "exception";
}
function isCancellationSpanEvent(event) {
    return event.name === "cancellation";
}
exports.SpanMessagingEvent = zod_1.z.object({
    system: zod_1.z.string().optional(),
    client_id: zod_1.z.string().optional(),
    operation: zod_1.z.enum(["publish", "create", "receive", "deliver"]),
    message: zod_1.z.any(),
    destination: zod_1.z.string().optional(),
});
//# sourceMappingURL=openTelemetry.js.map