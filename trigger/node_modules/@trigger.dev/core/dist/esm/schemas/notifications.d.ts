import { z } from "zod";
export declare const MISSING_CONNECTION_NOTIFICATION = "dev.trigger.notifications.missingConnection";
export declare const MISSING_CONNECTION_RESOLVED_NOTIFICATION = "dev.trigger.notifications.missingConnectionResolved";
export declare const CommonMissingConnectionNotificationPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }>;
    authorizationUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}, {
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}>;
export declare const MissingDeveloperConnectionNotificationPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }>;
    authorizationUrl: z.ZodString;
    type: z.ZodLiteral<"DEVELOPER">;
}, "strip", z.ZodTypeAny, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}>;
export declare const MissingExternalConnectionNotificationPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }>;
    authorizationUrl: z.ZodString;
    type: z.ZodLiteral<"EXTERNAL">;
    account: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}>;
export declare const MissingConnectionNotificationPayloadSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }>;
    authorizationUrl: z.ZodString;
    type: z.ZodLiteral<"DEVELOPER">;
}, "strip", z.ZodTypeAny, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}>, z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    }>;
    authorizationUrl: z.ZodString;
    type: z.ZodLiteral<"EXTERNAL">;
    account: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
    };
    authorizationUrl: string;
}>]>;
export type MissingConnectionNotificationPayload = z.infer<typeof MissingConnectionNotificationPayloadSchema>;
export declare const CommonMissingConnectionNotificationResolvedPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        integrationIdentifier: z.ZodString;
        integrationAuthMethod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }>;
    expiresAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}, {
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}>;
export declare const MissingDeveloperConnectionResolvedNotificationPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        integrationIdentifier: z.ZodString;
        integrationAuthMethod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }>;
    expiresAt: z.ZodDate;
    type: z.ZodLiteral<"DEVELOPER">;
}, "strip", z.ZodTypeAny, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}>;
export declare const MissingExternalConnectionResolvedNotificationPayloadSchema: z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        integrationIdentifier: z.ZodString;
        integrationAuthMethod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }>;
    expiresAt: z.ZodDate;
    type: z.ZodLiteral<"EXTERNAL">;
    account: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}>;
export declare const MissingConnectionResolvedNotificationPayloadSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        integrationIdentifier: z.ZodString;
        integrationAuthMethod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }>;
    expiresAt: z.ZodDate;
    type: z.ZodLiteral<"DEVELOPER">;
}, "strip", z.ZodTypeAny, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}, {
    type: "DEVELOPER";
    id: string;
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}>, z.ZodObject<{
    id: z.ZodString;
    client: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        scopes: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        integrationIdentifier: z.ZodString;
        integrationAuthMethod: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }, {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    }>;
    expiresAt: z.ZodDate;
    type: z.ZodLiteral<"EXTERNAL">;
    account: z.ZodObject<{
        id: z.ZodString;
        metadata: z.ZodAny;
    }, "strip", z.ZodTypeAny, {
        id: string;
        metadata?: any;
    }, {
        id: string;
        metadata?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}, {
    type: "EXTERNAL";
    id: string;
    account: {
        id: string;
        metadata?: any;
    };
    client: {
        scopes: string[];
        id: string;
        title: string;
        updatedAt: Date;
        createdAt: Date;
        integrationIdentifier: string;
        integrationAuthMethod: string;
    };
    expiresAt: Date;
}>]>;
export type MissingConnectionResolvedNotificationPayload = z.infer<typeof MissingConnectionResolvedNotificationPayloadSchema>;
