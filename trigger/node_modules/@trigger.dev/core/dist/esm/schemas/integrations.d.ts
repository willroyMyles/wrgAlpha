import { z } from "zod";
export declare const ConnectionAuthSchema: z.ZodObject<{
    type: z.ZodEnum<["oauth2", "apiKey"]>;
    accessToken: z.ZodString;
    scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    additionalFields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: "oauth2" | "apiKey";
    accessToken: string;
    scopes?: string[] | undefined;
    additionalFields?: Record<string, string> | undefined;
}, {
    type: "oauth2" | "apiKey";
    accessToken: string;
    scopes?: string[] | undefined;
    additionalFields?: Record<string, string> | undefined;
}>;
export type ConnectionAuth = z.infer<typeof ConnectionAuthSchema>;
export declare const IntegrationMetadataSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    instructions: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    instructions?: string | undefined;
}, {
    name: string;
    id: string;
    instructions?: string | undefined;
}>;
export type IntegrationMetadata = z.infer<typeof IntegrationMetadataSchema>;
export declare const IntegrationConfigSchema: z.ZodObject<{
    id: z.ZodString;
    metadata: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        instructions: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        instructions?: string | undefined;
    }, {
        name: string;
        id: string;
        instructions?: string | undefined;
    }>;
    authSource: z.ZodEnum<["HOSTED", "LOCAL", "RESOLVER"]>;
}, "strip", z.ZodTypeAny, {
    id: string;
    metadata: {
        name: string;
        id: string;
        instructions?: string | undefined;
    };
    authSource: "HOSTED" | "LOCAL" | "RESOLVER";
}, {
    id: string;
    metadata: {
        name: string;
        id: string;
        instructions?: string | undefined;
    };
    authSource: "HOSTED" | "LOCAL" | "RESOLVER";
}>;
export type IntegrationConfig = z.infer<typeof IntegrationConfigSchema>;
