import { z } from "zod";
export declare const TaskResource: z.ZodObject<{
    id: z.ZodString;
    filePath: z.ZodString;
    exportName: z.ZodString;
    queue: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        concurrencyLimit: z.ZodOptional<z.ZodNumber>;
        rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>, z.ZodObject<{
            type: z.ZodLiteral<"sliding-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        factor: z.ZodOptional<z.ZodNumber>;
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
    }, {
        cron: string;
        timezone: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    exportName: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}, {
    id: string;
    filePath: string;
    exportName: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}>;
export type TaskResource = z.infer<typeof TaskResource>;
export declare const BackgroundWorkerSourceFileMetadata: z.ZodObject<{
    filePath: z.ZodString;
    contents: z.ZodString;
    contentHash: z.ZodString;
    taskIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    contentHash: string;
    contents: string;
    taskIds: string[];
}, {
    filePath: string;
    contentHash: string;
    contents: string;
    taskIds: string[];
}>;
export type BackgroundWorkerSourceFileMetadata = z.infer<typeof BackgroundWorkerSourceFileMetadata>;
export declare const BackgroundWorkerMetadata: z.ZodObject<{
    packageVersion: z.ZodString;
    contentHash: z.ZodString;
    cliPackageVersion: z.ZodOptional<z.ZodString>;
    tasks: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodString;
        queue: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            concurrencyLimit: z.ZodOptional<z.ZodNumber>;
            rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed-window">;
                limit: z.ZodNumber;
                window: z.ZodUnion<[z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>, z.ZodObject<{
                    minutes: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    minutes: number;
                }, {
                    minutes: number;
                }>, z.ZodObject<{
                    hours: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    hours: number;
                }, {
                    hours: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }, {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }>, z.ZodObject<{
                type: z.ZodLiteral<"sliding-window">;
                limit: z.ZodNumber;
                window: z.ZodUnion<[z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>, z.ZodObject<{
                    minutes: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    minutes: number;
                }, {
                    minutes: number;
                }>, z.ZodObject<{
                    hours: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    hours: number;
                }, {
                    hours: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }, {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        }, {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            factor: z.ZodOptional<z.ZodNumber>;
            minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            randomize: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }>>;
        machine: z.ZodOptional<z.ZodObject<{
            cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
            memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
            preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
        triggerSource: z.ZodOptional<z.ZodString>;
        schedule: z.ZodOptional<z.ZodObject<{
            cron: z.ZodString;
            timezone: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            cron: string;
            timezone: string;
        }, {
            cron: string;
            timezone: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }, {
        id: string;
        filePath: string;
        exportName: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }>, "many">;
    sourceFiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        filePath: z.ZodString;
        contents: z.ZodString;
        contentHash: z.ZodString;
        taskIds: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }, {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }[];
    contentHash: string;
    packageVersion: string;
    cliPackageVersion?: string | undefined;
    sourceFiles?: {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }[] | undefined;
}, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }[];
    contentHash: string;
    packageVersion: string;
    cliPackageVersion?: string | undefined;
    sourceFiles?: {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }[] | undefined;
}>;
export type BackgroundWorkerMetadata = z.infer<typeof BackgroundWorkerMetadata>;
export declare const ImageDetailsMetadata: z.ZodObject<{
    contentHash: z.ZodString;
    imageTag: z.ZodString;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    imageTag: string;
}, {
    contentHash: string;
    imageTag: string;
}>;
export type ImageDetailsMetadata = z.infer<typeof ImageDetailsMetadata>;
