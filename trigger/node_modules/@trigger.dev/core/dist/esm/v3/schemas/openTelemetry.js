import { z } from "zod";
export const ExceptionEventProperties = z.object({
    type: z.string().optional(),
    message: z.string().optional(),
    stacktrace: z.string().optional(),
});
export const ExceptionSpanEvent = z.object({
    name: z.literal("exception"),
    time: z.coerce.date(),
    properties: z.object({
        exception: ExceptionEventProperties,
    }),
});
export const CancellationSpanEvent = z.object({
    name: z.literal("cancellation"),
    time: z.coerce.date(),
    properties: z.object({
        reason: z.string(),
    }),
});
export const OtherSpanEvent = z.object({
    name: z.string(),
    time: z.coerce.date(),
    properties: z.record(z.unknown()),
});
export const SpanEvent = z.union([ExceptionSpanEvent, CancellationSpanEvent, OtherSpanEvent]);
export const SpanEvents = z.array(SpanEvent);
export function isExceptionSpanEvent(event) {
    return event.name === "exception";
}
export function isCancellationSpanEvent(event) {
    return event.name === "cancellation";
}
export const SpanMessagingEvent = z.object({
    system: z.string().optional(),
    client_id: z.string().optional(),
    operation: z.enum(["publish", "create", "receive", "deliver"]),
    message: z.any(),
    destination: z.string().optional(),
});
//# sourceMappingURL=openTelemetry.js.map