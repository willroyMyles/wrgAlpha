import { z } from "zod";
import { RequireKeys } from "../types/index.js";
export declare const EnvironmentType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
export type EnvironmentType = z.infer<typeof EnvironmentType>;
export declare const TaskRunExecutionPayload: z.ZodObject<{
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName: string;
        }, {
            id: string;
            filePath: string;
            exportName: string;
        }>;
        attempt: z.ZodObject<{
            id: z.ZodString;
            number: z.ZodNumber;
            startedAt: z.ZodDate;
            backgroundWorkerId: z.ZodString;
            backgroundWorkerTaskId: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            context: z.ZodAny;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            durationMs: z.ZodDefault<z.ZodNumber>;
            costInCents: z.ZodDefault<z.ZodNumber>;
            baseCostInCents: z.ZodDefault<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        }>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        machine: z.ZodOptional<z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    }, {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    }>;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    execution: {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    };
    traceContext: Record<string, unknown>;
    environment?: Record<string, string> | undefined;
}, {
    execution: {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    };
    traceContext: Record<string, unknown>;
    environment?: Record<string, string> | undefined;
}>;
export type TaskRunExecutionPayload = z.infer<typeof TaskRunExecutionPayload>;
export declare const ProdTaskRunExecution: z.ZodObject<{
    run: z.ZodObject<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        context: z.ZodAny;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        durationMs: z.ZodDefault<z.ZodNumber>;
        costInCents: z.ZodDefault<z.ZodNumber>;
        baseCostInCents: z.ZodDefault<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        payload: string;
        id: string;
        startedAt: Date;
        payloadType: string;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
    }, {
        payload: string;
        id: string;
        payloadType: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
        version?: string | undefined;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
    }, {
        id: string;
        filePath: string;
        exportName: string;
    }>;
    attempt: z.ZodObject<{
        id: z.ZodString;
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    worker: z.ZodObject<{
        id: z.ZodString;
        contentHash: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        id: string;
        contentHash: string;
    }, {
        version: string;
        id: string;
        contentHash: string;
    }>;
    machine: z.ZodDefault<z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }, {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    run: {
        payload: string;
        id: string;
        startedAt: Date;
        payloadType: string;
        isTest: boolean;
        createdAt: Date;
        tags: string[];
        durationMs: number;
        costInCents: number;
        baseCostInCents: number;
        context?: any;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    queue: {
        name: string;
        id: string;
    };
    machine: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    };
    worker: {
        version: string;
        id: string;
        contentHash: string;
    };
    batch?: {
        id: string;
    } | undefined;
}, {
    run: {
        payload: string;
        id: string;
        payloadType: string;
        createdAt: Date;
        tags: string[];
        context?: any;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        baseCostInCents?: number | undefined;
        version?: string | undefined;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    task: {
        id: string;
        filePath: string;
        exportName: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    queue: {
        name: string;
        id: string;
    };
    worker: {
        version: string;
        id: string;
        contentHash: string;
    };
    batch?: {
        id: string;
    } | undefined;
    machine?: {
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        cpu: number;
        memory: number;
        centsPerMs: number;
    } | undefined;
}>;
export type ProdTaskRunExecution = z.infer<typeof ProdTaskRunExecution>;
export declare const ProdTaskRunExecutionPayload: z.ZodObject<{
    execution: z.ZodObject<{
        run: z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            context: z.ZodAny;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            durationMs: z.ZodDefault<z.ZodNumber>;
            costInCents: z.ZodDefault<z.ZodNumber>;
            baseCostInCents: z.ZodDefault<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName: string;
        }, {
            id: string;
            filePath: string;
            exportName: string;
        }>;
        attempt: z.ZodObject<{
            id: z.ZodString;
            number: z.ZodNumber;
            startedAt: z.ZodDate;
            backgroundWorkerId: z.ZodString;
            backgroundWorkerTaskId: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        worker: z.ZodObject<{
            id: z.ZodString;
            contentHash: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: string;
            id: string;
            contentHash: string;
        }, {
            version: string;
            id: string;
            contentHash: string;
        }>;
        machine: z.ZodDefault<z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }, {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        machine: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        };
        worker: {
            version: string;
            id: string;
            contentHash: string;
        };
        batch?: {
            id: string;
        } | undefined;
    }, {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        worker: {
            version: string;
            id: string;
            contentHash: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    }>;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    execution: {
        run: {
            payload: string;
            id: string;
            startedAt: Date;
            payloadType: string;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            context?: any;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        machine: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        };
        worker: {
            version: string;
            id: string;
            contentHash: string;
        };
        batch?: {
            id: string;
        } | undefined;
    };
    traceContext: Record<string, unknown>;
    environment?: Record<string, string> | undefined;
}, {
    execution: {
        run: {
            payload: string;
            id: string;
            payloadType: string;
            createdAt: Date;
            tags: string[];
            context?: any;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            baseCostInCents?: number | undefined;
            version?: string | undefined;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        task: {
            id: string;
            filePath: string;
            exportName: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        queue: {
            name: string;
            id: string;
        };
        worker: {
            version: string;
            id: string;
            contentHash: string;
        };
        batch?: {
            id: string;
        } | undefined;
        machine?: {
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            cpu: number;
            memory: number;
            centsPerMs: number;
        } | undefined;
    };
    traceContext: Record<string, unknown>;
    environment?: Record<string, string> | undefined;
}>;
export type ProdTaskRunExecutionPayload = z.infer<typeof ProdTaskRunExecutionPayload>;
export declare const FixedWindowRateLimit: z.ZodObject<{
    type: z.ZodLiteral<"fixed-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "fixed-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}, {
    type: "fixed-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}>;
export declare const SlidingWindowRateLimit: z.ZodObject<{
    type: z.ZodLiteral<"sliding-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "sliding-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}, {
    type: "sliding-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}>;
export declare const RateLimitOptions: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"fixed-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "fixed-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}, {
    type: "fixed-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}>, z.ZodObject<{
    type: z.ZodLiteral<"sliding-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "sliding-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}, {
    type: "sliding-window";
    limit: number;
    window: ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    }) & ({
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    } | undefined);
}>]>;
export type RateLimitOptions = z.infer<typeof RateLimitOptions>;
export declare const RetryOptions: z.ZodObject<{
    /** The number of attempts before giving up */
    maxAttempts: z.ZodOptional<z.ZodNumber>;
    /** The exponential factor to use when calculating the next retry time.
     *
     * Each subsequent retry will be calculated as `previousTimeout * factor`
     */
    factor: z.ZodOptional<z.ZodNumber>;
    /** The minimum time to wait before retrying */
    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** The maximum time to wait before retrying */
    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** Randomize the timeout between retries.
     *
     * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
     */
    randomize: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    maxAttempts?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
}, {
    maxAttempts?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
}>;
export type RetryOptions = z.infer<typeof RetryOptions>;
export declare const QueueOptions: z.ZodObject<{
    /** You can define a shared queue and then pass the name in to your task.
     *
     * @example
     *
     * ```ts
     * const myQueue = queue({
        name: "my-queue",
        concurrencyLimit: 1,
      });
  
      export const task1 = task({
        id: "task-1",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
  
      export const task2 = task({
        id: "task-2",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
     * ```
     */
    name: z.ZodOptional<z.ZodString>;
    /** An optional property that specifies the maximum number of concurrent run executions.
     *
     * If this property is omitted, the task can potentially use up the full concurrency of an environment. */
    concurrencyLimit: z.ZodOptional<z.ZodNumber>;
    /** @deprecated This feature is coming soon */
    rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed-window">;
        limit: z.ZodNumber;
        window: z.ZodUnion<[z.ZodObject<{
            seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            seconds: number;
        }, {
            seconds: number;
        }>, z.ZodObject<{
            minutes: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minutes: number;
        }, {
            minutes: number;
        }>, z.ZodObject<{
            hours: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            hours: number;
        }, {
            hours: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "fixed-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    }, {
        type: "fixed-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    }>, z.ZodObject<{
        type: z.ZodLiteral<"sliding-window">;
        limit: z.ZodNumber;
        window: z.ZodUnion<[z.ZodObject<{
            seconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            seconds: number;
        }, {
            seconds: number;
        }>, z.ZodObject<{
            minutes: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            minutes: number;
        }, {
            minutes: number;
        }>, z.ZodObject<{
            hours: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            hours: number;
        }, {
            hours: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        type: "sliding-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    }, {
        type: "sliding-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    }>]>>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    concurrencyLimit?: number | undefined;
    rateLimit?: {
        type: "fixed-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    } | {
        type: "sliding-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    } | undefined;
}, {
    name?: string | undefined;
    concurrencyLimit?: number | undefined;
    rateLimit?: {
        type: "fixed-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    } | {
        type: "sliding-window";
        limit: number;
        window: ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        }) & ({
            seconds: number;
        } | {
            minutes: number;
        } | {
            hours: number;
        } | undefined);
    } | undefined;
}>;
export type QueueOptions = z.infer<typeof QueueOptions>;
export declare const ScheduleMetadata: z.ZodObject<{
    cron: z.ZodString;
    timezone: z.ZodString;
}, "strip", z.ZodTypeAny, {
    cron: string;
    timezone: string;
}, {
    cron: string;
    timezone: string;
}>;
export declare const TaskMetadata: z.ZodObject<{
    id: z.ZodString;
    queue: z.ZodOptional<z.ZodObject<{
        /** You can define a shared queue and then pass the name in to your task.
         *
         * @example
         *
         * ```ts
         * const myQueue = queue({
            name: "my-queue",
            concurrencyLimit: 1,
          });
      
          export const task1 = task({
            id: "task-1",
            queue: {
              name: "my-queue",
            },
            run: async (payload: { message: string }) => {
              // ...
            },
          });
      
          export const task2 = task({
            id: "task-2",
            queue: {
              name: "my-queue",
            },
            run: async (payload: { message: string }) => {
              // ...
            },
          });
         * ```
         */
        name: z.ZodOptional<z.ZodString>;
        /** An optional property that specifies the maximum number of concurrent run executions.
         *
         * If this property is omitted, the task can potentially use up the full concurrency of an environment. */
        concurrencyLimit: z.ZodOptional<z.ZodNumber>;
        /** @deprecated This feature is coming soon */
        rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>, z.ZodObject<{
            type: z.ZodLiteral<"sliding-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The number of attempts before giving up */
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time.
         *
         * Each subsequent retry will be calculated as `previousTimeout * factor`
         */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum time to wait before retrying */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum time to wait before retrying */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Randomize the timeout between retries.
         *
         * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
         */
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
    }, {
        cron: string;
        timezone: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}, {
    id: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}>;
export type TaskMetadata = z.infer<typeof TaskMetadata>;
export declare const TaskFile: z.ZodObject<{
    entry: z.ZodString;
    out: z.ZodString;
}, "strip", z.ZodTypeAny, {
    entry: string;
    out: string;
}, {
    entry: string;
    out: string;
}>;
export type TaskFile = z.infer<typeof TaskFile>;
export declare const TaskFileMetadata: z.ZodObject<{
    filePath: z.ZodString;
    exportName: z.ZodString;
    entryPoint: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    exportName: string;
    entryPoint: string;
}, {
    filePath: string;
    exportName: string;
    entryPoint: string;
}>;
export type TaskFileMetadata = z.infer<typeof TaskFileMetadata>;
export declare const TaskManifest: z.ZodObject<{
    filePath: z.ZodString;
    exportName: z.ZodString;
    entryPoint: z.ZodString;
    id: z.ZodString;
    queue: z.ZodOptional<z.ZodObject<{
        /** You can define a shared queue and then pass the name in to your task.
         *
         * @example
         *
         * ```ts
         * const myQueue = queue({
            name: "my-queue",
            concurrencyLimit: 1,
          });
      
          export const task1 = task({
            id: "task-1",
            queue: {
              name: "my-queue",
            },
            run: async (payload: { message: string }) => {
              // ...
            },
          });
      
          export const task2 = task({
            id: "task-2",
            queue: {
              name: "my-queue",
            },
            run: async (payload: { message: string }) => {
              // ...
            },
          });
         * ```
         */
        name: z.ZodOptional<z.ZodString>;
        /** An optional property that specifies the maximum number of concurrent run executions.
         *
         * If this property is omitted, the task can potentially use up the full concurrency of an environment. */
        concurrencyLimit: z.ZodOptional<z.ZodNumber>;
        /** @deprecated This feature is coming soon */
        rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>, z.ZodObject<{
            type: z.ZodLiteral<"sliding-window">;
            limit: z.ZodNumber;
            window: z.ZodUnion<[z.ZodObject<{
                seconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                seconds: number;
            }, {
                seconds: number;
            }>, z.ZodObject<{
                minutes: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                minutes: number;
            }, {
                minutes: number;
            }>, z.ZodObject<{
                hours: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                hours: number;
            }, {
                hours: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }, {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The number of attempts before giving up */
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time.
         *
         * Each subsequent retry will be calculated as `previousTimeout * factor`
         */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum time to wait before retrying */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum time to wait before retrying */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Randomize the timeout between retries.
         *
         * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
         */
        randomize: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
    }, {
        cron: string;
        timezone: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    exportName: string;
    entryPoint: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}, {
    id: string;
    filePath: string;
    exportName: string;
    entryPoint: string;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | undefined;
        rateLimit?: {
            type: "fixed-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | {
            type: "sliding-window";
            limit: number;
            window: ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            }) & ({
                seconds: number;
            } | {
                minutes: number;
            } | {
                hours: number;
            } | undefined);
        } | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
    } | undefined;
}>;
export type TaskManifest = z.infer<typeof TaskManifest>;
export declare const PostStartCauses: z.ZodEnum<["index", "create", "restore"]>;
export type PostStartCauses = z.infer<typeof PostStartCauses>;
export declare const PreStopCauses: z.ZodEnum<["terminate"]>;
export type PreStopCauses = z.infer<typeof PreStopCauses>;
export declare const Config: z.ZodObject<{
    project: z.ZodString;
    triggerDirectories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    triggerUrl: z.ZodOptional<z.ZodString>;
    projectDir: z.ZodOptional<z.ZodString>;
    tsconfigPath: z.ZodOptional<z.ZodString>;
    retries: z.ZodOptional<z.ZodObject<{
        enabledInDev: z.ZodDefault<z.ZodBoolean>;
        default: z.ZodOptional<z.ZodObject<{
            /** The number of attempts before giving up */
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            /** The exponential factor to use when calculating the next retry time.
             *
             * Each subsequent retry will be calculated as `previousTimeout * factor`
             */
            factor: z.ZodOptional<z.ZodNumber>;
            /** The minimum time to wait before retrying */
            minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            /** The maximum time to wait before retrying */
            maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            /** Randomize the timeout between retries.
             *
             * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
             */
            randomize: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        enabledInDev: boolean;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
    }, {
        enabledInDev?: boolean | undefined;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
    }>>;
    additionalPackages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    additionalFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    dependenciesToBundle: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">>;
    logLevel: z.ZodOptional<z.ZodString>;
    enableConsoleLogging: z.ZodOptional<z.ZodBoolean>;
    postInstall: z.ZodOptional<z.ZodString>;
    extraCACerts: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    project: string;
    triggerDirectories?: string[] | undefined;
    triggerUrl?: string | undefined;
    projectDir?: string | undefined;
    tsconfigPath?: string | undefined;
    retries?: {
        enabledInDev: boolean;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
    } | undefined;
    additionalPackages?: string[] | undefined;
    additionalFiles?: string[] | undefined;
    dependenciesToBundle?: (string | RegExp)[] | undefined;
    logLevel?: string | undefined;
    enableConsoleLogging?: boolean | undefined;
    postInstall?: string | undefined;
    extraCACerts?: string | undefined;
}, {
    project: string;
    triggerDirectories?: string[] | undefined;
    triggerUrl?: string | undefined;
    projectDir?: string | undefined;
    tsconfigPath?: string | undefined;
    retries?: {
        enabledInDev?: boolean | undefined;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
    } | undefined;
    additionalPackages?: string[] | undefined;
    additionalFiles?: string[] | undefined;
    dependenciesToBundle?: (string | RegExp)[] | undefined;
    logLevel?: string | undefined;
    enableConsoleLogging?: boolean | undefined;
    postInstall?: string | undefined;
    extraCACerts?: string | undefined;
}>;
export type Config = z.infer<typeof Config>;
export type ResolvedConfig = RequireKeys<Config, "triggerDirectories" | "triggerUrl" | "projectDir" | "tsconfigPath">;
export declare const WaitReason: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
export type WaitReason = z.infer<typeof WaitReason>;
export declare const TaskRunExecutionLazyAttemptPayload: z.ZodObject<{
    runId: z.ZodString;
    attemptCount: z.ZodOptional<z.ZodNumber>;
    messageId: z.ZodString;
    isTest: z.ZodBoolean;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    isTest: boolean;
    traceContext: Record<string, unknown>;
    runId: string;
    messageId: string;
    attemptCount?: number | undefined;
    environment?: Record<string, string> | undefined;
}, {
    isTest: boolean;
    traceContext: Record<string, unknown>;
    runId: string;
    messageId: string;
    attemptCount?: number | undefined;
    environment?: Record<string, string> | undefined;
}>;
export type TaskRunExecutionLazyAttemptPayload = z.infer<typeof TaskRunExecutionLazyAttemptPayload>;
