import { z } from "zod";
export declare const BuildExternal: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodString;
}, "strip", z.ZodTypeAny, {
    version: string;
    name: string;
}, {
    version: string;
    name: string;
}>;
export type BuildExternal = z.infer<typeof BuildExternal>;
export declare const BuildTarget: z.ZodEnum<["dev", "deploy"]>;
export type BuildTarget = z.infer<typeof BuildTarget>;
export declare const BuildRuntime: z.ZodEnum<["node", "bun"]>;
export type BuildRuntime = z.infer<typeof BuildRuntime>;
export declare const BuildManifest: z.ZodObject<{
    target: z.ZodEnum<["dev", "deploy"]>;
    packageVersion: z.ZodString;
    cliPackageVersion: z.ZodString;
    contentHash: z.ZodString;
    runtime: z.ZodEnum<["node", "bun"]>;
    environment: z.ZodString;
    config: z.ZodObject<{
        project: z.ZodString;
        dirs: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        project: string;
        dirs: string[];
    }, {
        project: string;
        dirs: string[];
    }>;
    files: z.ZodArray<z.ZodObject<{
        entry: z.ZodString;
        out: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        entry: string;
        out: string;
    }, {
        entry: string;
        out: string;
    }>, "many">;
    sources: z.ZodRecord<z.ZodString, z.ZodObject<{
        contents: z.ZodString;
        contentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        contentHash: string;
        contents: string;
    }, {
        contentHash: string;
        contents: string;
    }>>;
    outputPath: z.ZodString;
    runWorkerEntryPoint: z.ZodString;
    runControllerEntryPoint: z.ZodOptional<z.ZodString>;
    indexWorkerEntryPoint: z.ZodString;
    indexControllerEntryPoint: z.ZodOptional<z.ZodString>;
    loaderEntryPoint: z.ZodOptional<z.ZodString>;
    configPath: z.ZodString;
    externals: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: string;
        name: string;
    }, {
        version: string;
        name: string;
    }>, "many">>;
    build: z.ZodObject<{
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        commands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        env?: Record<string, string> | undefined;
        commands?: string[] | undefined;
    }, {
        env?: Record<string, string> | undefined;
        commands?: string[] | undefined;
    }>;
    customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    deploy: z.ZodObject<{
        env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        sync: z.ZodOptional<z.ZodObject<{
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            env?: Record<string, string> | undefined;
        }, {
            env?: Record<string, string> | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        env?: Record<string, string> | undefined;
        sync?: {
            env?: Record<string, string> | undefined;
        } | undefined;
    }, {
        env?: Record<string, string> | undefined;
        sync?: {
            env?: Record<string, string> | undefined;
        } | undefined;
    }>;
    image: z.ZodOptional<z.ZodObject<{
        pkgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        instructions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        pkgs?: string[] | undefined;
        instructions?: string[] | undefined;
    }, {
        pkgs?: string[] | undefined;
        instructions?: string[] | undefined;
    }>>;
    otelImportHook: z.ZodOptional<z.ZodObject<{
        include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    }, {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    config: {
        project: string;
        dirs: string[];
    };
    sources: Record<string, {
        contentHash: string;
        contents: string;
    }>;
    environment: string;
    contentHash: string;
    packageVersion: string;
    cliPackageVersion: string;
    deploy: {
        env?: Record<string, string> | undefined;
        sync?: {
            env?: Record<string, string> | undefined;
        } | undefined;
    };
    target: "dev" | "deploy";
    runtime: "node" | "bun";
    files: {
        entry: string;
        out: string;
    }[];
    outputPath: string;
    runWorkerEntryPoint: string;
    indexWorkerEntryPoint: string;
    configPath: string;
    build: {
        env?: Record<string, string> | undefined;
        commands?: string[] | undefined;
    };
    runControllerEntryPoint?: string | undefined;
    indexControllerEntryPoint?: string | undefined;
    loaderEntryPoint?: string | undefined;
    externals?: {
        version: string;
        name: string;
    }[] | undefined;
    customConditions?: string[] | undefined;
    image?: {
        pkgs?: string[] | undefined;
        instructions?: string[] | undefined;
    } | undefined;
    otelImportHook?: {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    } | undefined;
}, {
    config: {
        project: string;
        dirs: string[];
    };
    sources: Record<string, {
        contentHash: string;
        contents: string;
    }>;
    environment: string;
    contentHash: string;
    packageVersion: string;
    cliPackageVersion: string;
    deploy: {
        env?: Record<string, string> | undefined;
        sync?: {
            env?: Record<string, string> | undefined;
        } | undefined;
    };
    target: "dev" | "deploy";
    runtime: "node" | "bun";
    files: {
        entry: string;
        out: string;
    }[];
    outputPath: string;
    runWorkerEntryPoint: string;
    indexWorkerEntryPoint: string;
    configPath: string;
    build: {
        env?: Record<string, string> | undefined;
        commands?: string[] | undefined;
    };
    runControllerEntryPoint?: string | undefined;
    indexControllerEntryPoint?: string | undefined;
    loaderEntryPoint?: string | undefined;
    externals?: {
        version: string;
        name: string;
    }[] | undefined;
    customConditions?: string[] | undefined;
    image?: {
        pkgs?: string[] | undefined;
        instructions?: string[] | undefined;
    } | undefined;
    otelImportHook?: {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    } | undefined;
}>;
export type BuildManifest = z.infer<typeof BuildManifest>;
export declare const IndexMessage: z.ZodObject<{
    type: z.ZodLiteral<"index">;
    data: z.ZodObject<{
        build: z.ZodObject<{
            target: z.ZodEnum<["dev", "deploy"]>;
            packageVersion: z.ZodString;
            cliPackageVersion: z.ZodString;
            contentHash: z.ZodString;
            runtime: z.ZodEnum<["node", "bun"]>;
            environment: z.ZodString;
            config: z.ZodObject<{
                project: z.ZodString;
                dirs: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                project: string;
                dirs: string[];
            }, {
                project: string;
                dirs: string[];
            }>;
            files: z.ZodArray<z.ZodObject<{
                entry: z.ZodString;
                out: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                entry: string;
                out: string;
            }, {
                entry: string;
                out: string;
            }>, "many">;
            sources: z.ZodRecord<z.ZodString, z.ZodObject<{
                contents: z.ZodString;
                contentHash: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                contentHash: string;
                contents: string;
            }, {
                contentHash: string;
                contents: string;
            }>>;
            outputPath: z.ZodString;
            runWorkerEntryPoint: z.ZodString;
            runControllerEntryPoint: z.ZodOptional<z.ZodString>;
            indexWorkerEntryPoint: z.ZodString;
            indexControllerEntryPoint: z.ZodOptional<z.ZodString>;
            loaderEntryPoint: z.ZodOptional<z.ZodString>;
            configPath: z.ZodString;
            externals: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                version: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                version: string;
                name: string;
            }, {
                version: string;
                name: string;
            }>, "many">>;
            build: z.ZodObject<{
                env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                commands: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            }, {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            }>;
            customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            deploy: z.ZodObject<{
                env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                sync: z.ZodOptional<z.ZodObject<{
                    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    env?: Record<string, string> | undefined;
                }, {
                    env?: Record<string, string> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            }, {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            }>;
            image: z.ZodOptional<z.ZodObject<{
                pkgs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                instructions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            }, {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            }>>;
            otelImportHook: z.ZodOptional<z.ZodObject<{
                include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }, {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        build: {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    }, {
        build: {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "index";
    data: {
        build: {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    };
}, {
    type: "index";
    data: {
        build: {
            config: {
                project: string;
                dirs: string[];
            };
            sources: Record<string, {
                contentHash: string;
                contents: string;
            }>;
            environment: string;
            contentHash: string;
            packageVersion: string;
            cliPackageVersion: string;
            deploy: {
                env?: Record<string, string> | undefined;
                sync?: {
                    env?: Record<string, string> | undefined;
                } | undefined;
            };
            target: "dev" | "deploy";
            runtime: "node" | "bun";
            files: {
                entry: string;
                out: string;
            }[];
            outputPath: string;
            runWorkerEntryPoint: string;
            indexWorkerEntryPoint: string;
            configPath: string;
            build: {
                env?: Record<string, string> | undefined;
                commands?: string[] | undefined;
            };
            runControllerEntryPoint?: string | undefined;
            indexControllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            externals?: {
                version: string;
                name: string;
            }[] | undefined;
            customConditions?: string[] | undefined;
            image?: {
                pkgs?: string[] | undefined;
                instructions?: string[] | undefined;
            } | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    };
}>;
export type IndexMessage = z.infer<typeof IndexMessage>;
export declare const WorkerManifest: z.ZodObject<{
    configPath: z.ZodString;
    tasks: z.ZodArray<z.ZodObject<{
        filePath: z.ZodString;
        exportName: z.ZodString;
        entryPoint: z.ZodString;
        id: z.ZodString;
        queue: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            concurrencyLimit: z.ZodOptional<z.ZodNumber>;
            rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed-window">;
                limit: z.ZodNumber;
                window: z.ZodUnion<[z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>, z.ZodObject<{
                    minutes: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    minutes: number;
                }, {
                    minutes: number;
                }>, z.ZodObject<{
                    hours: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    hours: number;
                }, {
                    hours: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }, {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }>, z.ZodObject<{
                type: z.ZodLiteral<"sliding-window">;
                limit: z.ZodNumber;
                window: z.ZodUnion<[z.ZodObject<{
                    seconds: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    seconds: number;
                }, {
                    seconds: number;
                }>, z.ZodObject<{
                    minutes: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    minutes: number;
                }, {
                    minutes: number;
                }>, z.ZodObject<{
                    hours: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    hours: number;
                }, {
                    hours: number;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }, {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        }, {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            factor: z.ZodOptional<z.ZodNumber>;
            minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            randomize: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        }>>;
        machine: z.ZodOptional<z.ZodObject<{
            cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
            memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
            preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
        triggerSource: z.ZodOptional<z.ZodString>;
        schedule: z.ZodOptional<z.ZodObject<{
            cron: z.ZodString;
            timezone: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            cron: string;
            timezone: string;
        }, {
            cron: string;
            timezone: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName: string;
        entryPoint: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }, {
        id: string;
        filePath: string;
        exportName: string;
        entryPoint: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }>, "many">;
    workerEntryPoint: z.ZodString;
    controllerEntryPoint: z.ZodOptional<z.ZodString>;
    loaderEntryPoint: z.ZodOptional<z.ZodString>;
    runtime: z.ZodEnum<["node", "bun"]>;
    customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    otelImportHook: z.ZodOptional<z.ZodObject<{
        include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    }, {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        entryPoint: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }[];
    runtime: "node" | "bun";
    configPath: string;
    workerEntryPoint: string;
    controllerEntryPoint?: string | undefined;
    loaderEntryPoint?: string | undefined;
    customConditions?: string[] | undefined;
    otelImportHook?: {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    } | undefined;
}, {
    tasks: {
        id: string;
        filePath: string;
        exportName: string;
        entryPoint: string;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | undefined;
            rateLimit?: {
                type: "fixed-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | {
                type: "sliding-window";
                limit: number;
                window: ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                }) & ({
                    seconds: number;
                } | {
                    minutes: number;
                } | {
                    hours: number;
                } | undefined);
            } | undefined;
        } | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
        } | undefined;
    }[];
    runtime: "node" | "bun";
    configPath: string;
    workerEntryPoint: string;
    controllerEntryPoint?: string | undefined;
    loaderEntryPoint?: string | undefined;
    customConditions?: string[] | undefined;
    otelImportHook?: {
        include?: string[] | undefined;
        exclude?: string[] | undefined;
    } | undefined;
}>;
export type WorkerManifest = z.infer<typeof WorkerManifest>;
export declare const WorkerManifestMessage: z.ZodObject<{
    type: z.ZodLiteral<"worker-manifest">;
    data: z.ZodObject<{
        manifest: z.ZodObject<{
            configPath: z.ZodString;
            tasks: z.ZodArray<z.ZodObject<{
                filePath: z.ZodString;
                exportName: z.ZodString;
                entryPoint: z.ZodString;
                id: z.ZodString;
                queue: z.ZodOptional<z.ZodObject<{
                    name: z.ZodOptional<z.ZodString>;
                    concurrencyLimit: z.ZodOptional<z.ZodNumber>;
                    rateLimit: z.ZodOptional<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"fixed-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"sliding-window">;
                        limit: z.ZodNumber;
                        window: z.ZodUnion<[z.ZodObject<{
                            seconds: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            seconds: number;
                        }, {
                            seconds: number;
                        }>, z.ZodObject<{
                            minutes: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            minutes: number;
                        }, {
                            minutes: number;
                        }>, z.ZodObject<{
                            hours: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            hours: number;
                        }, {
                            hours: number;
                        }>]>;
                    }, "strip", z.ZodTypeAny, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }, {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    }>]>>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                }, {
                    cron: string;
                    timezone: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }, {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }>, "many">;
            workerEntryPoint: z.ZodString;
            controllerEntryPoint: z.ZodOptional<z.ZodString>;
            loaderEntryPoint: z.ZodOptional<z.ZodString>;
            runtime: z.ZodEnum<["node", "bun"]>;
            customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            otelImportHook: z.ZodOptional<z.ZodObject<{
                include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }, {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    }, {
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    type: "worker-manifest";
    data: {
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    };
}, {
    type: "worker-manifest";
    data: {
        manifest: {
            tasks: {
                id: string;
                filePath: string;
                exportName: string;
                entryPoint: string;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | undefined;
                    rateLimit?: {
                        type: "fixed-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | {
                        type: "sliding-window";
                        limit: number;
                        window: ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        }) & ({
                            seconds: number;
                        } | {
                            minutes: number;
                        } | {
                            hours: number;
                        } | undefined);
                    } | undefined;
                } | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 8 | 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                } | undefined;
            }[];
            runtime: "node" | "bun";
            configPath: string;
            workerEntryPoint: string;
            controllerEntryPoint?: string | undefined;
            loaderEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
        };
    };
}>;
export type WorkerManifestMessage = z.infer<typeof WorkerManifestMessage>;
export declare const ImportError: z.ZodObject<{
    message: z.ZodString;
    file: z.ZodString;
    stack: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    file: string;
    stack?: string | undefined;
    name?: string | undefined;
}, {
    message: string;
    file: string;
    stack?: string | undefined;
    name?: string | undefined;
}>;
export type ImportError = z.infer<typeof ImportError>;
export declare const ImportTaskFileErrors: z.ZodArray<z.ZodObject<{
    message: z.ZodString;
    file: z.ZodString;
    stack: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    file: string;
    stack?: string | undefined;
    name?: string | undefined;
}, {
    message: string;
    file: string;
    stack?: string | undefined;
    name?: string | undefined;
}>, "many">;
export type ImportTaskFileErrors = z.infer<typeof ImportTaskFileErrors>;
