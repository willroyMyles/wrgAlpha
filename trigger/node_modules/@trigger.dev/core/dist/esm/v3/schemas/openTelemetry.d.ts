import { z } from "zod";
export declare const ExceptionEventProperties: z.ZodObject<{
    type: z.ZodOptional<z.ZodString>;
    message: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type?: string | undefined;
    message?: string | undefined;
    stacktrace?: string | undefined;
}, {
    type?: string | undefined;
    message?: string | undefined;
    stacktrace?: string | undefined;
}>;
export type ExceptionEventProperties = z.infer<typeof ExceptionEventProperties>;
export declare const ExceptionSpanEvent: z.ZodObject<{
    name: z.ZodLiteral<"exception">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        exception: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            message: z.ZodOptional<z.ZodString>;
            stacktrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}>;
export type ExceptionSpanEvent = z.infer<typeof ExceptionSpanEvent>;
export declare const CancellationSpanEvent: z.ZodObject<{
    name: z.ZodLiteral<"cancellation">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        reason: string;
    }, {
        reason: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}>;
export type CancellationSpanEvent = z.infer<typeof CancellationSpanEvent>;
export declare const OtherSpanEvent: z.ZodObject<{
    name: z.ZodString;
    time: z.ZodDate;
    properties: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}>;
export type OtherSpanEvent = z.infer<typeof OtherSpanEvent>;
export declare const SpanEvent: z.ZodUnion<[z.ZodObject<{
    name: z.ZodLiteral<"exception">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        exception: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            message: z.ZodOptional<z.ZodString>;
            stacktrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}>, z.ZodObject<{
    name: z.ZodLiteral<"cancellation">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        reason: string;
    }, {
        reason: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}>, z.ZodObject<{
    name: z.ZodString;
    time: z.ZodDate;
    properties: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}>]>;
export type SpanEvent = z.infer<typeof SpanEvent>;
export declare const SpanEvents: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    name: z.ZodLiteral<"exception">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        exception: z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            message: z.ZodOptional<z.ZodString>;
            stacktrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }, {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }, {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}, {
    name: "exception";
    properties: {
        exception: {
            type?: string | undefined;
            message?: string | undefined;
            stacktrace?: string | undefined;
        };
    };
    time: Date;
}>, z.ZodObject<{
    name: z.ZodLiteral<"cancellation">;
    time: z.ZodDate;
    properties: z.ZodObject<{
        reason: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        reason: string;
    }, {
        reason: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}, {
    name: "cancellation";
    properties: {
        reason: string;
    };
    time: Date;
}>, z.ZodObject<{
    name: z.ZodString;
    time: z.ZodDate;
    properties: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}, {
    name: string;
    properties: Record<string, unknown>;
    time: Date;
}>]>, "many">;
export type SpanEvents = z.infer<typeof SpanEvents>;
export declare function isExceptionSpanEvent(event: SpanEvent): event is ExceptionSpanEvent;
export declare function isCancellationSpanEvent(event: SpanEvent): event is CancellationSpanEvent;
export declare const SpanMessagingEvent: z.ZodObject<{
    system: z.ZodOptional<z.ZodString>;
    client_id: z.ZodOptional<z.ZodString>;
    operation: z.ZodEnum<["publish", "create", "receive", "deliver"]>;
    message: z.ZodAny;
    destination: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    operation: "create" | "publish" | "receive" | "deliver";
    system?: string | undefined;
    client_id?: string | undefined;
    message?: any;
    destination?: string | undefined;
}, {
    operation: "create" | "publish" | "receive" | "deliver";
    system?: string | undefined;
    client_id?: string | undefined;
    message?: any;
    destination?: string | undefined;
}>;
export type SpanMessagingEvent = z.infer<typeof SpanMessagingEvent>;
