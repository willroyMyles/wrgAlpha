import { SemanticInternalAttributes } from "../semanticInternalAttributes.js";
import { flattenAttributes } from "../utils/flattenAttributes.js";
import { taskContext } from "../task-context-api.js";
export class TaskContextSpanProcessor {
    _innerProcessor;
    constructor(innerProcessor) {
        this._innerProcessor = innerProcessor;
    }
    // Called when a span starts
    onStart(span, parentContext) {
        if (taskContext.ctx) {
            span.setAttributes(flattenAttributes({
                [SemanticInternalAttributes.ATTEMPT_ID]: taskContext.ctx.attempt.id,
                [SemanticInternalAttributes.ATTEMPT_NUMBER]: taskContext.ctx.attempt.number,
            }, SemanticInternalAttributes.METADATA));
        }
        this._innerProcessor.onStart(span, parentContext);
    }
    // Delegate the rest of the methods to the wrapped processor
    onEnd(span) {
        this._innerProcessor.onEnd(span);
    }
    shutdown() {
        return this._innerProcessor.shutdown();
    }
    forceFlush() {
        return this._innerProcessor.forceFlush();
    }
}
export class TaskContextLogProcessor {
    _innerProcessor;
    constructor(innerProcessor) {
        this._innerProcessor = innerProcessor;
    }
    forceFlush() {
        return this._innerProcessor.forceFlush();
    }
    onEmit(logRecord, context) {
        // Adds in the context attributes to the log record
        if (taskContext.ctx) {
            logRecord.setAttributes(flattenAttributes({
                [SemanticInternalAttributes.ATTEMPT_ID]: taskContext.ctx.attempt.id,
                [SemanticInternalAttributes.ATTEMPT_NUMBER]: taskContext.ctx.attempt.number,
            }, SemanticInternalAttributes.METADATA));
        }
        this._innerProcessor.onEmit(logRecord, context);
    }
    shutdown() {
        return this._innerProcessor.shutdown();
    }
}
//# sourceMappingURL=otelProcessors.js.map