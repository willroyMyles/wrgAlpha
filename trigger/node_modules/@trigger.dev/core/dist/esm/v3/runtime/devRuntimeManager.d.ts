import { BatchTaskRunExecutionResult, TaskRunContext, TaskRunExecutionResult } from "../schemas/index.js";
import { RuntimeManager } from "./manager.js";
export declare class DevRuntimeManager implements RuntimeManager {
    _taskWaits: Map<string, {
        resolve: (value: TaskRunExecutionResult) => void;
    }>;
    _batchWaits: Map<string, {
        resolve: (value: BatchTaskRunExecutionResult) => void;
        reject: (err?: any) => void;
    }>;
    _pendingCompletionNotifications: Map<string, TaskRunExecutionResult>;
    disable(): void;
    waitForDuration(ms: number): Promise<void>;
    waitUntil(date: Date): Promise<void>;
    waitForTask(params: {
        id: string;
        ctx: TaskRunContext;
    }): Promise<TaskRunExecutionResult>;
    waitForBatch(params: {
        id: string;
        runs: string[];
        ctx: TaskRunContext;
    }): Promise<BatchTaskRunExecutionResult>;
    resumeTask(completion: TaskRunExecutionResult, runId: string): void;
}
