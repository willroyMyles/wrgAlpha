const API_NAME = "runtime";
import { getGlobal, registerGlobal, unregisterGlobal } from "../utils/globals.js";
import { NoopRuntimeManager } from "./noopRuntimeManager.js";
import { usage } from "../usage-api.js";
const NOOP_RUNTIME_MANAGER = new NoopRuntimeManager();
export class RuntimeAPI {
    static _instance;
    constructor() { }
    static getInstance() {
        if (!this._instance) {
            this._instance = new RuntimeAPI();
        }
        return this._instance;
    }
    waitForDuration(ms) {
        return usage.pauseAsync(() => this.#getRuntimeManager().waitForDuration(ms));
    }
    waitUntil(date) {
        return usage.pauseAsync(() => this.#getRuntimeManager().waitUntil(date));
    }
    waitForTask(params) {
        return usage.pauseAsync(() => this.#getRuntimeManager().waitForTask(params));
    }
    waitForBatch(params) {
        return usage.pauseAsync(() => this.#getRuntimeManager().waitForBatch(params));
    }
    setGlobalRuntimeManager(runtimeManager) {
        return registerGlobal(API_NAME, runtimeManager);
    }
    disable() {
        this.#getRuntimeManager().disable();
        unregisterGlobal(API_NAME);
    }
    #getRuntimeManager() {
        return getGlobal(API_NAME) ?? NOOP_RUNTIME_MANAGER;
    }
}
//# sourceMappingURL=index.js.map