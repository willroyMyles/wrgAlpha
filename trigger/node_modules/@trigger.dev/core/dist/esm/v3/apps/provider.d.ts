import { EnvironmentType } from "../schemas/schemas.js";
import { MachinePreset } from "../schemas/common.js";
import { ProviderToPlatformMessages, PlatformToProviderMessages } from "../schemas/messages.js";
import { ZodSocketConnection } from "../zodSocket.js";
export interface TaskOperationsIndexOptions {
    shortCode: string;
    imageRef: string;
    apiKey: string;
    apiUrl: string;
    envId: string;
    envType: EnvironmentType;
    orgId: string;
    projectId: string;
    deploymentId: string;
}
export interface TaskOperationsCreateOptions {
    image: string;
    machine: MachinePreset;
    version: string;
    nextAttemptNumber?: number;
    envId: string;
    envType: EnvironmentType;
    orgId: string;
    projectId: string;
    runId: string;
}
export interface TaskOperationsRestoreOptions {
    imageRef: string;
    checkpointRef: string;
    machine: MachinePreset;
    attemptNumber?: number;
    envId: string;
    envType: EnvironmentType;
    orgId: string;
    projectId: string;
    runId: string;
    checkpointId: string;
}
export interface TaskOperationsPrePullDeploymentOptions {
    shortCode: string;
    imageRef: string;
    envId: string;
    envType: EnvironmentType;
    orgId: string;
    projectId: string;
    deploymentId: string;
}
export interface TaskOperations {
    init: () => Promise<any>;
    index: (opts: TaskOperationsIndexOptions) => Promise<any>;
    create: (opts: TaskOperationsCreateOptions) => Promise<any>;
    restore: (opts: TaskOperationsRestoreOptions) => Promise<any>;
    delete?: (...args: any[]) => Promise<any>;
    get?: (...args: any[]) => Promise<any>;
    prePullDeployment?: (opts: TaskOperationsPrePullDeploymentOptions) => Promise<any>;
}
type ProviderShellOptions = {
    tasks: TaskOperations;
    type: "docker" | "kubernetes";
    host?: string;
    port?: number;
};
interface Provider {
    tasks: TaskOperations;
}
export declare class ProviderShell implements Provider {
    #private;
    private options;
    tasks: TaskOperations;
    platformSocket: ZodSocketConnection<typeof ProviderToPlatformMessages, typeof PlatformToProviderMessages>;
    constructor(options: ProviderShellOptions);
    listen(): Promise<void>;
}
export {};
