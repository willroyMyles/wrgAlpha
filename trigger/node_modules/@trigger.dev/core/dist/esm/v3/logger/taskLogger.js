import { SeverityNumber } from "@opentelemetry/api-logs";
import { iconStringForSeverity } from "../icons.js";
import { SemanticInternalAttributes } from "../semanticInternalAttributes.js";
import { flattenAttributes } from "../utils/flattenAttributes.js";
import { clock } from "../clock-api.js";
export const logLevels = ["none", "error", "warn", "info", "debug"];
export class OtelTaskLogger {
    _config;
    _level;
    constructor(_config) {
        this._config = _config;
        this._level = logLevels.indexOf(_config.level);
    }
    debug(message, properties) {
        if (this._level < 4)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "debug", SeverityNumber.DEBUG, properties);
    }
    log(message, properties) {
        if (this._level < 3)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "log", SeverityNumber.INFO, properties);
    }
    info(message, properties) {
        if (this._level < 3)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "info", SeverityNumber.INFO, properties);
    }
    warn(message, properties) {
        if (this._level < 2)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "warn", SeverityNumber.WARN, properties);
    }
    error(message, properties) {
        if (this._level < 1)
            return; // ["none", "error", "warn", "info", "debug"];
        this.#emitLog(message, this.#getTimestampInHrTime(), "error", SeverityNumber.ERROR, properties);
    }
    #emitLog(message, timestamp, severityText, severityNumber, properties) {
        let attributes = { ...flattenAttributes(safeJsonProcess(properties)) };
        const icon = iconStringForSeverity(severityNumber);
        if (icon !== undefined) {
            attributes[SemanticInternalAttributes.STYLE_ICON] = icon;
        }
        this._config.logger.emit({
            severityNumber,
            severityText,
            body: message,
            attributes,
            timestamp,
        });
    }
    trace(name, fn, options) {
        return this._config.tracer.startActiveSpan(name, fn, options);
    }
    #getTimestampInHrTime() {
        return clock.preciseNow();
    }
}
export class NoopTaskLogger {
    debug() { }
    log() { }
    info() { }
    warn() { }
    error() { }
    trace(name, fn) {
        return fn({});
    }
}
function safeJsonProcess(value) {
    try {
        return JSON.parse(JSON.stringify(value, jsonErrorReplacer));
    }
    catch {
        return value;
    }
}
function jsonErrorReplacer(key, value) {
    if (value instanceof Error) {
        return {
            name: value.name,
            message: value.message,
            stack: value.stack,
        };
    }
    return value;
}
//# sourceMappingURL=taskLogger.js.map