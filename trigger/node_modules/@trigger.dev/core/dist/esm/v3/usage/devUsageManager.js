import { clock } from "../clock-api.js";
import { calculateDurationInMs } from "../clock/clock.js";
class DevUsageMeasurement {
    id;
    startedAt;
    _pauses = new Map();
    _endedAt;
    constructor(id, startedAt = clock.preciseNow()) {
        this.id = id;
        this.startedAt = startedAt;
    }
    stop() {
        this._endedAt = clock.preciseNow();
    }
    sample() {
        const endedAt = this._endedAt ?? clock.preciseNow();
        const wallTime = this.startedAt ? calculateDurationInMs(this.startedAt, endedAt) : 0;
        if (wallTime === 0) {
            return { cpuTime: 0, wallTime: 0 };
        }
        const totalPauses = Array.from(this._pauses.values()).reduce((total, pause) => {
            return total + calculateDurationInMs(pause.start, pause.end ?? endedAt);
        }, 0);
        const cpuTime = wallTime - totalPauses;
        return {
            wallTime,
            cpuTime,
        };
    }
    registerPause(pauseId, start, end) {
        this._pauses.set(pauseId, { start, end });
    }
}
export class DevUsageManager {
    _firstMeasurement;
    _currentMeasurements = new Map();
    _pauses = new Map();
    disable() { }
    sample() {
        return this._firstMeasurement?.sample();
    }
    start() {
        // generate a random ID
        const id = generateRandomString();
        const measurement = new DevUsageMeasurement(id);
        if (!this._firstMeasurement) {
            this._firstMeasurement = measurement;
        }
        this._currentMeasurements.set(id, measurement);
        return measurement;
    }
    stop(measurement) {
        measurement.stop();
        const sample = measurement.sample();
        this._currentMeasurements.delete(measurement.id);
        return sample;
    }
    async pauseAsync(cb) {
        const pauseId = generateRandomString();
        const pauseStart = clock.preciseNow();
        try {
            this._pauses.set(pauseId, { start: pauseStart });
            for (const measurement of this._currentMeasurements.values()) {
                measurement.registerPause(pauseId, pauseStart);
            }
            return await cb();
        }
        finally {
            const pauseEnd = clock.preciseNow();
            this._pauses.set(pauseId, { start: pauseStart, end: pauseEnd });
            for (const measurement of this._currentMeasurements.values()) {
                measurement.registerPause(pauseId, pauseStart, pauseEnd);
            }
        }
    }
}
function generateRandomString() {
    let result = "";
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (var i = 0; i < 16; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
//# sourceMappingURL=devUsageManager.js.map