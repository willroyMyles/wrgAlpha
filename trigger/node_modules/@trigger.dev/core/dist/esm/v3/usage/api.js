const API_NAME = "usage";
import { getGlobal, registerGlobal, unregisterGlobal } from "../utils/globals.js";
import { NoopUsageManager } from "./noopUsageManager.js";
const NOOP_USAGE_MANAGER = new NoopUsageManager();
export class UsageAPI {
    static _instance;
    constructor() { }
    static getInstance() {
        if (!this._instance) {
            this._instance = new UsageAPI();
        }
        return this._instance;
    }
    setGlobalUsageManager(manager) {
        return registerGlobal(API_NAME, manager);
    }
    disable() {
        this.#getUsageManager().disable();
        unregisterGlobal(API_NAME);
    }
    start() {
        return this.#getUsageManager().start();
    }
    stop(measurement) {
        return this.#getUsageManager().stop(measurement);
    }
    pauseAsync(cb) {
        return this.#getUsageManager().pauseAsync(cb);
    }
    sample() {
        return this.#getUsageManager().sample();
    }
    #getUsageManager() {
        return getGlobal(API_NAME) ?? NOOP_USAGE_MANAGER;
    }
}
//# sourceMappingURL=api.js.map