type StructuredArgs = (Record<string, unknown> | undefined)[];
export interface StructuredLogger {
    log: (message: string, ...args: StructuredArgs) => any;
    error: (message: string, ...args: StructuredArgs) => any;
    warn: (message: string, ...args: StructuredArgs) => any;
    info: (message: string, ...args: StructuredArgs) => any;
    debug: (message: string, ...args: StructuredArgs) => any;
    child: (fields: Record<string, unknown>) => StructuredLogger;
}
export declare enum LogLevel {
    "log" = 0,
    "error" = 1,
    "warn" = 2,
    "info" = 3,
    "debug" = 4
}
export declare class SimpleStructuredLogger implements StructuredLogger {
    #private;
    private name;
    private level;
    private fields?;
    constructor(name: string, level?: LogLevel, fields?: Record<string, unknown> | undefined);
    child(fields: Record<string, unknown>, level?: LogLevel): SimpleStructuredLogger;
    log(message: string, ...args: StructuredArgs): void;
    error(message: string, ...args: StructuredArgs): void;
    warn(message: string, ...args: StructuredArgs): void;
    info(message: string, ...args: StructuredArgs): void;
    debug(message: string, ...args: StructuredArgs): void;
}
export {};
