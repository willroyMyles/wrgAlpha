import { MISSING_CONNECTION_NOTIFICATION, MISSING_CONNECTION_RESOLVED_NOTIFICATION, MissingConnectionNotificationPayloadSchema, MissingConnectionResolvedNotificationPayloadSchema, } from "@trigger.dev/core";
export function missingConnectionNotification(integrations) {
    return new MissingConnectionNotification({ integrations });
}
export function missingConnectionResolvedNotification(integrations) {
    return new MissingConnectionResolvedNotification({ integrations });
}
export class MissingConnectionNotification {
    options;
    constructor(options) {
        this.options = options;
    }
    get event() {
        return {
            name: MISSING_CONNECTION_NOTIFICATION,
            title: "Missing Connection Notification",
            source: "trigger.dev",
            icon: "connection-alert",
            parsePayload: MissingConnectionNotificationPayloadSchema.parse,
            properties: [
                {
                    label: "Integrations",
                    text: this.options.integrations.map((i) => i.id).join(", "),
                },
            ],
        };
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
    toJSON() {
        return {
            type: "static",
            title: this.event.title,
            rule: {
                event: this.event.name,
                source: "trigger.dev",
                payload: {
                    client: {
                        id: this.options.integrations.map((i) => i.id),
                    },
                },
            },
        };
    }
}
export class MissingConnectionResolvedNotification {
    options;
    constructor(options) {
        this.options = options;
    }
    get event() {
        return {
            name: MISSING_CONNECTION_RESOLVED_NOTIFICATION,
            title: "Missing Connection Resolved Notification",
            source: "trigger.dev",
            icon: "connection-alert",
            parsePayload: MissingConnectionResolvedNotificationPayloadSchema.parse,
            properties: [
                {
                    label: "Integrations",
                    text: this.options.integrations.map((i) => i.id).join(", "),
                },
            ],
        };
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
    toJSON() {
        return {
            type: "static",
            title: this.event.title,
            rule: {
                event: this.event.name,
                source: "trigger.dev",
                payload: {
                    client: {
                        id: this.options.integrations.map((i) => i.id),
                    },
                },
            },
        };
    }
}
//# sourceMappingURL=notifications.js.map