import { ParsedPayloadSchemaError } from "../errors.js";
import { formatSchemaErrors } from "../utils/formatSchemaErrors.js";
export class InvokeTrigger {
    #options;
    constructor(options) {
        this.#options = options;
    }
    toJSON() {
        return {
            type: "invoke",
        };
    }
    get event() {
        return {
            name: "invoke",
            title: "Manual Invoke",
            source: "trigger.dev",
            examples: this.#options.examples ?? [],
            icon: "trigger",
            parsePayload: (rawPayload) => {
                if (this.#options.schema) {
                    const results = this.#options.schema.safeParse(rawPayload);
                    if (!results.success) {
                        throw new ParsedPayloadSchemaError(formatSchemaErrors(results.error.issues));
                    }
                    return results.data;
                }
                return rawPayload;
            },
            parseInvokePayload: (rawPayload) => {
                if (this.#options.schema) {
                    const results = this.#options.schema.safeParse(rawPayload);
                    if (!results.success) {
                        throw new ParsedPayloadSchemaError(formatSchemaErrors(results.error.issues));
                    }
                    return results.data;
                }
                return rawPayload;
            },
        };
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload() {
        return { success: true };
    }
}
export function invokeTrigger(options) {
    return new InvokeTrigger(options ?? {});
}
//# sourceMappingURL=invokeTrigger.js.map