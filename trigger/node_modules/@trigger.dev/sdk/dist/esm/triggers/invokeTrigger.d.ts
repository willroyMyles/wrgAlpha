import { TriggerMetadata } from "@trigger.dev/core";
import { TypeOf, ZodType, z } from "zod";
import { Job } from "../job.js";
import { TriggerClient } from "../triggerClient.js";
import { EventSpecification, EventSpecificationExample, Trigger } from "../types.js";
/** Configuration options for an InvokeTrigger */
type InvokeTriggerOptions<TSchema extends ZodType = z.ZodTypeAny> = {
    /** A [Zod](https://trigger.dev/docs/documentation/guides/zod) schema that defines the shape of the event payload.
     * The default is `z.any()` which is `any`.
     * */
    schema?: TSchema;
    examples?: EventSpecificationExample[];
};
export declare class InvokeTrigger<TSchema extends ZodType = z.ZodTypeAny> implements Trigger<EventSpecification<TypeOf<TSchema>, z.input<TSchema>>> {
    #private;
    constructor(options: InvokeTriggerOptions<TSchema>);
    toJSON(): TriggerMetadata;
    get event(): {
        name: string;
        title: string;
        source: string;
        examples: {
            name: string;
            id: string;
            icon?: string | undefined;
            payload?: any;
        }[];
        icon: string;
        parsePayload: (rawPayload: unknown) => any;
        parseInvokePayload: (rawPayload: unknown) => any;
    };
    attachToJob(triggerClient: TriggerClient, job: Job<Trigger<EventSpecification<ZodType<TSchema>>>, any>): void;
    get preprocessRuns(): boolean;
    verifyPayload(): Promise<{
        success: true;
    }>;
}
export declare function invokeTrigger<TSchema extends ZodType = z.ZodTypeAny>(options?: InvokeTriggerOptions<TSchema>): Trigger<EventSpecification<TypeOf<TSchema>, z.input<TSchema>>>;
export {};
