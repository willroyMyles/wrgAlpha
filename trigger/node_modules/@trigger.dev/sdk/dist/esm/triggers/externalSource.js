import { deepMergeFilters, } from "@trigger.dev/core";
import { slugifyId } from "../utils.js";
export class ExternalSource {
    options;
    channel;
    constructor(channel, options) {
        this.options = options;
        this.channel = channel;
    }
    async handle(source, rawEvent, logger) {
        return this.options.handler({
            source: { ...source, params: source.params },
            rawEvent,
        }, logger, this.options.integration);
    }
    filter(params, options) {
        return this.options.filter?.(params, options) ?? {};
    }
    properties(params) {
        return this.options.properties?.(params) ?? [];
    }
    async register(params, registerEvent, io, ctx) {
        const { result: event, ommited: source } = omit(registerEvent, "source");
        const { result: sourceWithoutChannel, ommited: channel } = omit(source, "channel");
        const { result: channelWithoutType } = omit(channel, "type");
        const updates = await this.options.register({
            ...event,
            source: { ...sourceWithoutChannel, ...channelWithoutType },
            params,
        }, io, ctx);
        return updates;
    }
    key(params) {
        const parts = [this.options.id, this.channel];
        parts.push(this.options.key(params));
        parts.push(this.integration.id);
        return parts.join("-");
    }
    get integration() {
        return this.options.integration;
    }
    get integrationConfig() {
        return {
            id: this.integration.id,
            metadata: this.integration.metadata,
        };
    }
    get id() {
        return this.options.id;
    }
    get version() {
        return this.options.version;
    }
}
export class ExternalSourceTrigger {
    options;
    constructor(options) {
        this.options = options;
    }
    get event() {
        return this.options.event;
    }
    toJSON() {
        return {
            type: "static",
            title: "External Source",
            rule: {
                event: this.event.name,
                payload: deepMergeFilters(this.options.source.filter(this.options.params, this.options.options), this.event.filter ?? {}, this.options.params.filter ?? {}),
                source: this.event.source,
            },
            properties: this.options.source.properties(this.options.params),
        };
    }
    attachToJob(triggerClient, job) {
        triggerClient.attachSource({
            key: slugifyId(this.options.source.key(this.options.params)),
            source: this.options.source,
            event: this.options.event,
            params: this.options.params,
            options: this.options.options,
        });
    }
    get preprocessRuns() {
        return true;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
}
export function omit(obj, key) {
    const result = {};
    for (const k of Object.keys(obj)) {
        if (k === key)
            continue;
        result[k] = obj[k];
    }
    return { result, ommited: obj[key] };
}
//# sourceMappingURL=externalSource.js.map