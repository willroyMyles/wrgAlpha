import { DisplayProperty } from "@trigger.dev/core";
import { ErrorWithStack, SchemaError, ServerTask } from "@trigger.dev/core";
export declare class ResumeWithTaskError {
    task: ServerTask;
    constructor(task: ServerTask);
}
export declare class ResumeWithParallelTaskError {
    task: ServerTask;
    childErrors: Array<TriggerInternalError>;
    constructor(task: ServerTask, childErrors: Array<TriggerInternalError>);
}
export declare class RetryWithTaskError {
    cause: ErrorWithStack;
    task: ServerTask;
    retryAt: Date;
    constructor(cause: ErrorWithStack, task: ServerTask, retryAt: Date);
}
export declare class CanceledWithTaskError {
    task: ServerTask;
    constructor(task: ServerTask);
}
export declare class YieldExecutionError {
    key: string;
    constructor(key: string);
}
export declare class AutoYieldExecutionError {
    location: string;
    timeRemaining: number;
    timeElapsed: number;
    constructor(location: string, timeRemaining: number, timeElapsed: number);
}
export declare class AutoYieldWithCompletedTaskExecutionError {
    id: string;
    properties: DisplayProperty[] | undefined;
    data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
    };
    output?: string | undefined;
    constructor(id: string, properties: DisplayProperty[] | undefined, data: {
        location: string;
        timeRemaining: number;
        timeElapsed: number;
    }, output?: string | undefined);
}
export declare class AutoYieldRateLimitError {
    resetAtTimestamp: number;
    constructor(resetAtTimestamp: number);
}
export declare class ParsedPayloadSchemaError {
    schemaErrors: SchemaError[];
    constructor(schemaErrors: SchemaError[]);
}
export type TriggerInternalError = ResumeWithTaskError | RetryWithTaskError | CanceledWithTaskError | YieldExecutionError | AutoYieldExecutionError | AutoYieldWithCompletedTaskExecutionError | AutoYieldRateLimitError | ResumeWithParallelTaskError;
/** Use this function if you're using a `try/catch` block to catch errors.
 * It checks if a thrown error is a special internal error that you should ignore.
 * If this returns `true` then you must rethrow the error: `throw err;`
 * @param err The error to check
 * @returns `true` if the error is a Trigger Error, `false` otherwise.
 */
export declare function isTriggerError(err: unknown): err is TriggerInternalError;
export declare class ErrorWithTask extends Error {
    cause: ServerTask;
    constructor(cause: ServerTask, message: string);
}
