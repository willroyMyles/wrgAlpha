import { RequestWithRawBodySchema, } from "@trigger.dev/core";
import { ParsedPayloadSchemaError } from "./errors.js";
import { formatSchemaErrors } from "./utils/formatSchemaErrors.js";
import { slugifyId } from "./utils.js";
export class HttpEndpoint {
    options;
    constructor(options) {
        this.options = options;
    }
    get id() {
        return this.options.id;
    }
    onRequest(options) {
        return new HttpTrigger({
            endpointId: this.id,
            event: this.options.event,
            filter: options?.filter,
            verify: this.options.verify,
        });
    }
    // @internal
    async handleRequest(request) {
        if (!this.options.respondWith)
            return;
        return this.options.respondWith.handler(request, () => {
            const clonedRequest = request.clone();
            return this.options.verify(clonedRequest);
        });
    }
    toJSON() {
        return {
            id: this.id,
            icon: this.options.event.icon,
            version: "1",
            enabled: this.options.enabled ?? true,
            event: this.options.event,
            immediateResponseFilter: this.options.respondWith?.filter,
            skipTriggeringRuns: this.options.respondWith?.skipTriggeringRuns,
            source: this.options.event.source,
        };
    }
}
class HttpTrigger {
    options;
    constructor(options) {
        this.options = options;
    }
    toJSON() {
        return {
            type: "static",
            title: this.options.endpointId,
            properties: this.options.event.properties,
            rule: {
                event: `httpendpoint.${this.options.endpointId}`,
                payload: this.options.filter ?? {},
                source: this.options.event.source,
            },
            link: `http-endpoints/${this.options.endpointId}`,
            help: {
                noRuns: {
                    text: "To start triggering runs click here to setup your HTTP Endpoint with the external API service you want to receive webhooks from.",
                    link: `http-endpoints/${this.options.endpointId}`,
                },
            },
        };
    }
    get event() {
        return this.options.event;
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        const clonedRequest = payload.clone();
        return this.options.verify(clonedRequest);
    }
}
export function httpEndpoint(options) {
    const id = slugifyId(options.id);
    return new HttpEndpoint({
        id,
        enabled: options.enabled,
        respondWith: options.respondWith,
        verify: options.verify,
        event: {
            name: id,
            title: options.title ?? "HTTP Trigger",
            source: options.source,
            icon: options.icon ?? "webhook",
            properties: options.properties,
            examples: options.examples
                ? options.examples
                : [
                    {
                        id: "basic-request",
                        name: "Basic Request",
                        icon: "http-post",
                        payload: {
                            url: "https://cloud.trigger.dev",
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            rawBody: JSON.stringify({
                                foo: "bar",
                            }),
                        },
                    },
                ],
            parsePayload: (rawPayload) => {
                const result = RequestWithRawBodySchema.safeParse(rawPayload);
                if (!result.success) {
                    throw new ParsedPayloadSchemaError(formatSchemaErrors(result.error.issues));
                }
                return new Request(new URL(result.data.url), {
                    method: result.data.method,
                    headers: result.data.headers,
                    body: result.data.rawBody,
                });
            },
        },
    });
}
//# sourceMappingURL=httpEndpoint.js.map