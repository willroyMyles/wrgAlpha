import { ApiEventLog, CompleteTaskBodyV2Input, EphemeralEventDispatcherRequestBody, FailTaskBodyInput, GetRunOptionsWithTaskDetails, GetRunsOptions, InvokeOptions, RegisterSourceEventV2, RegisterTriggerBodyV2, RunTaskBodyInput, ScheduleMetadata, SendEvent, SendEventOptions, StatusUpdate, TriggerSource, UpdateTriggerSourceBodyV2, UpdateWebhookBody } from "@trigger.dev/core";
import { LogLevel } from "@trigger.dev/core/logger";
import { z } from "zod";
import { KeyValueStoreClient } from "./store/keyValueStoreClient.js";
export type ApiClientOptions = {
    apiKey?: string;
    apiUrl?: string;
    logLevel?: LogLevel;
};
export type EndpointRecord = {
    id: string;
    name: string;
    url: string;
};
export type HttpSourceRecord = {
    id: string;
    key: string;
    managed: boolean;
    url: string;
    status: "PENDING" | "ACTIVE" | "INACTIVE";
    secret?: string;
    data?: any;
};
export type RunRecord = {
    id: string;
    jobId: string;
    callbackUrl: string;
    event: ApiEventLog;
};
export declare class UnknownVersionError extends Error {
    constructor(version: string);
}
export declare class ApiClient {
    #private;
    constructor(options: ApiClientOptions);
    registerEndpoint(options: {
        url: string;
        name: string;
    }): Promise<EndpointRecord>;
    runTask(runId: string, task: RunTaskBodyInput, options?: {
        cachedTasksCursor?: string;
    }): Promise<VersionedResponseBody<{
        "2023-09-29": z.ZodObject<{
            task: z.ZodObject<{
                params: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
                status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
                error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                context: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
                name: z.ZodString;
                id: z.ZodString;
                style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
                    style: z.ZodEnum<["normal", "minimal"]>;
                    variant: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                }, {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                }>>>;
                icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                noop: z.ZodBoolean;
                startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
                completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
                delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
                description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    text: z.ZodString;
                    url: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }>, "many">>>;
                outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
                    label: z.ZodString;
                    text: z.ZodString;
                    url: z.ZodOptional<z.ZodString>;
                    imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }, {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }>, "many">>>;
                output: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
                parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
                idempotencyKey: z.ZodString;
                attempts: z.ZodNumber;
                forceYield: z.ZodNullable<z.ZodOptional<z.ZodBoolean>>;
            }, "strip", z.ZodTypeAny, {
                status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                name: string;
                id: string;
                noop: boolean;
                idempotencyKey: string;
                attempts: number;
                params?: import("@trigger.dev/core").DeserializedJson | undefined;
                error?: string | null | undefined;
                context?: import("@trigger.dev/core").DeserializedJson | undefined;
                style?: {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                } | null | undefined;
                icon?: string | null | undefined;
                startedAt?: Date | null | undefined;
                completedAt?: Date | null | undefined;
                delayUntil?: Date | null | undefined;
                description?: string | null | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                outputProperties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                output?: import("@trigger.dev/core").DeserializedJson | undefined;
                parentId?: string | null | undefined;
                operation?: string | null | undefined;
                callbackUrl?: string | null | undefined;
                childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
                forceYield?: boolean | null | undefined;
            }, {
                status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                name: string;
                id: string;
                noop: boolean;
                idempotencyKey: string;
                attempts: number;
                params?: import("@trigger.dev/core").DeserializedJson | undefined;
                error?: string | null | undefined;
                context?: import("@trigger.dev/core").DeserializedJson | undefined;
                style?: {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                } | null | undefined;
                icon?: string | null | undefined;
                startedAt?: Date | null | undefined;
                completedAt?: Date | null | undefined;
                delayUntil?: Date | null | undefined;
                description?: string | null | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                outputProperties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                output?: import("@trigger.dev/core").DeserializedJson | undefined;
                parentId?: string | null | undefined;
                operation?: string | null | undefined;
                callbackUrl?: string | null | undefined;
                childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
                forceYield?: boolean | null | undefined;
            }>;
            cachedTasks: z.ZodOptional<z.ZodObject<{
                tasks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    idempotencyKey: z.ZodString;
                    status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
                    noop: z.ZodDefault<z.ZodBoolean>;
                    output: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
                    parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
                }, "strip", z.ZodTypeAny, {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    noop: boolean;
                    idempotencyKey: string;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }, {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    idempotencyKey: string;
                    noop?: boolean | undefined;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }>, "many">;
                cursor: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                tasks: {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    noop: boolean;
                    idempotencyKey: string;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }[];
                cursor?: string | undefined;
            }, {
                tasks: {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    idempotencyKey: string;
                    noop?: boolean | undefined;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }[];
                cursor?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            task: {
                status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                name: string;
                id: string;
                noop: boolean;
                idempotencyKey: string;
                attempts: number;
                params?: import("@trigger.dev/core").DeserializedJson | undefined;
                error?: string | null | undefined;
                context?: import("@trigger.dev/core").DeserializedJson | undefined;
                style?: {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                } | null | undefined;
                icon?: string | null | undefined;
                startedAt?: Date | null | undefined;
                completedAt?: Date | null | undefined;
                delayUntil?: Date | null | undefined;
                description?: string | null | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                outputProperties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                output?: import("@trigger.dev/core").DeserializedJson | undefined;
                parentId?: string | null | undefined;
                operation?: string | null | undefined;
                callbackUrl?: string | null | undefined;
                childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
                forceYield?: boolean | null | undefined;
            };
            cachedTasks?: {
                tasks: {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    noop: boolean;
                    idempotencyKey: string;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }[];
                cursor?: string | undefined;
            } | undefined;
        }, {
            task: {
                status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                name: string;
                id: string;
                noop: boolean;
                idempotencyKey: string;
                attempts: number;
                params?: import("@trigger.dev/core").DeserializedJson | undefined;
                error?: string | null | undefined;
                context?: import("@trigger.dev/core").DeserializedJson | undefined;
                style?: {
                    style: "normal" | "minimal";
                    variant?: string | undefined;
                } | null | undefined;
                icon?: string | null | undefined;
                startedAt?: Date | null | undefined;
                completedAt?: Date | null | undefined;
                delayUntil?: Date | null | undefined;
                description?: string | null | undefined;
                properties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                outputProperties?: {
                    label: string;
                    text: string;
                    url?: string | undefined;
                    imageUrl?: string[] | undefined;
                }[] | null | undefined;
                output?: import("@trigger.dev/core").DeserializedJson | undefined;
                parentId?: string | null | undefined;
                operation?: string | null | undefined;
                callbackUrl?: string | null | undefined;
                childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
                forceYield?: boolean | null | undefined;
            };
            cachedTasks?: {
                tasks: {
                    status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
                    id: string;
                    idempotencyKey: string;
                    noop?: boolean | undefined;
                    output?: import("@trigger.dev/core").DeserializedJson | undefined;
                    parentId?: string | null | undefined;
                }[];
                cursor?: string | undefined;
            } | undefined;
        }>;
    }, z.ZodObject<{
        params: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
        status: z.ZodEnum<["PENDING", "WAITING", "RUNNING", "COMPLETED", "ERRORED", "CANCELED"]>;
        error: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        context: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
        name: z.ZodString;
        id: z.ZodString;
        style: z.ZodNullable<z.ZodOptional<z.ZodObject<{
            style: z.ZodEnum<["normal", "minimal"]>;
            variant: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }, {
            style: "normal" | "minimal";
            variant?: string | undefined;
        }>>>;
        icon: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        noop: z.ZodBoolean;
        startedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        completedAt: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        delayUntil: z.ZodNullable<z.ZodOptional<z.ZodDate>>;
        description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        properties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        outputProperties: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            text: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            imageUrl: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }, {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }>, "many">>>;
        output: z.ZodNullable<z.ZodOptional<z.ZodType<import("@trigger.dev/core").DeserializedJson, z.ZodTypeDef, import("@trigger.dev/core").DeserializedJson>>>;
        parentId: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        operation: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        callbackUrl: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        childExecutionMode: z.ZodNullable<z.ZodOptional<z.ZodEnum<["SEQUENTIAL", "PARALLEL"]>>>;
        idempotencyKey: z.ZodString;
        attempts: z.ZodNumber;
        forceYield: z.ZodNullable<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("@trigger.dev/core").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("@trigger.dev/core").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }, {
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("@trigger.dev/core").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("@trigger.dev/core").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }>>>;
    completeTask(runId: string, id: string, task: CompleteTaskBodyV2Input): Promise<{
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("@trigger.dev/core").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("@trigger.dev/core").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }>;
    failTask(runId: string, id: string, body: FailTaskBodyInput): Promise<{
        status: "PENDING" | "WAITING" | "RUNNING" | "COMPLETED" | "ERRORED" | "CANCELED";
        name: string;
        id: string;
        noop: boolean;
        idempotencyKey: string;
        attempts: number;
        params?: import("@trigger.dev/core").DeserializedJson | undefined;
        error?: string | null | undefined;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        style?: {
            style: "normal" | "minimal";
            variant?: string | undefined;
        } | null | undefined;
        icon?: string | null | undefined;
        startedAt?: Date | null | undefined;
        completedAt?: Date | null | undefined;
        delayUntil?: Date | null | undefined;
        description?: string | null | undefined;
        properties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        outputProperties?: {
            label: string;
            text: string;
            url?: string | undefined;
            imageUrl?: string[] | undefined;
        }[] | null | undefined;
        output?: import("@trigger.dev/core").DeserializedJson | undefined;
        parentId?: string | null | undefined;
        operation?: string | null | undefined;
        callbackUrl?: string | null | undefined;
        childExecutionMode?: "SEQUENTIAL" | "PARALLEL" | null | undefined;
        forceYield?: boolean | null | undefined;
    }>;
    sendEvent(event: SendEvent, options?: SendEventOptions): Promise<{
        payload: ((string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }>;
    sendEvents(events: SendEvent[], options?: SendEventOptions): Promise<{
        payload: ((string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }[]>;
    cancelEvent(eventId: string): Promise<{
        payload: ((string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[]) & (string | number | boolean | {
            [key: string]: import("@trigger.dev/core").DeserializedJson;
        } | import("@trigger.dev/core").DeserializedJson[] | undefined)) | null;
        name: string;
        id: string;
        timestamp: Date;
        context?: import("@trigger.dev/core").DeserializedJson | undefined;
        deliverAt?: Date | null | undefined;
        deliveredAt?: Date | null | undefined;
        cancelledAt?: Date | null | undefined;
    }>;
    cancelRunsForEvent(eventId: string): Promise<{
        cancelledRunIds: string[];
        failedToCancelRunIds: string[];
    }>;
    updateStatus(runId: string, id: string, status: StatusUpdate): Promise<{
        label: string;
        key: string;
        history: {
            label?: string | undefined;
            state?: "loading" | "success" | "failure" | undefined;
            data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
        }[];
        data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
        state?: "loading" | "success" | "failure" | undefined;
    }>;
    updateSource(client: string, key: string, source: UpdateTriggerSourceBodyV2): Promise<TriggerSource>;
    updateWebhook(key: string, webhookData: UpdateWebhookBody): Promise<TriggerSource>;
    registerTrigger(client: string, id: string, key: string, payload: RegisterTriggerBodyV2, idempotencyKey?: string): Promise<RegisterSourceEventV2>;
    registerSchedule(client: string, id: string, key: string, payload: ScheduleMetadata): Promise<{
        id: string;
        schedule: {
            options: {
                cron: string;
            };
            type: "cron";
            accountId?: string | undefined;
            metadata?: any;
        } | {
            options: {
                seconds: number;
            };
            type: "interval";
            accountId?: string | undefined;
            metadata?: any;
        };
        active: boolean;
        metadata?: any;
    }>;
    unregisterSchedule(client: string, id: string, key: string): Promise<{
        ok: boolean;
    }>;
    getAuth(client: string, id: string): Promise<{
        type: "oauth2" | "apiKey";
        accessToken: string;
        scopes?: string[] | undefined;
        additionalFields?: Record<string, string> | undefined;
    } | undefined>;
    getEvent(eventId: string): Promise<{
        name: string;
        id: string;
        updatedAt: Date;
        runs: {
            status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
            id: string;
            startedAt?: Date | null | undefined;
            completedAt?: Date | null | undefined;
        }[];
        createdAt: Date;
    }>;
    getRun(runId: string, options?: GetRunOptionsWithTaskDetails): Promise<{
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt: Date | null;
        completedAt: Date | null;
        updatedAt: Date | null;
        tasks: import("@trigger.dev/core").RunTaskWithSubtasks[];
        statuses: {
            label: string;
            key: string;
            history: {
                label?: string | undefined;
                state?: "loading" | "success" | "failure" | undefined;
                data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            }[];
            data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            state?: "loading" | "success" | "failure" | undefined;
        }[];
        output?: any;
        nextCursor?: string | undefined;
    }>;
    cancelRun(runId: string): Promise<{
        status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
        id: string;
        startedAt: Date | null;
        completedAt: Date | null;
        updatedAt: Date | null;
        tasks: import("@trigger.dev/core").RunTaskWithSubtasks[];
        statuses: {
            label: string;
            key: string;
            history: {
                label?: string | undefined;
                state?: "loading" | "success" | "failure" | undefined;
                data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            }[];
            data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            state?: "loading" | "success" | "failure" | undefined;
        }[];
        output?: any;
        nextCursor?: string | undefined;
    }>;
    getRunStatuses(runId: string): Promise<{
        statuses: {
            label: string;
            key: string;
            history: {
                label?: string | undefined;
                state?: "loading" | "success" | "failure" | undefined;
                data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            }[];
            data?: Record<string, import("@trigger.dev/core").SerializableJson> | undefined;
            state?: "loading" | "success" | "failure" | undefined;
        }[];
        run: {
            status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
            id: string;
            output?: any;
        };
    }>;
    getRuns(jobSlug: string, options?: GetRunsOptions): Promise<{
        runs: {
            status: "PENDING" | "CANCELED" | "QUEUED" | "WAITING_ON_CONNECTIONS" | "PREPROCESSING" | "STARTED" | "SUCCESS" | "FAILURE" | "TIMED_OUT" | "ABORTED" | "UNRESOLVED_AUTH" | "INVALID_PAYLOAD" | "EXECUTING" | "WAITING_TO_CONTINUE" | "WAITING_TO_EXECUTE";
            id: string;
            startedAt: Date | null;
            completedAt: Date | null;
            updatedAt: Date | null;
        }[];
        nextCursor?: string | undefined;
    }>;
    invokeJob(jobId: string, payload: any, options?: InvokeOptions): Promise<{
        id: string;
    }>;
    cancelRunsForJob(jobId: string): Promise<{
        cancelledRunIds: string[];
        failedToCancelRunIds: string[];
    }>;
    createEphemeralEventDispatcher(payload: EphemeralEventDispatcherRequestBody): Promise<{
        id: string;
    }>;
    get store(): KeyValueStoreClient;
}
type VersionedResponseBodyMap = {
    [key: string]: z.ZodTypeAny;
};
type VersionedResponseBody<TVersions extends VersionedResponseBodyMap, TUnversioned extends z.ZodTypeAny> = {
    [TVersion in keyof TVersions]: {
        version: TVersion;
        body: z.infer<TVersions[TVersion]>;
    };
}[keyof TVersions] | {
    version: "unversioned";
    body: z.infer<TUnversioned>;
};
export {};
