"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyValueStore = void 0;
const runLocalStorage_js_1 = require("../runLocalStorage.js");
class KeyValueStore {
    apiClient;
    type;
    namespace;
    constructor(apiClient, type = null, namespace = "") {
        this.apiClient = apiClient;
        this.type = type;
        this.namespace = namespace;
    }
    #namespacedKey(key) {
        const parts = [];
        if (this.type) {
            parts.push(this.type);
        }
        if (this.namespace) {
            parts.push(this.namespace);
        }
        parts.push(key);
        return parts.join(":");
    }
    #sharedProperties(key) {
        return [
            {
                label: "namespace",
                text: this.type ?? "env",
            },
            {
                label: "key",
                text: key,
            },
        ];
    }
    async delete(param1, param2) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            if (typeof param1 !== "string") {
                throw new Error("Please use the store without a cacheKey when accessing from outside a run.");
            }
            return await this.apiClient.store.delete(this.#namespacedKey(param1));
        }
        const { io } = runStore;
        if (!param2) {
            throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
        }
        return await io.runTask(param1, async (task) => {
            return await this.apiClient.store.delete(this.#namespacedKey(param2));
        }, {
            name: "Key-Value Store Delete",
            icon: "database-minus",
            params: { key: param2 },
            properties: this.#sharedProperties(param2),
            style: { style: "minimal" },
        });
    }
    async get(param1, param2) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            if (typeof param1 !== "string") {
                throw new Error("Please use the store without a cacheKey when accessing from outside a run.");
            }
            return await this.apiClient.store.get(this.#namespacedKey(param1));
        }
        const { io } = runStore;
        if (!param2) {
            throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
        }
        return await io.runTask(param1, async (task) => {
            return await this.apiClient.store.get(this.#namespacedKey(param2));
        }, {
            name: "Key-Value Store Get",
            icon: "database-export",
            params: { key: param2 },
            properties: this.#sharedProperties(param2),
            style: { style: "minimal" },
        });
    }
    async has(param1, param2) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            if (typeof param1 !== "string") {
                throw new Error("Please use the store without a cacheKey when accessing from outside a run.");
            }
            return await this.apiClient.store.has(this.#namespacedKey(param1));
        }
        const { io } = runStore;
        if (!param2) {
            throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
        }
        return await io.runTask(param1, async (task) => {
            return await this.apiClient.store.has(this.#namespacedKey(param2));
        }, {
            name: "Key-Value Store Has",
            icon: "database-search",
            params: { key: param2 },
            properties: this.#sharedProperties(param2),
            style: { style: "minimal" },
        });
    }
    async set(param1, param2, param3) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            if (typeof param1 !== "string") {
                throw new Error("Please use the store without a cacheKey when accessing from outside a run.");
            }
            return await this.apiClient.store.set(this.#namespacedKey(param1), param2);
        }
        const { io } = runStore;
        if (!param2 || typeof param2 !== "string") {
            throw new Error("Please provide a non-empty key when accessing the store from inside a run.");
        }
        const value = param3;
        return await io.runTask(param1, async (task) => {
            return await this.apiClient.store.set(this.#namespacedKey(param2), value);
        }, {
            name: "Key-Value Store Set",
            icon: "database-plus",
            params: { key: param2, value },
            properties: [
                ...this.#sharedProperties(param2),
                ...(typeof value !== "object" || value === null
                    ? [
                        {
                            label: "value",
                            text: String(value) ?? "undefined",
                        },
                    ]
                    : []),
            ],
            style: { style: "minimal" },
        });
    }
}
exports.KeyValueStore = KeyValueStore;
//# sourceMappingURL=keyValueStore.js.map