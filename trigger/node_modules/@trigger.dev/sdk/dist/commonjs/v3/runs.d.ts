import type { ApiRequestOptions, ListProjectRunsQueryParams, ListRunsQueryParams, RescheduleRunRequestBody } from "@trigger.dev/core/v3";
import { ApiPromise, CanceledRunResponse, CursorPagePromise, ListRunResponseItem, ReplayRunResponse, RetrieveRunResponse } from "@trigger.dev/core/v3";
import { AnyTask, Prettify, RunHandle, Task } from "./shared.js";
export type RetrieveRunResult<TRunId> = Prettify<TRunId extends RunHandle<infer TOutput> ? Omit<RetrieveRunResponse, "output"> & {
    output?: TOutput;
} : TRunId extends Task<string, any, infer TTaskOutput> ? Omit<RetrieveRunResponse, "output"> & {
    output?: TTaskOutput;
} : TRunId extends string ? RetrieveRunResponse : never>;
export declare const runs: {
    replay: typeof replayRun;
    cancel: typeof cancelRun;
    retrieve: typeof retrieveRun;
    list: typeof listRuns;
    reschedule: typeof rescheduleRun;
    poll: typeof poll;
};
export type ListRunsItem = ListRunResponseItem;
declare function listRuns(projectRef: string, params?: ListProjectRunsQueryParams, requestOptions?: ApiRequestOptions): CursorPagePromise<typeof ListRunResponseItem>;
declare function listRuns(params?: ListRunsQueryParams, requestOptions?: ApiRequestOptions): CursorPagePromise<typeof ListRunResponseItem>;
type RunId<TRunId> = TRunId extends RunHandle<any> ? TRunId : TRunId extends AnyTask ? string : TRunId extends string ? TRunId : never;
declare function retrieveRun<TRunId extends RunHandle<any> | AnyTask | string>(runId: RunId<TRunId>, requestOptions?: ApiRequestOptions): ApiPromise<RetrieveRunResult<TRunId>>;
declare function replayRun(runId: string, requestOptions?: ApiRequestOptions): ApiPromise<ReplayRunResponse>;
declare function cancelRun(runId: string, requestOptions?: ApiRequestOptions): ApiPromise<CanceledRunResponse>;
declare function rescheduleRun(runId: string, body: RescheduleRunRequestBody, requestOptions?: ApiRequestOptions): ApiPromise<RetrieveRunResponse>;
export type PollOptions = {
    pollIntervalMs?: number;
};
declare function poll<TRunId extends RunHandle<any> | AnyTask | string>(runId: RunId<TRunId>, options?: {
    pollIntervalMs?: number;
}, requestOptions?: ApiRequestOptions): Promise<(TRunId extends RunHandle<infer TOutput> ? Omit<{
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
}, "output"> & {
    output?: TOutput;
} : TRunId extends Task<string, any, infer TTaskOutput> ? Omit<{
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
}, "output"> & {
    output?: TTaskOutput;
} : TRunId extends string ? {
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
} : never) extends infer T ? { [K in keyof T]: (TRunId extends RunHandle<infer TOutput> ? Omit<{
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
}, "output"> & {
    output?: TOutput;
} : TRunId extends Task<string, any, infer TTaskOutput> ? Omit<{
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
}, "output"> & {
    output?: TTaskOutput;
} : TRunId extends string ? {
    status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
    id: string;
    attempts: ({
        status: "PENDING" | "COMPLETED" | "CANCELED" | "EXECUTING" | "FAILED" | "PAUSED";
        id: string;
        updatedAt: Date;
        createdAt: Date;
        startedAt?: Date | undefined;
        completedAt?: Date | undefined;
        error?: {
            message: string;
            name?: string | undefined;
            stackTrace?: string | undefined;
        } | undefined;
    } | undefined)[];
    updatedAt: Date;
    isTest: boolean;
    createdAt: Date;
    tags: string[];
    durationMs: number;
    costInCents: number;
    baseCostInCents: number;
    depth: number;
    triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    relatedRuns: {
        root?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "COMPLETED" | "CANCELED" | "QUEUED" | "EXECUTING" | "FAILED" | "WAITING_FOR_DEPLOY" | "REATTEMPTING" | "FROZEN" | "CRASHED" | "INTERRUPTED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED";
            id: string;
            updatedAt: Date;
            isTest: boolean;
            createdAt: Date;
            tags: string[];
            durationMs: number;
            costInCents: number;
            baseCostInCents: number;
            depth: number;
            triggerFunction: "trigger" | "triggerAndWait" | "batchTriggerAndWait" | "batchTrigger";
            taskIdentifier: string;
            isQueued: boolean;
            isExecuting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            batchId?: string | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            startedAt?: Date | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            ttl?: string | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    payload?: any;
    payloadPresignedUrl?: string | undefined;
    output?: any;
    outputPresignedUrl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    batchId?: string | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    startedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    ttl?: string | undefined;
    expiredAt?: Date | undefined;
} : never)[K]; } : never>;
export {};
