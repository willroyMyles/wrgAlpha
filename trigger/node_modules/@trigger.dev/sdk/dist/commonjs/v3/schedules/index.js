"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.task = task;
exports.create = create;
exports.retrieve = retrieve;
exports.update = update;
exports.del = del;
exports.deactivate = deactivate;
exports.activate = activate;
exports.list = list;
exports.timezones = timezones;
const v3_1 = require("@trigger.dev/core/v3");
const zodfetch_1 = require("@trigger.dev/core/v3/zodfetch");
const shared_js_1 = require("../shared.js");
const tracer_js_1 = require("../tracer.js");
function task(params) {
    const task = (0, shared_js_1.createTask)(params);
    const cron = params.cron
        ? typeof params.cron === "string"
            ? params.cron
            : params.cron.pattern
        : undefined;
    const timezone = (params.cron && typeof params.cron !== "string" ? params.cron.timezone : "UTC") ?? "UTC";
    v3_1.taskCatalog.updateTaskMetadata(task.id, {
        triggerSource: "schedule",
        schedule: cron
            ? {
                cron: cron,
                timezone,
            }
            : undefined,
    });
    return task;
}
/**
 * Creates a new schedule
 * @param options
 * @param options.task - The identifier of the task to be scheduled (Must already exist and be a scheduled task)
 * @param options.cron - The cron expression for the schedule (e.g. `0 0 * * *`)
 * @param options.timezone - An optional timezone for the schedule in the IANA format (e.g. `America/Los_Angeles`). Defaults to "UTC".
 * @param options.externalId - An optional external identifier for the schedule
 * @param options.deduplicationKey - An optional deduplication key for the schedule
 * @returns The created schedule
 */
function create(options, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.create()",
        icon: "clock",
        attributes: {
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: options.cron,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.createSchedule(options, $requestOptions);
}
/**
 * Retrieves a schedule
 * @param scheduleId - The ID of the schedule to retrieve
 * @returns The retrieved schedule
 */
function retrieve(scheduleId, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.retrieve()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.retrieveSchedule(scheduleId, $requestOptions);
}
/**
 * Updates a schedule
 * @param scheduleId - The ID of the schedule to update
 * @param options - The updated schedule options
 * @param options.task - The identifier of the task to be scheduled (Must already exist and be a scheduled task)
 * @param options.cron - The cron expression for the schedule (e.g. `0 0 * * *`)
 * @param options.timezone - An optional timezone for the schedule in the IANA format (e.g. `America/Los_Angeles`). Defaults to "UTC".
 * @param options.externalId - An optional external identifier for the schedule
 * @returns The updated schedule
 */
function update(scheduleId, options, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.update()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.updateSchedule(scheduleId, options, $requestOptions);
}
/**
 * Deletes a schedule
 * @param scheduleId - The ID of the schedule to delete
 */
function del(scheduleId, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.delete()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.deleteSchedule(scheduleId, $requestOptions);
}
/**
 * Deactivates a schedule
 * @param scheduleId - The ID of the schedule to deactivate
 */
function deactivate(scheduleId, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.deactivate()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.deactivateSchedule(scheduleId, $requestOptions);
}
/**
 * Activates a schedule
 * @param scheduleId - The ID of the schedule to activate
 */
function activate(scheduleId, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.activate()",
        icon: "clock",
        attributes: {
            scheduleId,
            ...(0, v3_1.accessoryAttributes)({
                items: [
                    {
                        text: scheduleId,
                        variant: "normal",
                    },
                ],
                style: "codepath",
            }),
        },
    }, requestOptions);
    return apiClient.activateSchedule(scheduleId, $requestOptions);
}
/**
 * Lists schedules
 * @param options - The list options
 * @param options.page - The page number
 * @param options.perPage - The number of schedules per page
 * @returns The list of schedules
 */
function list(options, requestOptions) {
    const apiClient = v3_1.apiClientManager.client;
    if (!apiClient) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    const $requestOptions = (0, v3_1.mergeRequestOptions)({
        tracer: tracer_js_1.tracer,
        name: "schedules.list()",
        icon: "clock",
    }, requestOptions);
    return apiClient.listSchedules(options, $requestOptions);
}
/**
 * Lists the possible timezones we support
 * @param excludeUtc - By default "UTC" is included and is first. If true, "UTC" will be excluded.
 */
function timezones(options) {
    const baseUrl = v3_1.apiClientManager.baseURL;
    if (!baseUrl) {
        throw (0, shared_js_1.apiClientMissingError)();
    }
    return (0, zodfetch_1.zodfetch)(v3_1.TimezonesResult, `${baseUrl}/api/v1/timezones${options?.excludeUtc === true ? "?excludeUtc=true" : ""}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    });
}
//# sourceMappingURL=index.js.map