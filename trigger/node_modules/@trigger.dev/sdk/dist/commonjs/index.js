"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retry = exports.isTriggerError = void 0;
exports.redactString = redactString;
__exportStar(require("./job.js"), exports);
__exportStar(require("./triggerClient.js"), exports);
__exportStar(require("./integrations.js"), exports);
__exportStar(require("./triggers/eventTrigger.js"), exports);
__exportStar(require("./triggers/externalSource.js"), exports);
__exportStar(require("./triggers/dynamic.js"), exports);
__exportStar(require("./triggers/scheduled.js"), exports);
__exportStar(require("./triggers/notifications.js"), exports);
__exportStar(require("./triggers/invokeTrigger.js"), exports);
__exportStar(require("./triggers/webhook.js"), exports);
__exportStar(require("./io.js"), exports);
__exportStar(require("./types.js"), exports);
__exportStar(require("./utils.js"), exports);
__exportStar(require("./security.js"), exports);
var errors_js_1 = require("./errors.js");
Object.defineProperty(exports, "isTriggerError", { enumerable: true, get: function () { return errors_js_1.isTriggerError; } });
var retry_js_1 = require("./retry.js");
Object.defineProperty(exports, "retry", { enumerable: true, get: function () { return retry_js_1.retry; } });
/*
 * This function is used to create a redacted string that can be used in the headers of a fetch request.
 * It is used to prevent the string from being logged in trigger.dev.
 * You can use it like this:
 *
 * await io.backgroundFetch<SomeResponseType>("https://example.com", {
 *  headers: {
 *    Authorization: redactString`Bearer ${ACCESS_TOKEN}`,
 *  },
 * })
 */
function redactString(strings, ...interpolations) {
    return {
        __redactedString: true,
        strings: strings.raw,
        interpolations,
    };
}
//# sourceMappingURL=index.js.map