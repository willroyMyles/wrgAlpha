"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTrigger = void 0;
exports.eventTrigger = eventTrigger;
const core_1 = require("@trigger.dev/core");
const formatSchemaErrors_js_1 = require("../utils/formatSchemaErrors.js");
const errors_js_1 = require("../errors.js");
class EventTrigger {
    #options;
    constructor(options) {
        this.#options = options;
    }
    toJSON() {
        return {
            type: "static",
            title: this.#options.name ?? this.#options.event.title,
            rule: {
                event: this.#options.name ?? this.#options.event.name,
                source: this.#options.source ?? "trigger.dev",
                payload: (0, core_1.deepMergeFilters)(this.#options.filter ?? {}, this.#options.event.filter ?? {}),
            },
        };
    }
    get event() {
        return this.#options.event;
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        if (this.#options.verify) {
            if (payload instanceof Request) {
                const clonedRequest = payload.clone();
                return this.#options.verify(clonedRequest);
            }
        }
        return { success: true };
    }
}
exports.EventTrigger = EventTrigger;
/** `eventTrigger()` is set as a [Job's trigger](https://trigger.dev/docs/sdk/job) to subscribe to an event a Job from [a sent event](https://trigger.dev/docs/sdk/triggerclient/instancemethods/sendevent)
 * @param options options for the EventTrigger
 */
function eventTrigger(options) {
    return new EventTrigger({
        name: options.name,
        filter: options.filter,
        source: options.source,
        event: {
            name: options.name,
            title: "Event",
            source: options.source ?? "trigger.dev",
            icon: "custom-event",
            examples: options.examples,
            parsePayload: (rawPayload) => {
                if (options.schema) {
                    const results = options.schema.safeParse(rawPayload);
                    if (!results.success) {
                        throw new errors_js_1.ParsedPayloadSchemaError((0, formatSchemaErrors_js_1.formatSchemaErrors)(results.error.issues));
                    }
                    return results.data;
                }
                return rawPayload;
            },
        },
    });
}
//# sourceMappingURL=eventTrigger.js.map