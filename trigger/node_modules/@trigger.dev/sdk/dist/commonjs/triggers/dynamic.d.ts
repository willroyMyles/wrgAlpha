import { RegisterSourceEventV2, TriggerMetadata } from "@trigger.dev/core";
import { Job } from "../job.js";
import { TriggerClient } from "../triggerClient.js";
import { EventSpecification, Trigger } from "../types.js";
import { ExternalSource, ExternalSourceParams } from "./externalSource.js";
import { EventFilter } from "@trigger.dev/core";
/** Options for a DynamicTrigger  */
export type DynamicTriggerOptions<TEventSpec extends EventSpecification<any>, TExternalSource extends ExternalSource<any, any, any>> = {
    /** Used to uniquely identify a DynamicTrigger */
    id: string;
    /** An event from an [Integration](https://trigger.dev/docs/integrations) package that you want to attach to the DynamicTrigger. The event types will come through to the payload in your Job's run. */
    event: TEventSpec;
    /** An external source fron an [Integration](https://trigger.dev/docs/integrations) package
     * @example
     * ```ts
     *  import { events } from "@trigger.dev/github";
     *
     *  const dynamicOnIssueOpened = client.defineDynamicTrigger({
          id: "github-issue-opened",
          event: events.onIssueOpened,
          source: github.sources.repo,
        });
     * ```
      */
    source: TExternalSource;
};
/** `DynamicTrigger` allows you to define a trigger that can be configured dynamically at runtime. */
export declare class DynamicTrigger<TEventSpec extends EventSpecification<any>, TExternalSource extends ExternalSource<any, any, any>> implements Trigger<TEventSpec> {
    #private;
    source: TExternalSource;
    /** `DynamicTrigger` allows you to define a trigger that can be configured dynamically at runtime.
     * @param client The `TriggerClient` instance to use for registering the trigger.
     * @param options The options for the dynamic trigger.
     * */
    constructor(client: TriggerClient, options: DynamicTriggerOptions<TEventSpec, TExternalSource>);
    toJSON(): TriggerMetadata;
    get id(): string;
    get event(): TEventSpec;
    /** Use this method to register a new configuration with the DynamicTrigger.
     * @param key The key for the configuration. This will be used to identify the configuration when it is triggered.
     * @param params The params for the configuration.
     * @param options Options for the configuration.
     * @param options.accountId The accountId to associate with the configuration.
     * @param options.filter The filter to use for the configuration.
     *
     */
    register(key: string, params: ExternalSourceParams<TExternalSource>, options?: {
        accountId?: string;
        filter?: EventFilter;
    }): Promise<RegisterSourceEventV2>;
    attachToJob(triggerClient: TriggerClient, job: Job<Trigger<TEventSpec>, any>): void;
    get preprocessRuns(): boolean;
    verifyPayload(payload: ReturnType<TEventSpec["parsePayload"]>): Promise<{
        success: true;
    }>;
}
