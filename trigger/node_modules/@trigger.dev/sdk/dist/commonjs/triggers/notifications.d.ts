import { MissingConnectionNotificationPayload, MissingConnectionResolvedNotificationPayload, TriggerMetadata } from "@trigger.dev/core";
import { TriggerIntegration } from "../integrations.js";
import { Job } from "../job.js";
import { TriggerClient } from "../triggerClient.js";
import { EventSpecification, Trigger } from "../types.js";
export declare function missingConnectionNotification(integrations: Array<TriggerIntegration>): MissingConnectionNotification;
export declare function missingConnectionResolvedNotification(integrations: Array<TriggerIntegration>): MissingConnectionResolvedNotification;
type MissingConnectionNotificationSpecification = EventSpecification<MissingConnectionNotificationPayload>;
type MissingConnectionNotificationOptions = {
    integrations: Array<TriggerIntegration>;
};
export declare class MissingConnectionNotification implements Trigger<MissingConnectionNotificationSpecification> {
    private options;
    constructor(options: MissingConnectionNotificationOptions);
    get event(): {
        name: string;
        title: string;
        source: string;
        icon: string;
        parsePayload: (data: unknown, params?: Partial<import("zod").ParseParams>) => {
            type: "DEVELOPER";
            id: string;
            client: {
                scopes: string[];
                id: string;
                title: string;
                updatedAt: Date;
                createdAt: Date;
            };
            authorizationUrl: string;
        } | {
            type: "EXTERNAL";
            id: string;
            account: {
                id: string;
                metadata?: any;
            };
            client: {
                scopes: string[];
                id: string;
                title: string;
                updatedAt: Date;
                createdAt: Date;
            };
            authorizationUrl: string;
        };
        properties: {
            label: string;
            text: string;
        }[];
    };
    attachToJob(triggerClient: TriggerClient, job: Job<Trigger<MissingConnectionNotificationSpecification>, any>): void;
    get preprocessRuns(): boolean;
    verifyPayload(payload: ReturnType<MissingConnectionNotificationSpecification["parsePayload"]>): Promise<{
        success: true;
    }>;
    toJSON(): TriggerMetadata;
}
type MissingConnectionResolvedNotificationSpecification = EventSpecification<MissingConnectionResolvedNotificationPayload>;
export declare class MissingConnectionResolvedNotification implements Trigger<MissingConnectionResolvedNotificationSpecification> {
    private options;
    constructor(options: MissingConnectionNotificationOptions);
    get event(): {
        name: string;
        title: string;
        source: string;
        icon: string;
        parsePayload: (data: unknown, params?: Partial<import("zod").ParseParams>) => {
            type: "DEVELOPER";
            id: string;
            client: {
                scopes: string[];
                id: string;
                title: string;
                updatedAt: Date;
                createdAt: Date;
                integrationIdentifier: string;
                integrationAuthMethod: string;
            };
            expiresAt: Date;
        } | {
            type: "EXTERNAL";
            id: string;
            account: {
                id: string;
                metadata?: any;
            };
            client: {
                scopes: string[];
                id: string;
                title: string;
                updatedAt: Date;
                createdAt: Date;
                integrationIdentifier: string;
                integrationAuthMethod: string;
            };
            expiresAt: Date;
        };
        properties: {
            label: string;
            text: string;
        }[];
    };
    attachToJob(triggerClient: TriggerClient, job: Job<Trigger<MissingConnectionResolvedNotificationSpecification>, any>): void;
    get preprocessRuns(): boolean;
    verifyPayload(payload: ReturnType<MissingConnectionResolvedNotificationSpecification["parsePayload"]>): Promise<{
        success: true;
    }>;
    toJSON(): TriggerMetadata;
}
export {};
