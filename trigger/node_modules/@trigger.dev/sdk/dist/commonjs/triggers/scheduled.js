"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicSchedule = exports.CronTrigger = exports.IntervalTrigger = void 0;
exports.intervalTrigger = intervalTrigger;
exports.cronTrigger = cronTrigger;
const core_1 = require("@trigger.dev/core");
const cronstrue_1 = __importDefault(require("cronstrue"));
const runLocalStorage_js_1 = require("../runLocalStorage.js");
const examples = [
    {
        id: "now",
        name: "Now",
        icon: "clock",
        payload: {
            ts: core_1.currentDate.marker,
            lastTimestamp: core_1.currentDate.marker,
        },
    },
];
class IntervalTrigger {
    options;
    constructor(options) {
        this.options = options;
    }
    get event() {
        return {
            name: "trigger.scheduled",
            title: "Schedule",
            source: "trigger.dev",
            icon: "schedule-interval",
            examples,
            parsePayload: core_1.ScheduledPayloadSchema.parse,
            properties: [
                {
                    label: "Interval",
                    text: `${this.options.seconds}s`,
                },
            ],
        };
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
    toJSON() {
        return {
            type: "scheduled",
            schedule: {
                type: "interval",
                options: {
                    seconds: this.options.seconds,
                },
            },
        };
    }
}
exports.IntervalTrigger = IntervalTrigger;
/** `intervalTrigger()` is set as a [Job's trigger](/sdk/job) to trigger a Job at a recurring interval.
 * @param options An object containing options about the interval.
 */
function intervalTrigger(options) {
    return new IntervalTrigger(options);
}
class CronTrigger {
    options;
    constructor(options) {
        this.options = options;
    }
    get event() {
        /**
         * We need to concat `(UTC)` string at the end of the human readable string to avoid confusion
         * with execution time/last run of a job in the UI dashboard which is displayed in local time.
         */
        const humanReadable = cronstrue_1.default
            .toString(this.options.cron, {
            throwExceptionOnParseError: false,
        })
            .concat(" (UTC)");
        return {
            name: "trigger.scheduled",
            title: "Cron Schedule",
            source: "trigger.dev",
            icon: "schedule-cron",
            examples,
            parsePayload: core_1.ScheduledPayloadSchema.parse,
            properties: [
                {
                    label: "cron",
                    text: this.options.cron,
                },
                {
                    label: "Schedule",
                    text: humanReadable,
                },
            ],
        };
    }
    attachToJob(triggerClient, job) { }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
    toJSON() {
        return {
            type: "scheduled",
            schedule: {
                type: "cron",
                options: {
                    cron: this.options.cron,
                },
            },
        };
    }
}
exports.CronTrigger = CronTrigger;
/** `cronTrigger()` is set as a [Job's trigger](https://trigger.dev/docs/sdk/job) to trigger a Job on a recurring schedule using a CRON expression.
 * @param options An object containing options about the CRON schedule.
 */
function cronTrigger(options) {
    return new CronTrigger(options);
}
/** DynamicSchedule` allows you to define a scheduled trigger that can be configured dynamically at runtime. */
class DynamicSchedule {
    client;
    options;
    /**
     * @param client The `TriggerClient` instance to use for registering the trigger.
     * @param options The options for the schedule.
     */
    constructor(client, options) {
        this.client = client;
        this.options = options;
        client.attachDynamicSchedule(this.options.id);
    }
    get id() {
        return this.options.id;
    }
    get event() {
        return {
            name: "trigger.scheduled",
            title: "Dynamic Schedule",
            source: "trigger.dev",
            icon: "schedule-dynamic",
            examples,
            parsePayload: core_1.ScheduledPayloadSchema.parse,
        };
    }
    async register(key, metadata) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            return this.client.registerSchedule(this.id, key, metadata);
        }
        const { io } = runStore;
        return await io.runTask([key, "register"], async (task) => {
            return this.client.registerSchedule(this.id, key, metadata);
        }, {
            name: "Register Schedule",
            icon: metadata.type === "cron" ? "schedule-cron" : "schedule-interval",
            properties: [
                { label: "Dynamic Schedule", text: this.id },
                { label: "Schedule ID", text: key },
            ],
            params: metadata,
        });
    }
    async unregister(key) {
        const runStore = runLocalStorage_js_1.runLocalStorage.getStore();
        if (!runStore) {
            return this.client.unregisterSchedule(this.id, key);
        }
        const { io } = runStore;
        return await io.runTask([key, "unregister"], async (task) => {
            return this.client.unregisterSchedule(this.id, key);
        }, {
            name: "Unregister Schedule",
            icon: "schedule",
            properties: [
                { label: "Dynamic Schedule", text: this.id },
                { label: "Schedule ID", text: key },
            ],
        });
    }
    attachToJob(triggerClient, job) {
        triggerClient.attachDynamicScheduleToJob(this.options.id, job);
    }
    get preprocessRuns() {
        return false;
    }
    async verifyPayload(payload) {
        return { success: true };
    }
    toJSON() {
        return {
            type: "dynamic",
            id: this.options.id,
        };
    }
}
exports.DynamicSchedule = DynamicSchedule;
//# sourceMappingURL=scheduled.js.map