import type { BinaryToTextEncoding, BinaryLike, KeyObject } from "crypto";
import { VerifyResult } from "./types.js";
/** Easily verify webhook payloads when they're using common signing methods. */
export declare function verifyRequestSignature({ request, headerName, headerEncoding, secret, algorithm, }: {
    /** The web request that you want to verify. */
    request: Request;
    /** The name of the header that contains the signature. E.g. `X-Cal-Signature-256`. */
    headerName: string;
    /** The header encoding. Defaults to `hex`. */
    headerEncoding?: BinaryToTextEncoding;
    /** The secret that you use to hash the payload. For HttpEndpoints this will usually originally
        come from the Trigger.dev dashboard and should be stored in an environment variable. */
    secret: BinaryLike | KeyObject;
    /** The hashing algorithm that was used to create the signature. Currently only `sha256` is
        supported. */
    algorithm: "sha256";
}): Promise<VerifyResult>;
export declare function verifyHmacSha256(headerValue: string, headerEncoding: BinaryToTextEncoding, secret: BinaryLike | KeyObject, body: string): boolean;
